/* soapStub.h
   Generated by gSOAP 2.8.16 from ws.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapStub_H
#define soapStub_H
#define SOAP_NAMESPACE_OF_empty	""
#define SOAP_NAMESPACE_OF_empty	""
#define SOAP_NAMESPACE_OF_empty	""
#define SOAP_NAMESPACE_OF_empty	""
#define SOAP_NAMESPACE_OF_ns2	"http://xml.netbeans.org/schema/abxProtocol"
#define SOAP_NAMESPACE_OF_ns3	"http://xml.netbeans.org/schema/abxDynaminorg"
#define SOAP_NAMESPACE_OF_ns4	"http://xml.netbeans.org/schema/abxCan"
#define SOAP_NAMESPACE_OF_ns1	"http://ws.abx/"
#include "stdsoap2.h"
#if GSOAP_VERSION != 20816
# error "GSOAP VERSION MISMATCH IN GENERATED CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_xsd__anyType
#define SOAP_TYPE_xsd__anyType (7)
/* Primitive xsd:anyType schema type: */
class SOAP_CMAC xsd__anyType
{
public:
	char *__item;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 7; } /* = unique id SOAP_TYPE_xsd__anyType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__anyType() { xsd__anyType::soap_default(NULL); }
	virtual ~xsd__anyType() { }
};
#endif

#ifndef SOAP_TYPE_xsd__base64Binary
#define SOAP_TYPE_xsd__base64Binary (9)
/* Base64 schema type: */
class SOAP_CMAC xsd__base64Binary
{
public:
	unsigned char *__ptr;
	int __size;
	char *id;	/* optional element of type xsd:string */
	char *type;	/* optional element of type xsd:string */
	char *options;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 9; } /* = unique id SOAP_TYPE_xsd__base64Binary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__base64Binary() { xsd__base64Binary::soap_default(NULL); }
	virtual ~xsd__base64Binary() { }
};
#endif

#ifndef SOAP_TYPE_xsd__base64Binary_
#define SOAP_TYPE_xsd__base64Binary_ (13)
/* Primitive xsd:base64Binary schema type: */
class SOAP_CMAC xsd__base64Binary_ : public xsd__anyType
{
public:
	xsd__base64Binary __item;
public:
	virtual int soap_type() const { return 13; } /* = unique id SOAP_TYPE_xsd__base64Binary_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__base64Binary_() { xsd__base64Binary_::soap_default(NULL); }
	virtual ~xsd__base64Binary_() { }
};
#endif

#ifndef SOAP_TYPE_xsd__boolean
#define SOAP_TYPE_xsd__boolean (14)
/* Primitive xsd:boolean schema type: */
class SOAP_CMAC xsd__boolean : public xsd__anyType
{
public:
	bool __item;
public:
	virtual int soap_type() const { return 14; } /* = unique id SOAP_TYPE_xsd__boolean */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__boolean() { xsd__boolean::soap_default(NULL); }
	virtual ~xsd__boolean() { }
};
#endif

#ifndef SOAP_TYPE_xsd__dateTime
#define SOAP_TYPE_xsd__dateTime (16)
/* Primitive xsd:dateTime schema type: */
class SOAP_CMAC xsd__dateTime : public xsd__anyType
{
public:
	time_t __item;
public:
	virtual int soap_type() const { return 16; } /* = unique id SOAP_TYPE_xsd__dateTime */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__dateTime() { xsd__dateTime::soap_default(NULL); }
	virtual ~xsd__dateTime() { }
};
#endif

#ifndef SOAP_TYPE_xsd__int
#define SOAP_TYPE_xsd__int (18)
/* Primitive xsd:int schema type: */
class SOAP_CMAC xsd__int : public xsd__anyType
{
public:
	int __item;
public:
	virtual int soap_type() const { return 18; } /* = unique id SOAP_TYPE_xsd__int */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__int() { xsd__int::soap_default(NULL); }
	virtual ~xsd__int() { }
};
#endif

#ifndef SOAP_TYPE_xsd__long
#define SOAP_TYPE_xsd__long (19)
/* Primitive xsd:long schema type: */
class SOAP_CMAC xsd__long : public xsd__anyType
{
public:
	LONG64 __item;
public:
	virtual int soap_type() const { return 19; } /* = unique id SOAP_TYPE_xsd__long */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__long() { xsd__long::soap_default(NULL); }
	virtual ~xsd__long() { }
};
#endif

#ifndef SOAP_TYPE_xsd__string
#define SOAP_TYPE_xsd__string (21)
/* Primitive xsd:string schema type: */
class SOAP_CMAC xsd__string : public xsd__anyType
{
public:
	char *__item;
public:
	virtual int soap_type() const { return 21; } /* = unique id SOAP_TYPE_xsd__string */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__string() { xsd__string::soap_default(NULL); }
	virtual ~xsd__string() { }
};
#endif

#ifndef SOAP_TYPE_xsd__unsignedInt
#define SOAP_TYPE_xsd__unsignedInt (22)
/* Primitive xsd:unsignedInt schema type: */
class SOAP_CMAC xsd__unsignedInt : public xsd__anyType
{
public:
	unsigned int __item;
public:
	virtual int soap_type() const { return 22; } /* = unique id SOAP_TYPE_xsd__unsignedInt */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__unsignedInt() { xsd__unsignedInt::soap_default(NULL); }
	virtual ~xsd__unsignedInt() { }
};
#endif

#ifndef SOAP_TYPE_ns2__abxProtocolResult
#define SOAP_TYPE_ns2__abxProtocolResult (23)
/* ns2:abxProtocolResult */
class SOAP_CMAC ns2__abxProtocolResult : public xsd__anyType
{
public:
	unsigned int result;	/* required element of type xsd:unsignedInt */
	class ns2__abxProtocolList *list;	/* required element of type ns2:abxProtocolList */
public:
	virtual int soap_type() const { return 23; } /* = unique id SOAP_TYPE_ns2__abxProtocolResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__abxProtocolResult() { ns2__abxProtocolResult::soap_default(NULL); }
	virtual ~ns2__abxProtocolResult() { }
};
#endif

#ifndef SOAP_TYPE_ns2__abxProtocolList
#define SOAP_TYPE_ns2__abxProtocolList (24)
/* ns2:abxProtocolList */
class SOAP_CMAC ns2__abxProtocolList : public xsd__anyType
{
public:
	int __sizeprotocolList;	/* sequence of elements <protocolList> */
	class ns2__abxProtocol **protocolList;	/* required element of type ns2:abxProtocol */
public:
	virtual int soap_type() const { return 24; } /* = unique id SOAP_TYPE_ns2__abxProtocolList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__abxProtocolList() { ns2__abxProtocolList::soap_default(NULL); }
	virtual ~ns2__abxProtocolList() { }
};
#endif

#ifndef SOAP_TYPE__ns2__abxProtocol_allDescription
#define SOAP_TYPE__ns2__abxProtocol_allDescription (926)
/* ns2:abxProtocol-allDescription */
class SOAP_CMAC _ns2__abxProtocol_allDescription
{
public:
	char *language;	/* required element of type xsd:string */
	char *description;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 926; } /* = unique id SOAP_TYPE__ns2__abxProtocol_allDescription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns2__abxProtocol_allDescription() { _ns2__abxProtocol_allDescription::soap_default(NULL); }
	virtual ~_ns2__abxProtocol_allDescription() { }
};
#endif

#ifndef SOAP_TYPE_ns2__abxProtocol
#define SOAP_TYPE_ns2__abxProtocol (25)
/* ns2:abxProtocol */
class SOAP_CMAC ns2__abxProtocol : public xsd__anyType
{
public:
	int __sizeallDescription;	/* sequence of elements <allDescription> */
	_ns2__abxProtocol_allDescription *allDescription;	/* required element of type ns2:abxProtocol-allDescription */
	char *defaultLanguage;	/* required element of type xsd:string */
	char *messageId;	/* required element of type xsd:string */
	char *protocolName;	/* required element of type xsd:string */
	bool checkDate;	/* required element of type xsd:boolean */
	bool checkSequenceDate;	/* required element of type xsd:boolean */
	bool annualReset;	/* required element of type xsd:boolean */
	char *format;	/* required element of type xsd:string */
	char *note;	/* required element of type xsd:string */
	char *idProtocol;	/* required element of type xsd:string */
	char *protocolDesc;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 25; } /* = unique id SOAP_TYPE_ns2__abxProtocol */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__abxProtocol() { ns2__abxProtocol::soap_default(NULL); }
	virtual ~ns2__abxProtocol() { }
};
#endif

#ifndef SOAP_TYPE_ns3__abxDynamicorgRuleList
#define SOAP_TYPE_ns3__abxDynamicorgRuleList (26)
/* ns3:abxDynamicorgRuleList */
class SOAP_CMAC ns3__abxDynamicorgRuleList : public xsd__anyType
{
public:
	int __sizelist;	/* sequence of elements <list> */
	class ns3__abxDynamicorgRule **list;	/* required element of type ns3:abxDynamicorgRule */
public:
	virtual int soap_type() const { return 26; } /* = unique id SOAP_TYPE_ns3__abxDynamicorgRuleList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__abxDynamicorgRuleList() { ns3__abxDynamicorgRuleList::soap_default(NULL); }
	virtual ~ns3__abxDynamicorgRuleList() { }
};
#endif

#ifndef SOAP_TYPE_ns3__abxDynamicorgRule
#define SOAP_TYPE_ns3__abxDynamicorgRule (27)
/* ns3:abxDynamicorgRule */
class SOAP_CMAC ns3__abxDynamicorgRule : public xsd__anyType
{
public:
	char *ruleName;	/* required element of type xsd:string */
	char *user;	/* required element of type xsd:string */
	char *templateName;	/* required element of type xsd:string */
	char *rootInstanceName;	/* required element of type xsd:string */
	int __sizeelements;	/* sequence of elements <elements> */
	class ns3__abxDynamicorgRuleElement **elements;	/* required element of type ns3:abxDynamicorgRuleElement */
	class ns1__abxPermission *permission;	/* required element of type ns1:abxPermission */
public:
	virtual int soap_type() const { return 27; } /* = unique id SOAP_TYPE_ns3__abxDynamicorgRule */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__abxDynamicorgRule() { ns3__abxDynamicorgRule::soap_default(NULL); }
	virtual ~ns3__abxDynamicorgRule() { }
};
#endif

#ifndef SOAP_TYPE_ns3__abxDynamicorgRuleElement
#define SOAP_TYPE_ns3__abxDynamicorgRuleElement (28)
/* ns3:abxDynamicorgRuleElement */
class SOAP_CMAC ns3__abxDynamicorgRuleElement : public xsd__anyType
{
public:
	char *ruleTypeName;	/* required element of type xsd:string */
	char *Description;	/* required element of type xsd:string */
	int orderId;	/* required element of type xsd:int */
	char *option;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 28; } /* = unique id SOAP_TYPE_ns3__abxDynamicorgRuleElement */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__abxDynamicorgRuleElement() { ns3__abxDynamicorgRuleElement::soap_default(NULL); }
	virtual ~ns3__abxDynamicorgRuleElement() { }
};
#endif

#ifndef SOAP_TYPE_ns3__abxDynamicRuleResult
#define SOAP_TYPE_ns3__abxDynamicRuleResult (29)
/* ns3:abxDynamicRuleResult */
class SOAP_CMAC ns3__abxDynamicRuleResult : public xsd__anyType
{
public:
	unsigned int result;	/* required element of type xsd:unsignedInt */
	ns3__abxDynamicorgRuleList *rules;	/* required element of type ns3:abxDynamicorgRuleList */
public:
	virtual int soap_type() const { return 29; } /* = unique id SOAP_TYPE_ns3__abxDynamicRuleResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__abxDynamicRuleResult() { ns3__abxDynamicRuleResult::soap_default(NULL); }
	virtual ~ns3__abxDynamicRuleResult() { }
};
#endif

#ifndef SOAP_TYPE_ns3__abxDynorgTypeResult
#define SOAP_TYPE_ns3__abxDynorgTypeResult (30)
/* ns3:abxDynorgTypeResult */
class SOAP_CMAC ns3__abxDynorgTypeResult : public xsd__anyType
{
public:
	unsigned int result;	/* required element of type xsd:unsignedInt */
	class ns3__abxDynamicorgTypeList *types;	/* required element of type ns3:abxDynamicorgTypeList */
public:
	virtual int soap_type() const { return 30; } /* = unique id SOAP_TYPE_ns3__abxDynorgTypeResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__abxDynorgTypeResult() { ns3__abxDynorgTypeResult::soap_default(NULL); }
	virtual ~ns3__abxDynorgTypeResult() { }
};
#endif

#ifndef SOAP_TYPE_ns3__abxDynamicorgTypeList
#define SOAP_TYPE_ns3__abxDynamicorgTypeList (31)
/* ns3:abxDynamicorgTypeList */
class SOAP_CMAC ns3__abxDynamicorgTypeList : public xsd__anyType
{
public:
	int __sizetype;	/* sequence of elements <type> */
	class ns3__abxDynorgRuleType **type;	/* required element of type ns3:abxDynorgRuleType */
public:
	virtual int soap_type() const { return 31; } /* = unique id SOAP_TYPE_ns3__abxDynamicorgTypeList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__abxDynamicorgTypeList() { ns3__abxDynamicorgTypeList::soap_default(NULL); }
	virtual ~ns3__abxDynamicorgTypeList() { }
};
#endif

#ifndef SOAP_TYPE_ns3__abxDynorgRuleType
#define SOAP_TYPE_ns3__abxDynorgRuleType (32)
/* ns3:abxDynorgRuleType */
class SOAP_CMAC ns3__abxDynorgRuleType : public xsd__anyType
{
public:
	char *name;	/* required element of type xsd:string */
	char *description;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 32; } /* = unique id SOAP_TYPE_ns3__abxDynorgRuleType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__abxDynorgRuleType() { ns3__abxDynorgRuleType::soap_default(NULL); }
	virtual ~ns3__abxDynorgRuleType() { }
};
#endif

#ifndef SOAP_TYPE_ns4__abxCan
#define SOAP_TYPE_ns4__abxCan (33)
/* ns4:abxCan */
class SOAP_CMAC ns4__abxCan : public xsd__anyType
{
public:
	unsigned int result;	/* required element of type xsd:unsignedInt */
	bool can;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 33; } /* = unique id SOAP_TYPE_ns4__abxCan */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__abxCan() { ns4__abxCan::soap_default(NULL); }
	virtual ~ns4__abxCan() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteSDKTaskFieldMapping
#define SOAP_TYPE_ns1__DeleteSDKTaskFieldMapping (34)
/* ns1:DeleteSDKTaskFieldMapping */
class SOAP_CMAC ns1__DeleteSDKTaskFieldMapping : public xsd__anyType
{
public:
	class ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *taskId;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 34; } /* = unique id SOAP_TYPE_ns1__DeleteSDKTaskFieldMapping */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteSDKTaskFieldMapping() { ns1__DeleteSDKTaskFieldMapping::soap_default(NULL); }
	virtual ~ns1__DeleteSDKTaskFieldMapping() { }
};
#endif

#ifndef SOAP_TYPE_ns1__IDtype
#define SOAP_TYPE_ns1__IDtype (35)
/* ns1:IDtype */
class SOAP_CMAC ns1__IDtype : public xsd__anyType
{
public:
	char *SessionID;	/* required element of type xsd:string */
	char *CryptSessionHash;	/* required element of type xsd:string */
	bool privilegedUser;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 35; } /* = unique id SOAP_TYPE_ns1__IDtype */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__IDtype() { ns1__IDtype::soap_default(NULL); }
	virtual ~ns1__IDtype() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteSDKTaskFieldMappingResponse
#define SOAP_TYPE_ns1__DeleteSDKTaskFieldMappingResponse (36)
/* ns1:DeleteSDKTaskFieldMappingResponse */
class SOAP_CMAC ns1__DeleteSDKTaskFieldMappingResponse : public xsd__anyType
{
public:
	class ns1__abxSDKResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxSDKResult */
public:
	virtual int soap_type() const { return 36; } /* = unique id SOAP_TYPE_ns1__DeleteSDKTaskFieldMappingResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteSDKTaskFieldMappingResponse() { ns1__DeleteSDKTaskFieldMappingResponse::soap_default(NULL); }
	virtual ~ns1__DeleteSDKTaskFieldMappingResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxSDKResult
#define SOAP_TYPE_ns1__abxSDKResult (37)
/* ns1:abxSDKResult */
class SOAP_CMAC ns1__abxSDKResult : public xsd__anyType
{
public:
	unsigned int result;	/* required element of type xsd:unsignedInt */
	class ns1__abxSDKTaskList *listTask;	/* optional element of type ns1:abxSDKTaskList */
	class ns1__abxSDKRuleList *listRule;	/* optional element of type ns1:abxSDKRuleList */
	class ns1__abxSDKVariableList *listVariable;	/* optional element of type ns1:abxSDKVariableList */
	class ns1__abxSDKWatchFolderDirectoryList *listWatchFolderDirectory;	/* optional element of type ns1:abxSDKWatchFolderDirectoryList */
public:
	virtual int soap_type() const { return 37; } /* = unique id SOAP_TYPE_ns1__abxSDKResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxSDKResult() { ns1__abxSDKResult::soap_default(NULL); }
	virtual ~ns1__abxSDKResult() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxSDKTaskList
#define SOAP_TYPE_ns1__abxSDKTaskList (38)
/* ns1:abxSDKTaskList */
class SOAP_CMAC ns1__abxSDKTaskList : public xsd__anyType
{
public:
	int __sizetasks;	/* sequence of elements <tasks> */
	class ns1__abxSDKTask **tasks;	/* required element of type ns1:abxSDKTask */
public:
	virtual int soap_type() const { return 38; } /* = unique id SOAP_TYPE_ns1__abxSDKTaskList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxSDKTaskList() { ns1__abxSDKTaskList::soap_default(NULL); }
	virtual ~ns1__abxSDKTaskList() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxSDKTask
#define SOAP_TYPE_ns1__abxSDKTask (39)
/* ns1:abxSDKTask */
class SOAP_CMAC ns1__abxSDKTask : public xsd__anyType
{
public:
	char *id;	/* optional element of type xsd:string */
	char *name;	/* optional element of type xsd:string */
	char *description;	/* optional element of type xsd:string */
	char *instanceName;	/* optional element of type xsd:string */
	char *fileType;	/* optional element of type xsd:string */
	char *status;	/* optional element of type xsd:string */
	char *templateFile;	/* optional element of type xsd:string */
	int __sizewatchFolder;	/* sequence of elements <watchFolder> */
	class ns1__abxSDKWatchFolder **watchFolder;	/* optional element of type ns1:abxSDKWatchFolder */
	int __sizefieldMappings;	/* sequence of elements <fieldMappings> */
	class ns1__abxSDKTaskFieldMapping **fieldMappings;	/* optional element of type ns1:abxSDKTaskFieldMapping */
	int __sizeexcelPreviewSheets;	/* sequence of elements <excelPreviewSheets> */
	class ns1__abxSDKTaskExcelPreviewSheet **excelPreviewSheets;	/* optional element of type ns1:abxSDKTaskExcelPreviewSheet */
	int __sizePDFPreview;	/* sequence of elements <PDFPreview> */
	class ns1__abxSDKTaskPDFPreview **PDFPreview;	/* optional element of type ns1:abxSDKTaskPDFPreview */
	int __sizeTXTPreview;	/* sequence of elements <TXTPreview> */
	char **TXTPreview;	/* optional element of type xsd:string */
	int __sizevalidateData;	/* sequence of elements <validateData> */
	class ns1__abxSDKTaskValidateData **validateData;	/* optional element of type ns1:abxSDKTaskValidateData */
public:
	virtual int soap_type() const { return 39; } /* = unique id SOAP_TYPE_ns1__abxSDKTask */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxSDKTask() { ns1__abxSDKTask::soap_default(NULL); }
	virtual ~ns1__abxSDKTask() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxSDKWatchFolder
#define SOAP_TYPE_ns1__abxSDKWatchFolder (40)
/* ns1:abxSDKWatchFolder */
class SOAP_CMAC ns1__abxSDKWatchFolder : public xsd__anyType
{
public:
	char *watchFolderId;	/* required element of type xsd:string */
	char *taskId;	/* required element of type xsd:string */
	char *serverType;	/* required element of type xsd:string */
	char *configXML;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 40; } /* = unique id SOAP_TYPE_ns1__abxSDKWatchFolder */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxSDKWatchFolder() { ns1__abxSDKWatchFolder::soap_default(NULL); }
	virtual ~ns1__abxSDKWatchFolder() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxSDKTaskFieldMapping
#define SOAP_TYPE_ns1__abxSDKTaskFieldMapping (41)
/* ns1:abxSDKTaskFieldMapping */
class SOAP_CMAC ns1__abxSDKTaskFieldMapping : public xsd__anyType
{
public:
	char *fieldMappingId;	/* required element of type xsd:string */
	char *fieldName;	/* required element of type xsd:string */
	char *previewXML;	/* required element of type xsd:string */
	int __sizefieldMappingRules;	/* sequence of elements <fieldMappingRules> */
	class ns1__abxSDKTaskFieldMappingRule **fieldMappingRules;	/* optional element of type ns1:abxSDKTaskFieldMappingRule */
public:
	virtual int soap_type() const { return 41; } /* = unique id SOAP_TYPE_ns1__abxSDKTaskFieldMapping */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxSDKTaskFieldMapping() { ns1__abxSDKTaskFieldMapping::soap_default(NULL); }
	virtual ~ns1__abxSDKTaskFieldMapping() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxSDKTaskFieldMappingRule
#define SOAP_TYPE_ns1__abxSDKTaskFieldMappingRule (42)
/* ns1:abxSDKTaskFieldMappingRule */
class SOAP_CMAC ns1__abxSDKTaskFieldMappingRule : public xsd__anyType
{
public:
	char *fieldMappingRuleId;	/* required element of type xsd:string */
	char *ruleId;	/* required element of type xsd:string */
	char *ruleName;	/* required element of type xsd:string */
	char *parametersXML;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 42; } /* = unique id SOAP_TYPE_ns1__abxSDKTaskFieldMappingRule */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxSDKTaskFieldMappingRule() { ns1__abxSDKTaskFieldMappingRule::soap_default(NULL); }
	virtual ~ns1__abxSDKTaskFieldMappingRule() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxSDKTaskExcelPreviewSheet
#define SOAP_TYPE_ns1__abxSDKTaskExcelPreviewSheet (43)
/* ns1:abxSDKTaskExcelPreviewSheet */
class SOAP_CMAC ns1__abxSDKTaskExcelPreviewSheet : public xsd__anyType
{
public:
	int columnCount;	/* required element of type xsd:int */
	int rowCount;	/* required element of type xsd:int */
	int __sizecolumns;	/* sequence of elements <columns> */
	class ns1__abxSDKTaskExcelPreviewColumn **columns;	/* optional element of type ns1:abxSDKTaskExcelPreviewColumn */
	int __sizerows;	/* sequence of elements <rows> */
	class ns1__abxSDKTaskExcelPreviewRow **rows;	/* optional element of type ns1:abxSDKTaskExcelPreviewRow */
public:
	virtual int soap_type() const { return 43; } /* = unique id SOAP_TYPE_ns1__abxSDKTaskExcelPreviewSheet */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxSDKTaskExcelPreviewSheet() { ns1__abxSDKTaskExcelPreviewSheet::soap_default(NULL); }
	virtual ~ns1__abxSDKTaskExcelPreviewSheet() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxSDKTaskExcelPreviewColumn
#define SOAP_TYPE_ns1__abxSDKTaskExcelPreviewColumn (44)
/* ns1:abxSDKTaskExcelPreviewColumn */
class SOAP_CMAC ns1__abxSDKTaskExcelPreviewColumn : public xsd__anyType
{
public:
	int columnId;	/* required element of type xsd:int */
	int columnWidth;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 44; } /* = unique id SOAP_TYPE_ns1__abxSDKTaskExcelPreviewColumn */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxSDKTaskExcelPreviewColumn() { ns1__abxSDKTaskExcelPreviewColumn::soap_default(NULL); }
	virtual ~ns1__abxSDKTaskExcelPreviewColumn() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxSDKTaskExcelPreviewRow
#define SOAP_TYPE_ns1__abxSDKTaskExcelPreviewRow (45)
/* ns1:abxSDKTaskExcelPreviewRow */
class SOAP_CMAC ns1__abxSDKTaskExcelPreviewRow : public xsd__anyType
{
public:
	int columnId;	/* required element of type xsd:int */
	int rowId;	/* required element of type xsd:int */
	char *value;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 45; } /* = unique id SOAP_TYPE_ns1__abxSDKTaskExcelPreviewRow */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxSDKTaskExcelPreviewRow() { ns1__abxSDKTaskExcelPreviewRow::soap_default(NULL); }
	virtual ~ns1__abxSDKTaskExcelPreviewRow() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxSDKTaskPDFPreview
#define SOAP_TYPE_ns1__abxSDKTaskPDFPreview (46)
/* ns1:abxSDKTaskPDFPreview */
class SOAP_CMAC ns1__abxSDKTaskPDFPreview : public xsd__anyType
{
public:
	int *width;	/* optional element of type xsd:int */
	int *height;	/* optional element of type xsd:int */
	char *text;	/* optional element of type xsd:string */
	int __sizeimages;	/* sequence of elements <images> */
	class ns1__abxSDKTaskPDFImage **images;	/* optional element of type ns1:abxSDKTaskPDFImage */
public:
	virtual int soap_type() const { return 46; } /* = unique id SOAP_TYPE_ns1__abxSDKTaskPDFPreview */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxSDKTaskPDFPreview() { ns1__abxSDKTaskPDFPreview::soap_default(NULL); }
	virtual ~ns1__abxSDKTaskPDFPreview() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxSDKTaskPDFImage
#define SOAP_TYPE_ns1__abxSDKTaskPDFImage (47)
/* ns1:abxSDKTaskPDFImage */
class SOAP_CMAC ns1__abxSDKTaskPDFImage : public xsd__anyType
{
public:
	xsd__base64Binary bitArray;	/* required element of type xsd:base64Binary */
public:
	virtual int soap_type() const { return 47; } /* = unique id SOAP_TYPE_ns1__abxSDKTaskPDFImage */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxSDKTaskPDFImage() { ns1__abxSDKTaskPDFImage::soap_default(NULL); }
	virtual ~ns1__abxSDKTaskPDFImage() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxSDKTaskValidateData
#define SOAP_TYPE_ns1__abxSDKTaskValidateData (48)
/* ns1:abxSDKTaskValidateData */
class SOAP_CMAC ns1__abxSDKTaskValidateData : public xsd__anyType
{
public:
	char *detailedMessage;	/* optional element of type xsd:string */
	int __sizefields;	/* sequence of elements <fields> */
	class ns1__abxSDKTaskValidateField **fields;	/* optional element of type ns1:abxSDKTaskValidateField */
	int __sizefilesAttach;	/* sequence of elements <filesAttach> */
	char **filesAttach;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 48; } /* = unique id SOAP_TYPE_ns1__abxSDKTaskValidateData */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxSDKTaskValidateData() { ns1__abxSDKTaskValidateData::soap_default(NULL); }
	virtual ~ns1__abxSDKTaskValidateData() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxSDKTaskValidateField
#define SOAP_TYPE_ns1__abxSDKTaskValidateField (49)
/* ns1:abxSDKTaskValidateField */
class SOAP_CMAC ns1__abxSDKTaskValidateField : public xsd__anyType
{
public:
	char *field;	/* required element of type xsd:string */
	char *value;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 49; } /* = unique id SOAP_TYPE_ns1__abxSDKTaskValidateField */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxSDKTaskValidateField() { ns1__abxSDKTaskValidateField::soap_default(NULL); }
	virtual ~ns1__abxSDKTaskValidateField() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxSDKRuleList
#define SOAP_TYPE_ns1__abxSDKRuleList (50)
/* ns1:abxSDKRuleList */
class SOAP_CMAC ns1__abxSDKRuleList : public xsd__anyType
{
public:
	int __sizerules;	/* sequence of elements <rules> */
	class ns1__abxSDKRule **rules;	/* required element of type ns1:abxSDKRule */
public:
	virtual int soap_type() const { return 50; } /* = unique id SOAP_TYPE_ns1__abxSDKRuleList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxSDKRuleList() { ns1__abxSDKRuleList::soap_default(NULL); }
	virtual ~ns1__abxSDKRuleList() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxSDKRule
#define SOAP_TYPE_ns1__abxSDKRule (51)
/* ns1:abxSDKRule */
class SOAP_CMAC ns1__abxSDKRule : public xsd__anyType
{
public:
	char *id;	/* required element of type xsd:string */
	char *name;	/* required element of type xsd:string */
	char *name_USCOREdescription;	/* required element of type xsd:string */
	char *description;	/* required element of type xsd:string */
	char *parametersXML;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 51; } /* = unique id SOAP_TYPE_ns1__abxSDKRule */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxSDKRule() { ns1__abxSDKRule::soap_default(NULL); }
	virtual ~ns1__abxSDKRule() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxSDKVariableList
#define SOAP_TYPE_ns1__abxSDKVariableList (52)
/* ns1:abxSDKVariableList */
class SOAP_CMAC ns1__abxSDKVariableList : public xsd__anyType
{
public:
	int __sizevariables;	/* sequence of elements <variables> */
	class ns1__abxSDKVariable **variables;	/* required element of type ns1:abxSDKVariable */
public:
	virtual int soap_type() const { return 52; } /* = unique id SOAP_TYPE_ns1__abxSDKVariableList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxSDKVariableList() { ns1__abxSDKVariableList::soap_default(NULL); }
	virtual ~ns1__abxSDKVariableList() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxSDKVariable
#define SOAP_TYPE_ns1__abxSDKVariable (53)
/* ns1:abxSDKVariable */
class SOAP_CMAC ns1__abxSDKVariable : public xsd__anyType
{
public:
	char *key;	/* required element of type xsd:string */
	char *value;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 53; } /* = unique id SOAP_TYPE_ns1__abxSDKVariable */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxSDKVariable() { ns1__abxSDKVariable::soap_default(NULL); }
	virtual ~ns1__abxSDKVariable() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxSDKWatchFolderDirectoryList
#define SOAP_TYPE_ns1__abxSDKWatchFolderDirectoryList (54)
/* ns1:abxSDKWatchFolderDirectoryList */
class SOAP_CMAC ns1__abxSDKWatchFolderDirectoryList : public xsd__anyType
{
public:
	int __sizedirectories;	/* sequence of elements <directories> */
	class ns1__abxSDKWatchFolderDirectory **directories;	/* required element of type ns1:abxSDKWatchFolderDirectory */
public:
	virtual int soap_type() const { return 54; } /* = unique id SOAP_TYPE_ns1__abxSDKWatchFolderDirectoryList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxSDKWatchFolderDirectoryList() { ns1__abxSDKWatchFolderDirectoryList::soap_default(NULL); }
	virtual ~ns1__abxSDKWatchFolderDirectoryList() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxSDKWatchFolderDirectory
#define SOAP_TYPE_ns1__abxSDKWatchFolderDirectory (55)
/* ns1:abxSDKWatchFolderDirectory */
class SOAP_CMAC ns1__abxSDKWatchFolderDirectory : public xsd__anyType
{
public:
	char *directoryName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 55; } /* = unique id SOAP_TYPE_ns1__abxSDKWatchFolderDirectory */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxSDKWatchFolderDirectory() { ns1__abxSDKWatchFolderDirectory::soap_default(NULL); }
	virtual ~ns1__abxSDKWatchFolderDirectory() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RemoveUserByAllGroups
#define SOAP_TYPE_ns1__RemoveUserByAllGroups (56)
/* ns1:RemoveUserByAllGroups */
class SOAP_CMAC ns1__RemoveUserByAllGroups : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *username;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 56; } /* = unique id SOAP_TYPE_ns1__RemoveUserByAllGroups */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RemoveUserByAllGroups() { ns1__RemoveUserByAllGroups::soap_default(NULL); }
	virtual ~ns1__RemoveUserByAllGroups() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RemoveUserByAllGroupsResponse
#define SOAP_TYPE_ns1__RemoveUserByAllGroupsResponse (57)
/* ns1:RemoveUserByAllGroupsResponse */
class SOAP_CMAC ns1__RemoveUserByAllGroupsResponse : public xsd__anyType
{
public:
	class ns1__abxUserListResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxUserListResult */
public:
	virtual int soap_type() const { return 57; } /* = unique id SOAP_TYPE_ns1__RemoveUserByAllGroupsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RemoveUserByAllGroupsResponse() { ns1__RemoveUserByAllGroupsResponse::soap_default(NULL); }
	virtual ~ns1__RemoveUserByAllGroupsResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxUserListResult
#define SOAP_TYPE_ns1__abxUserListResult (58)
/* ns1:abxUserListResult */
class SOAP_CMAC ns1__abxUserListResult : public xsd__anyType
{
public:
	unsigned int result;	/* required element of type xsd:unsignedInt */
	class ns1__abxUserList *users;	/* required element of type ns1:abxUserList */
public:
	virtual int soap_type() const { return 58; } /* = unique id SOAP_TYPE_ns1__abxUserListResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxUserListResult() { ns1__abxUserListResult::soap_default(NULL); }
	virtual ~ns1__abxUserListResult() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxUserList
#define SOAP_TYPE_ns1__abxUserList (59)
/* ns1:abxUserList */
class SOAP_CMAC ns1__abxUserList : public xsd__anyType
{
public:
	int __sizeuser;	/* sequence of elements <user> */
	class ns1__abxUser **user;	/* required element of type ns1:abxUser */
public:
	virtual int soap_type() const { return 59; } /* = unique id SOAP_TYPE_ns1__abxUserList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxUserList() { ns1__abxUserList::soap_default(NULL); }
	virtual ~ns1__abxUserList() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxUser
#define SOAP_TYPE_ns1__abxUser (60)
/* ns1:abxUser */
class SOAP_CMAC ns1__abxUser : public xsd__anyType
{
public:
	char *userName;	/* required element of type xsd:string */
	char *userPassword;	/* required element of type xsd:string */
	char *description;	/* required element of type xsd:string */
	char *userEmail;	/* required element of type xsd:string */
	char *userId;	/* required element of type xsd:string */
	char *userType;	/* required element of type xsd:string */
	char *userMaxSessions;	/* required element of type xsd:string */
	char *userAvailSessions;	/* required element of type xsd:string */
	bool notificaEmail;	/* required element of type xsd:boolean */
	bool usaDefProcesso;	/* required element of type xsd:boolean */
	bool disAutoWorklist;	/* required element of type xsd:boolean */
	bool disAutoRaccoglitori;	/* required element of type xsd:boolean */
	bool previewWorklist;	/* required element of type xsd:boolean */
	bool protocolEnabled;	/* required element of type xsd:boolean */
	char *defaultProtocolId;	/* required element of type xsd:string */
	int __sizeuserConfigList;	/* sequence of elements <userConfigList> */
	class ns1__abxUserConfig **userConfigList;	/* required element of type ns1:abxUserConfig */
	class ns1__abxGroupList *groupList;	/* required element of type ns1:abxGroupList */
	bool privilegedUser;	/* required element of type xsd:boolean */
	char *digitalSignAlias;	/* required element of type xsd:string */
	char *digitalSignPassword;	/* required element of type xsd:string */
	int digitalSignPasswordType;	/* required element of type xsd:int */
	bool modifyUserPassword;	/* required element of type xsd:boolean */
	bool modifyDigitalSignPassword;	/* required element of type xsd:boolean */
	bool isSystemUser;	/* required element of type xsd:boolean */
	bool worklistAutoRefresh;	/* required element of type xsd:boolean */
	bool isActiveDirectoryUser;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 60; } /* = unique id SOAP_TYPE_ns1__abxUser */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxUser() { ns1__abxUser::soap_default(NULL); }
	virtual ~ns1__abxUser() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxUserConfig
#define SOAP_TYPE_ns1__abxUserConfig (61)
/* ns1:abxUserConfig */
class SOAP_CMAC ns1__abxUserConfig : public xsd__anyType
{
public:
	char *key;	/* required element of type xsd:string */
	char *value;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 61; } /* = unique id SOAP_TYPE_ns1__abxUserConfig */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxUserConfig() { ns1__abxUserConfig::soap_default(NULL); }
	virtual ~ns1__abxUserConfig() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxGroupList
#define SOAP_TYPE_ns1__abxGroupList (62)
/* ns1:abxGroupList */
class SOAP_CMAC ns1__abxGroupList : public xsd__anyType
{
public:
	int __sizegroup;	/* sequence of elements <group> */
	class ns1__abxGroup **group;	/* required element of type ns1:abxGroup */
public:
	virtual int soap_type() const { return 62; } /* = unique id SOAP_TYPE_ns1__abxGroupList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxGroupList() { ns1__abxGroupList::soap_default(NULL); }
	virtual ~ns1__abxGroupList() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxGroup
#define SOAP_TYPE_ns1__abxGroup (63)
/* ns1:abxGroup */
class SOAP_CMAC ns1__abxGroup : public xsd__anyType
{
public:
	char *id;	/* required element of type xsd:string */
	char *name;	/* required element of type xsd:string */
	char *description;	/* required element of type xsd:string */
	ns1__abxUserList *userList;	/* required element of type ns1:abxUserList */
	bool isSystemGroup;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 63; } /* = unique id SOAP_TYPE_ns1__abxGroup */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxGroup() { ns1__abxGroup::soap_default(NULL); }
	virtual ~ns1__abxGroup() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AddExpression
#define SOAP_TYPE_ns1__AddExpression (64)
/* ns1:AddExpression */
class SOAP_CMAC ns1__AddExpression : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	class ns1__abxExpression *expr;	/* optional element of type ns1:abxExpression */
public:
	virtual int soap_type() const { return 64; } /* = unique id SOAP_TYPE_ns1__AddExpression */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AddExpression() { ns1__AddExpression::soap_default(NULL); }
	virtual ~ns1__AddExpression() { }
};
#endif

#ifndef SOAP_TYPE__ns1__abxExpression_returnWrongKeys
#define SOAP_TYPE__ns1__abxExpression_returnWrongKeys (984)
/* ns1:abxExpression-returnWrongKeys */
class SOAP_CMAC _ns1__abxExpression_returnWrongKeys
{
public:
	int __sizekey;	/* sequence of elements <key> */
	char **key;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 984; } /* = unique id SOAP_TYPE__ns1__abxExpression_returnWrongKeys */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__abxExpression_returnWrongKeys() { _ns1__abxExpression_returnWrongKeys::soap_default(NULL); }
	virtual ~_ns1__abxExpression_returnWrongKeys() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxExpression
#define SOAP_TYPE_ns1__abxExpression (65)
/* ns1:abxExpression */
class SOAP_CMAC ns1__abxExpression : public xsd__anyType
{
public:
	char *id;	/* required element of type xsd:string */
	char *instanceName;	/* required element of type xsd:string */
	class ns1__abxTranslation *translationList;	/* required element of type ns1:abxTranslation */
	char *expressionName;	/* required element of type xsd:string */
	char *defaultLanguage;	/* required element of type xsd:string */
	char *defaultExpression;	/* required element of type xsd:string */
	_ns1__abxExpression_returnWrongKeys returnWrongKeys;	/* required element of type ns1:abxExpression-returnWrongKeys */
public:
	virtual int soap_type() const { return 65; } /* = unique id SOAP_TYPE_ns1__abxExpression */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxExpression() { ns1__abxExpression::soap_default(NULL); }
	virtual ~ns1__abxExpression() { }
};
#endif

#ifndef SOAP_TYPE__ns1__abxTranslation_allDescription
#define SOAP_TYPE__ns1__abxTranslation_allDescription (985)
/* ns1:abxTranslation-allDescription */
class SOAP_CMAC _ns1__abxTranslation_allDescription
{
public:
	char *language;	/* required element of type xsd:string */
	char *description;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 985; } /* = unique id SOAP_TYPE__ns1__abxTranslation_allDescription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__abxTranslation_allDescription() { _ns1__abxTranslation_allDescription::soap_default(NULL); }
	virtual ~_ns1__abxTranslation_allDescription() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxTranslation
#define SOAP_TYPE_ns1__abxTranslation (66)
/* ns1:abxTranslation */
class SOAP_CMAC ns1__abxTranslation : public xsd__anyType
{
public:
	char *languageType;	/* required element of type xsd:string */
	char *messageId;	/* required element of type xsd:string */
	int __sizeallDescription;	/* sequence of elements <allDescription> */
	_ns1__abxTranslation_allDescription *allDescription;	/* required element of type ns1:abxTranslation-allDescription */
	char *messageCode;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 66; } /* = unique id SOAP_TYPE_ns1__abxTranslation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxTranslation() { ns1__abxTranslation::soap_default(NULL); }
	virtual ~ns1__abxTranslation() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AddExpressionResponse
#define SOAP_TYPE_ns1__AddExpressionResponse (67)
/* ns1:AddExpressionResponse */
class SOAP_CMAC ns1__AddExpressionResponse : public xsd__anyType
{
public:
	class ns1__abxExpressionResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxExpressionResult */
public:
	virtual int soap_type() const { return 67; } /* = unique id SOAP_TYPE_ns1__AddExpressionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AddExpressionResponse() { ns1__AddExpressionResponse::soap_default(NULL); }
	virtual ~ns1__AddExpressionResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxExpressionResult
#define SOAP_TYPE_ns1__abxExpressionResult (68)
/* ns1:abxExpressionResult */
class SOAP_CMAC ns1__abxExpressionResult : public xsd__anyType
{
public:
	class ns1__abxExpressionList *list;	/* required element of type ns1:abxExpressionList */
	unsigned int result;	/* required element of type xsd:unsignedInt */
public:
	virtual int soap_type() const { return 68; } /* = unique id SOAP_TYPE_ns1__abxExpressionResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxExpressionResult() { ns1__abxExpressionResult::soap_default(NULL); }
	virtual ~ns1__abxExpressionResult() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxExpressionList
#define SOAP_TYPE_ns1__abxExpressionList (69)
/* ns1:abxExpressionList */
class SOAP_CMAC ns1__abxExpressionList : public xsd__anyType
{
public:
	int __sizedataList;	/* sequence of elements <dataList> */
	ns1__abxExpression **dataList;	/* required element of type ns1:abxExpression */
public:
	virtual int soap_type() const { return 69; } /* = unique id SOAP_TYPE_ns1__abxExpressionList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxExpressionList() { ns1__abxExpressionList::soap_default(NULL); }
	virtual ~ns1__abxExpressionList() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AddSign
#define SOAP_TYPE_ns1__AddSign (70)
/* ns1:AddSign */
class SOAP_CMAC ns1__AddSign : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	class ns1__abxWorkflow *aw;	/* optional element of type ns1:abxWorkflow */
public:
	virtual int soap_type() const { return 70; } /* = unique id SOAP_TYPE_ns1__AddSign */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AddSign() { ns1__AddSign::soap_default(NULL); }
	virtual ~ns1__AddSign() { }
};
#endif

#ifndef SOAP_TYPE__ns1__abxWorkflow_processoDefUsers
#define SOAP_TYPE__ns1__abxWorkflow_processoDefUsers (991)
/* ns1:abxWorkflow-processoDefUsers */
class SOAP_CMAC _ns1__abxWorkflow_processoDefUsers
{
public:
	char *idTable;	/* required element of type xsd:string */
	char *idPacchetto;	/* required element of type xsd:string */
	char *idProcesso;	/* required element of type xsd:string */
	char *instanceName;	/* required element of type xsd:string */
	char *nomePacchetto;	/* required element of type xsd:string */
	char *nomeProcesso;	/* required element of type xsd:string */
	char *username;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 991; } /* = unique id SOAP_TYPE__ns1__abxWorkflow_processoDefUsers */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__abxWorkflow_processoDefUsers() { _ns1__abxWorkflow_processoDefUsers::soap_default(NULL); }
	virtual ~_ns1__abxWorkflow_processoDefUsers() { }
};
#endif

#ifndef SOAP_TYPE__ns1__abxWorkflow_signList
#define SOAP_TYPE__ns1__abxWorkflow_signList (993)
/* ns1:abxWorkflow-signList */
class SOAP_CMAC _ns1__abxWorkflow_signList
{
public:
	char *idTable;	/* required element of type xsd:string */
	char *userName;	/* required element of type xsd:string */
	char *instanceName;	/* required element of type xsd:string */
	char *tipologia;	/* required element of type xsd:string */
	char *allineamento;	/* required element of type xsd:string */
	char *marker;	/* required element of type xsd:string */
	int posX;	/* required element of type xsd:int */
	int posY;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 993; } /* = unique id SOAP_TYPE__ns1__abxWorkflow_signList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__abxWorkflow_signList() { _ns1__abxWorkflow_signList::soap_default(NULL); }
	virtual ~_ns1__abxWorkflow_signList() { }
};
#endif

#ifndef SOAP_TYPE__ns1__abxWorkflow_userSettings
#define SOAP_TYPE__ns1__abxWorkflow_userSettings (995)
/* ns1:abxWorkflow-userSettings */
class SOAP_CMAC _ns1__abxWorkflow_userSettings
{
public:
	char *userName;	/* required element of type xsd:string */
	char *instanceName;	/* required element of type xsd:string */
	int __sizeworklistFields;	/* sequence of elements <worklistFields> */
	char **worklistFields;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 995; } /* = unique id SOAP_TYPE__ns1__abxWorkflow_userSettings */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__abxWorkflow_userSettings() { _ns1__abxWorkflow_userSettings::soap_default(NULL); }
	virtual ~_ns1__abxWorkflow_userSettings() { }
};
#endif

#ifndef SOAP_TYPE__ns1__abxWorkflow_variables
#define SOAP_TYPE__ns1__abxWorkflow_variables (997)
/* ns1:abxWorkflow-variables */
class SOAP_CMAC _ns1__abxWorkflow_variables
{
public:
	char *name;	/* required element of type xsd:string */
	char *value;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 997; } /* = unique id SOAP_TYPE__ns1__abxWorkflow_variables */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__abxWorkflow_variables() { _ns1__abxWorkflow_variables::soap_default(NULL); }
	virtual ~_ns1__abxWorkflow_variables() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxWorkflow
#define SOAP_TYPE_ns1__abxWorkflow (71)
/* ns1:abxWorkflow */
class SOAP_CMAC ns1__abxWorkflow : public xsd__anyType
{
public:
	int __sizeprocessoDefUsers;	/* sequence of elements <processoDefUsers> */
	_ns1__abxWorkflow_processoDefUsers *processoDefUsers;	/* required element of type ns1:abxWorkflow-processoDefUsers */
	int __sizesignList;	/* sequence of elements <signList> */
	_ns1__abxWorkflow_signList *signList;	/* required element of type ns1:abxWorkflow-signList */
	int __sizeuserSettings;	/* sequence of elements <userSettings> */
	_ns1__abxWorkflow_userSettings *userSettings;	/* required element of type ns1:abxWorkflow-userSettings */
	int __sizevariables;	/* sequence of elements <variables> */
	_ns1__abxWorkflow_variables *variables;	/* required element of type ns1:abxWorkflow-variables */
public:
	virtual int soap_type() const { return 71; } /* = unique id SOAP_TYPE_ns1__abxWorkflow */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxWorkflow() { ns1__abxWorkflow::soap_default(NULL); }
	virtual ~ns1__abxWorkflow() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AddSignResponse
#define SOAP_TYPE_ns1__AddSignResponse (72)
/* ns1:AddSignResponse */
class SOAP_CMAC ns1__AddSignResponse : public xsd__anyType
{
public:
	class ns1__abxWorkflowResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxWorkflowResult */
public:
	virtual int soap_type() const { return 72; } /* = unique id SOAP_TYPE_ns1__AddSignResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AddSignResponse() { ns1__AddSignResponse::soap_default(NULL); }
	virtual ~ns1__AddSignResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxWorkflowResult
#define SOAP_TYPE_ns1__abxWorkflowResult (73)
/* ns1:abxWorkflowResult */
class SOAP_CMAC ns1__abxWorkflowResult : public xsd__anyType
{
public:
	unsigned int result;	/* required element of type xsd:unsignedInt */
	class ns1__abxWorkflowList *list;	/* required element of type ns1:abxWorkflowList */
public:
	virtual int soap_type() const { return 73; } /* = unique id SOAP_TYPE_ns1__abxWorkflowResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxWorkflowResult() { ns1__abxWorkflowResult::soap_default(NULL); }
	virtual ~ns1__abxWorkflowResult() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxWorkflowList
#define SOAP_TYPE_ns1__abxWorkflowList (74)
/* ns1:abxWorkflowList */
class SOAP_CMAC ns1__abxWorkflowList : public xsd__anyType
{
public:
	int __sizeworkflowList;	/* sequence of elements <workflowList> */
	ns1__abxWorkflow **workflowList;	/* required element of type ns1:abxWorkflow */
public:
	virtual int soap_type() const { return 74; } /* = unique id SOAP_TYPE_ns1__abxWorkflowList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxWorkflowList() { ns1__abxWorkflowList::soap_default(NULL); }
	virtual ~ns1__abxWorkflowList() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetUserDetailByUsername
#define SOAP_TYPE_ns1__GetUserDetailByUsername (75)
/* ns1:GetUserDetailByUsername */
class SOAP_CMAC ns1__GetUserDetailByUsername : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *username;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 75; } /* = unique id SOAP_TYPE_ns1__GetUserDetailByUsername */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetUserDetailByUsername() { ns1__GetUserDetailByUsername::soap_default(NULL); }
	virtual ~ns1__GetUserDetailByUsername() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetUserDetailByUsernameResponse
#define SOAP_TYPE_ns1__GetUserDetailByUsernameResponse (76)
/* ns1:GetUserDetailByUsernameResponse */
class SOAP_CMAC ns1__GetUserDetailByUsernameResponse : public xsd__anyType
{
public:
	ns1__abxUserListResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxUserListResult */
public:
	virtual int soap_type() const { return 76; } /* = unique id SOAP_TYPE_ns1__GetUserDetailByUsernameResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetUserDetailByUsernameResponse() { ns1__GetUserDetailByUsernameResponse::soap_default(NULL); }
	virtual ~ns1__GetUserDetailByUsernameResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__QueryTotAttach
#define SOAP_TYPE_ns1__QueryTotAttach (77)
/* ns1:QueryTotAttach */
class SOAP_CMAC ns1__QueryTotAttach : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	class ns1__abxQexpression *option4query;	/* optional element of type ns1:abxQexpression */
	class ns1__abxProtocolUse *protuse;	/* optional element of type ns1:abxProtocolUse */
public:
	virtual int soap_type() const { return 77; } /* = unique id SOAP_TYPE_ns1__QueryTotAttach */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__QueryTotAttach() { ns1__QueryTotAttach::soap_default(NULL); }
	virtual ~ns1__QueryTotAttach() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxQexpression
#define SOAP_TYPE_ns1__abxQexpression (78)
/* ns1:abxQexpression */
class SOAP_CMAC ns1__abxQexpression : public xsd__anyType
{
public:
	class ns1__abxQnode *expression;	/* required element of type ns1:abxQnode */
	class ns1__abxOption4Query *option4Query;	/* required element of type ns1:abxOption4Query */
	char *queryType;	/* required element of type xsd:string */
	char *queryTypeDetail;	/* required element of type xsd:string */
	char *queryLimit;	/* required element of type xsd:string */
	char *queryOffset;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 78; } /* = unique id SOAP_TYPE_ns1__abxQexpression */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxQexpression() { ns1__abxQexpression::soap_default(NULL); }
	virtual ~ns1__abxQexpression() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxQnode
#define SOAP_TYPE_ns1__abxQnode (79)
/* ns1:abxQnode */
class SOAP_CMAC ns1__abxQnode : public xsd__anyType
{
public:
	char *qOperator;	/* required element of type xsd:string */
	ns1__abxQnode *operandSX;	/* required element of type ns1:abxQnode */
	ns1__abxQnode *operandDX;	/* required element of type ns1:abxQnode */
	class ns1__abxQField *field;	/* required element of type ns1:abxQField */
public:
	virtual int soap_type() const { return 79; } /* = unique id SOAP_TYPE_ns1__abxQnode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxQnode() { ns1__abxQnode::soap_default(NULL); }
	virtual ~ns1__abxQnode() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxQField
#define SOAP_TYPE_ns1__abxQField (80)
/* ns1:abxQField */
class SOAP_CMAC ns1__abxQField : public xsd__anyType
{
public:
	char *fieldName;	/* required element of type xsd:string */
	class ns1__abxField *fieldProperties;	/* required element of type ns1:abxField */
	char *fieldTypeName;	/* required element of type xsd:string */
	char *value;	/* required element of type xsd:string */
	class ns1__abxQFieldRange *range;	/* required element of type ns1:abxQFieldRange */
	char *fOperator;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 80; } /* = unique id SOAP_TYPE_ns1__abxQField */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxQField() { ns1__abxQField::soap_default(NULL); }
	virtual ~ns1__abxQField() { }
};
#endif

#ifndef SOAP_TYPE__ns1__abxField_allDescription
#define SOAP_TYPE__ns1__abxField_allDescription (1009)
/* ns1:abxField-allDescription */
class SOAP_CMAC _ns1__abxField_allDescription
{
public:
	char *language;	/* required element of type xsd:string */
	char *description;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1009; } /* = unique id SOAP_TYPE__ns1__abxField_allDescription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__abxField_allDescription() { _ns1__abxField_allDescription::soap_default(NULL); }
	virtual ~_ns1__abxField_allDescription() { }
};
#endif

#ifndef SOAP_TYPE__ns1__abxField_allOptionDescription
#define SOAP_TYPE__ns1__abxField_allOptionDescription (1011)
/* ns1:abxField-allOptionDescription */
class SOAP_CMAC _ns1__abxField_allOptionDescription
{
public:
	char *language;	/* required element of type xsd:string */
	char *description;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1011; } /* = unique id SOAP_TYPE__ns1__abxField_allOptionDescription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__abxField_allOptionDescription() { _ns1__abxField_allOptionDescription::soap_default(NULL); }
	virtual ~_ns1__abxField_allOptionDescription() { }
};
#endif

#ifndef SOAP_TYPE__ns1__abxField_extended
#define SOAP_TYPE__ns1__abxField_extended (1013)
/* ns1:abxField-extended */
class SOAP_CMAC _ns1__abxField_extended
{
public:
	char *property1;	/* required element of type xsd:string */
	char *property2;	/* required element of type xsd:string */
	char *property3;	/* required element of type xsd:string */
	char *property4;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1013; } /* = unique id SOAP_TYPE__ns1__abxField_extended */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__abxField_extended() { _ns1__abxField_extended::soap_default(NULL); }
	virtual ~_ns1__abxField_extended() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxField
#define SOAP_TYPE_ns1__abxField (81)
/* ns1:abxField */
class SOAP_CMAC ns1__abxField : public xsd__anyType
{
public:
	char *name;	/* required element of type xsd:string */
	char *defaultLanguage;	/* required element of type xsd:string */
	char *Description;	/* required element of type xsd:string */
	int __sizeallDescription;	/* sequence of elements <allDescription> */
	_ns1__abxField_allDescription *allDescription;	/* required element of type ns1:abxField-allDescription */
	char *type;	/* required element of type xsd:string */
	char *lenght;	/* required element of type xsd:string */
	char *precision;	/* required element of type xsd:string */
	char *option;	/* required element of type xsd:string */
	char *OptionDescription;	/* required element of type xsd:string */
	int __sizeallOptionDescription;	/* sequence of elements <allOptionDescription> */
	_ns1__abxField_allOptionDescription *allOptionDescription;	/* required element of type ns1:abxField-allOptionDescription */
	int __sizeextended;	/* sequence of elements <extended> */
	_ns1__abxField_extended *extended;	/* required element of type ns1:abxField-extended */
	bool obbligatorio;	/* required element of type xsd:boolean */
	bool nascosto;	/* required element of type xsd:boolean */
	bool univoco;	/* required element of type xsd:boolean */
	bool filter;	/* required element of type xsd:boolean */
	bool filterinterval;	/* required element of type xsd:boolean */
	bool vistaview;	/* required element of type xsd:boolean */
	bool showInWorkList;	/* required element of type xsd:boolean */
	unsigned int displayindex;	/* required element of type xsd:unsignedInt */
	ns1__abxPermission *permission;	/* required element of type ns1:abxPermission */
public:
	virtual int soap_type() const { return 81; } /* = unique id SOAP_TYPE_ns1__abxField */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxField() { ns1__abxField::soap_default(NULL); }
	virtual ~ns1__abxField() { }
};
#endif

#ifndef SOAP_TYPE__ns1__abxPermission_list
#define SOAP_TYPE__ns1__abxPermission_list (1015)
/* ns1:abxPermission-list */
class SOAP_CMAC _ns1__abxPermission_list
{
public:
	char *actionName;	/* required element of type xsd:string */
	bool value;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 1015; } /* = unique id SOAP_TYPE__ns1__abxPermission_list */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__abxPermission_list() { _ns1__abxPermission_list::soap_default(NULL); }
	virtual ~_ns1__abxPermission_list() { }
};
#endif

#ifndef SOAP_TYPE__ns1__abxPermission_editPermission
#define SOAP_TYPE__ns1__abxPermission_editPermission (1018)
/* ns1:abxPermission-editPermission */
class SOAP_CMAC _ns1__abxPermission_editPermission
{
public:
	char *editUserName;	/* required element of type xsd:string */
	char *editCode;	/* required element of type xsd:string */
	time_t editTimeStamp;	/* required element of type xsd:dateTime */
	class ns1__abxEditPermissionList *permissionSettings;	/* required element of type ns1:abxEditPermissionList */
public:
	virtual int soap_type() const { return 1018; } /* = unique id SOAP_TYPE__ns1__abxPermission_editPermission */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__abxPermission_editPermission() { _ns1__abxPermission_editPermission::soap_default(NULL); }
	virtual ~_ns1__abxPermission_editPermission() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxPermission
#define SOAP_TYPE_ns1__abxPermission (82)
/* ns1:abxPermission */
class SOAP_CMAC ns1__abxPermission : public xsd__anyType
{
public:
	int __sizelist;	/* sequence of elements <list> */
	_ns1__abxPermission_list *list;	/* required element of type ns1:abxPermission-list */
	class ns1__abxObjAction *defaultObjActionList;	/* required element of type ns1:abxObjAction */
	_ns1__abxPermission_editPermission editPermission;	/* required element of type ns1:abxPermission-editPermission */
public:
	virtual int soap_type() const { return 82; } /* = unique id SOAP_TYPE_ns1__abxPermission */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxPermission() { ns1__abxPermission::soap_default(NULL); }
	virtual ~ns1__abxPermission() { }
};
#endif

#ifndef SOAP_TYPE__ns1__abxObjAction_list
#define SOAP_TYPE__ns1__abxObjAction_list (1020)
/* ns1:abxObjAction-list */
class SOAP_CMAC _ns1__abxObjAction_list
{
public:
	char *objName;	/* required element of type xsd:string */
	char *actionName;	/* required element of type xsd:string */
	char *positionId;	/* required element of type xsd:string */
	char *value;	/* required element of type xsd:string */
	bool action_USCOREin_USCOREtree;	/* required element of type xsd:boolean */
	ns1__abxTranslation *actionDescription;	/* required element of type ns1:abxTranslation */
	char *defaultDescription;	/* required element of type xsd:string */
	char *defaultLanguage;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1020; } /* = unique id SOAP_TYPE__ns1__abxObjAction_list */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__abxObjAction_list() { _ns1__abxObjAction_list::soap_default(NULL); }
	virtual ~_ns1__abxObjAction_list() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxObjAction
#define SOAP_TYPE_ns1__abxObjAction (83)
/* ns1:abxObjAction */
class SOAP_CMAC ns1__abxObjAction : public xsd__anyType
{
public:
	int __sizelist;	/* sequence of elements <list> */
	_ns1__abxObjAction_list *list;	/* required element of type ns1:abxObjAction-list */
	xsd__anyType *xxx;	/* required element of type xsd:anyType */
public:
	virtual int soap_type() const { return 83; } /* = unique id SOAP_TYPE_ns1__abxObjAction */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxObjAction() { ns1__abxObjAction::soap_default(NULL); }
	virtual ~ns1__abxObjAction() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxEditPermissionList
#define SOAP_TYPE_ns1__abxEditPermissionList (84)
/* ns1:abxEditPermissionList */
class SOAP_CMAC ns1__abxEditPermissionList : public xsd__anyType
{
public:
	int __sizelist;	/* sequence of elements <list> */
	class ns1__abxEditPermission **list;	/* required element of type ns1:abxEditPermission */
public:
	virtual int soap_type() const { return 84; } /* = unique id SOAP_TYPE_ns1__abxEditPermissionList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxEditPermissionList() { ns1__abxEditPermissionList::soap_default(NULL); }
	virtual ~ns1__abxEditPermissionList() { }
};
#endif

#ifndef SOAP_TYPE__ns1__abxEditPermission_permissionSingleList
#define SOAP_TYPE__ns1__abxEditPermission_permissionSingleList (1025)
/* ns1:abxEditPermission-permissionSingleList */
class SOAP_CMAC _ns1__abxEditPermission_permissionSingleList
{
public:
	char *positionId;	/* required element of type xsd:string */
	char *value;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1025; } /* = unique id SOAP_TYPE__ns1__abxEditPermission_permissionSingleList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__abxEditPermission_permissionSingleList() { _ns1__abxEditPermission_permissionSingleList::soap_default(NULL); }
	virtual ~_ns1__abxEditPermission_permissionSingleList() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxEditPermission
#define SOAP_TYPE_ns1__abxEditPermission (85)
/* ns1:abxEditPermission */
class SOAP_CMAC ns1__abxEditPermission : public xsd__anyType
{
public:
	char *sessionId;	/* required element of type xsd:string */
	char *instanceName;	/* required element of type xsd:string */
	char *userName;	/* required element of type xsd:string */
	char *groupName;	/* required element of type xsd:string */
	char *spread;	/* required element of type xsd:string */
	char *permission;	/* required element of type xsd:string */
	char *dataId;	/* required element of type xsd:string */
	char *dataAttachmentId;	/* required element of type xsd:string */
	int __sizepermissionSingleList;	/* sequence of elements <permissionSingleList> */
	_ns1__abxEditPermission_permissionSingleList *permissionSingleList;	/* required element of type ns1:abxEditPermission-permissionSingleList */
	char *todelete;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 85; } /* = unique id SOAP_TYPE_ns1__abxEditPermission */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxEditPermission() { ns1__abxEditPermission::soap_default(NULL); }
	virtual ~ns1__abxEditPermission() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxQFieldRange
#define SOAP_TYPE_ns1__abxQFieldRange (86)
/* ns1:abxQFieldRange */
class SOAP_CMAC ns1__abxQFieldRange : public xsd__anyType
{
public:
	char *fromValue;	/* required element of type xsd:string */
	char *toValue;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 86; } /* = unique id SOAP_TYPE_ns1__abxQFieldRange */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxQFieldRange() { ns1__abxQFieldRange::soap_default(NULL); }
	virtual ~ns1__abxQFieldRange() { }
};
#endif

#ifndef SOAP_TYPE__ns1__abxOption4Query_fieldList
#define SOAP_TYPE__ns1__abxOption4Query_fieldList (1027)
/* ns1:abxOption4Query-fieldList */
class SOAP_CMAC _ns1__abxOption4Query_fieldList
{
public:
	char *fieldName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1027; } /* = unique id SOAP_TYPE__ns1__abxOption4Query_fieldList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__abxOption4Query_fieldList() { _ns1__abxOption4Query_fieldList::soap_default(NULL); }
	virtual ~_ns1__abxOption4Query_fieldList() { }
};
#endif

#ifndef SOAP_TYPE__ns1__abxOption4Query_sortFieldList
#define SOAP_TYPE__ns1__abxOption4Query_sortFieldList (1029)
/* ns1:abxOption4Query-sortFieldList */
class SOAP_CMAC _ns1__abxOption4Query_sortFieldList
{
public:
	char *fieldName;	/* required element of type xsd:string */
	bool isDataId;	/* required element of type xsd:boolean */
	char *sortOrder;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1029; } /* = unique id SOAP_TYPE__ns1__abxOption4Query_sortFieldList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__abxOption4Query_sortFieldList() { _ns1__abxOption4Query_sortFieldList::soap_default(NULL); }
	virtual ~_ns1__abxOption4Query_sortFieldList() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxOption4Query
#define SOAP_TYPE_ns1__abxOption4Query (87)
/* ns1:abxOption4Query */
class SOAP_CMAC ns1__abxOption4Query : public xsd__anyType
{
public:
	char *rootContainerName;	/* required element of type xsd:string */
	unsigned int deepLevel;	/* required element of type xsd:unsignedInt */
	int __sizefieldList;	/* sequence of elements <fieldList> */
	_ns1__abxOption4Query_fieldList *fieldList;	/* required element of type ns1:abxOption4Query-fieldList */
	char *selectOption;	/* required element of type xsd:string */
	char *masterID;	/* required element of type xsd:string */
	int __sizesortFieldList;	/* sequence of elements <sortFieldList> */
	_ns1__abxOption4Query_sortFieldList *sortFieldList;	/* optional element of type ns1:abxOption4Query-sortFieldList */
public:
	virtual int soap_type() const { return 87; } /* = unique id SOAP_TYPE_ns1__abxOption4Query */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxOption4Query() { ns1__abxOption4Query::soap_default(NULL); }
	virtual ~ns1__abxOption4Query() { }
};
#endif

#ifndef SOAP_TYPE__ns1__abxProtocolUse_filters
#define SOAP_TYPE__ns1__abxProtocolUse_filters (1031)
/* ns1:abxProtocolUse-filters */
class SOAP_CMAC _ns1__abxProtocolUse_filters
{
public:
	char *serverId;	/* required element of type xsd:string */
	char *dateFrom;	/* required element of type xsd:string */
	char *dateTo;	/* required element of type xsd:string */
	char *numberFrom;	/* required element of type xsd:string */
	char *numberTo;	/* required element of type xsd:string */
	char *protocolId;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1031; } /* = unique id SOAP_TYPE__ns1__abxProtocolUse_filters */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__abxProtocolUse_filters() { _ns1__abxProtocolUse_filters::soap_default(NULL); }
	virtual ~_ns1__abxProtocolUse_filters() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxProtocolUse
#define SOAP_TYPE_ns1__abxProtocolUse (88)
/* ns1:abxProtocolUse */
class SOAP_CMAC ns1__abxProtocolUse : public xsd__anyType
{
public:
	char *serverId;	/* required element of type xsd:string */
	char *protocolId;	/* required element of type xsd:string */
	char *protocolName;	/* required element of type xsd:string */
	char *date;	/* required element of type xsd:string */
	char *number;	/* required element of type xsd:string */
	char *resultFormatted;	/* required element of type xsd:string */
	int __sizefilters;	/* sequence of elements <filters> */
	_ns1__abxProtocolUse_filters *filters;	/* required element of type ns1:abxProtocolUse-filters */
public:
	virtual int soap_type() const { return 88; } /* = unique id SOAP_TYPE_ns1__abxProtocolUse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxProtocolUse() { ns1__abxProtocolUse::soap_default(NULL); }
	virtual ~ns1__abxProtocolUse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__QueryTotAttachResponse
#define SOAP_TYPE_ns1__QueryTotAttachResponse (89)
/* ns1:QueryTotAttachResponse */
class SOAP_CMAC ns1__QueryTotAttachResponse : public xsd__anyType
{
public:
	class ns1__abxRetQueryResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxRetQueryResult */
public:
	virtual int soap_type() const { return 89; } /* = unique id SOAP_TYPE_ns1__QueryTotAttachResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__QueryTotAttachResponse() { ns1__QueryTotAttachResponse::soap_default(NULL); }
	virtual ~ns1__QueryTotAttachResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxRetQueryResult
#define SOAP_TYPE_ns1__abxRetQueryResult (90)
/* ns1:abxRetQueryResult */
class SOAP_CMAC ns1__abxRetQueryResult : public xsd__anyType
{
public:
	unsigned int result;	/* required element of type xsd:unsignedInt */
	ns1__abxQexpression *submittedQuery;	/* required element of type ns1:abxQexpression */
	class ns1__abxResultsList *queryResults;	/* required element of type ns1:abxResultsList */
	unsigned int queryTotalFound;	/* required element of type xsd:unsignedInt */
public:
	virtual int soap_type() const { return 90; } /* = unique id SOAP_TYPE_ns1__abxRetQueryResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxRetQueryResult() { ns1__abxRetQueryResult::soap_default(NULL); }
	virtual ~ns1__abxRetQueryResult() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxResultsList
#define SOAP_TYPE_ns1__abxResultsList (91)
/* ns1:abxResultsList */
class SOAP_CMAC ns1__abxResultsList : public xsd__anyType
{
public:
	int __sizeresults;	/* sequence of elements <results> */
	class ns1__abxResults **results;	/* required element of type ns1:abxResults */
public:
	virtual int soap_type() const { return 91; } /* = unique id SOAP_TYPE_ns1__abxResultsList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxResultsList() { ns1__abxResultsList::soap_default(NULL); }
	virtual ~ns1__abxResultsList() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxResults
#define SOAP_TYPE_ns1__abxResults (92)
/* ns1:abxResults */
class SOAP_CMAC ns1__abxResults : public xsd__anyType
{
public:
	class ns1__abxQcHeadList *headColumn;	/* required element of type ns1:abxQcHeadList */
	class ns1__abxQrowList *matrix;	/* required element of type ns1:abxQrowList */
	char *containerName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 92; } /* = unique id SOAP_TYPE_ns1__abxResults */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxResults() { ns1__abxResults::soap_default(NULL); }
	virtual ~ns1__abxResults() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxQcHeadList
#define SOAP_TYPE_ns1__abxQcHeadList (93)
/* ns1:abxQcHeadList */
class SOAP_CMAC ns1__abxQcHeadList : public xsd__anyType
{
public:
	int __sizelist;	/* sequence of elements <list> */
	class ns1__abxQcHead **list;	/* required element of type ns1:abxQcHead */
public:
	virtual int soap_type() const { return 93; } /* = unique id SOAP_TYPE_ns1__abxQcHeadList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxQcHeadList() { ns1__abxQcHeadList::soap_default(NULL); }
	virtual ~ns1__abxQcHeadList() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxQcHead
#define SOAP_TYPE_ns1__abxQcHead (94)
/* ns1:abxQcHead */
class SOAP_CMAC ns1__abxQcHead : public xsd__anyType
{
public:
	ns1__abxField *field;	/* required element of type ns1:abxField */
public:
	virtual int soap_type() const { return 94; } /* = unique id SOAP_TYPE_ns1__abxQcHead */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxQcHead() { ns1__abxQcHead::soap_default(NULL); }
	virtual ~ns1__abxQcHead() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxQrowList
#define SOAP_TYPE_ns1__abxQrowList (95)
/* ns1:abxQrowList */
class SOAP_CMAC ns1__abxQrowList : public xsd__anyType
{
public:
	int __sizel;	/* sequence of elements <l> */
	class ns1__abxQrow **l;	/* required element of type ns1:abxQrow */
public:
	virtual int soap_type() const { return 95; } /* = unique id SOAP_TYPE_ns1__abxQrowList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxQrowList() { ns1__abxQrowList::soap_default(NULL); }
	virtual ~ns1__abxQrowList() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxQrow
#define SOAP_TYPE_ns1__abxQrow (96)
/* ns1:abxQrow */
class SOAP_CMAC ns1__abxQrow : public xsd__anyType
{
public:
	ns1__abxPermission *rP;	/* required element of type ns1:abxPermission */
	int __sizec;	/* sequence of elements <c> */
	char **c;	/* required element of type xsd:string */
	char *DataID;	/* required element of type xsd:string */
	char *totAttach;	/* required element of type xsd:string */
	ns1__abxProtocolUse *protocol;	/* required element of type ns1:abxProtocolUse */
public:
	virtual int soap_type() const { return 96; } /* = unique id SOAP_TYPE_ns1__abxQrow */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxQrow() { ns1__abxQrow::soap_default(NULL); }
	virtual ~ns1__abxQrow() { }
};
#endif

#ifndef SOAP_TYPE_ns1__canModifyRaccoglitore
#define SOAP_TYPE_ns1__canModifyRaccoglitore (97)
/* ns1:canModifyRaccoglitore */
class SOAP_CMAC ns1__canModifyRaccoglitore : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *TemplateName;	/* optional element of type xsd:string */
	char *ContainerName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 97; } /* = unique id SOAP_TYPE_ns1__canModifyRaccoglitore */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__canModifyRaccoglitore() { ns1__canModifyRaccoglitore::soap_default(NULL); }
	virtual ~ns1__canModifyRaccoglitore() { }
};
#endif

#ifndef SOAP_TYPE_ns1__canModifyRaccoglitoreResponse
#define SOAP_TYPE_ns1__canModifyRaccoglitoreResponse (98)
/* ns1:canModifyRaccoglitoreResponse */
class SOAP_CMAC ns1__canModifyRaccoglitoreResponse : public xsd__anyType
{
public:
	ns4__abxCan *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns4:abxCan */
public:
	virtual int soap_type() const { return 98; } /* = unique id SOAP_TYPE_ns1__canModifyRaccoglitoreResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__canModifyRaccoglitoreResponse() { ns1__canModifyRaccoglitoreResponse::soap_default(NULL); }
	virtual ~ns1__canModifyRaccoglitoreResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetFileListByCode
#define SOAP_TYPE_ns1__GetFileListByCode (99)
/* ns1:GetFileListByCode */
class SOAP_CMAC ns1__GetFileListByCode : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
	char *fileCode;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 99; } /* = unique id SOAP_TYPE_ns1__GetFileListByCode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetFileListByCode() { ns1__GetFileListByCode::soap_default(NULL); }
	virtual ~ns1__GetFileListByCode() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetFileListByCodeResponse
#define SOAP_TYPE_ns1__GetFileListByCodeResponse (100)
/* ns1:GetFileListByCodeResponse */
class SOAP_CMAC ns1__GetFileListByCodeResponse : public xsd__anyType
{
public:
	class ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 100; } /* = unique id SOAP_TYPE_ns1__GetFileListByCodeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetFileListByCodeResponse() { ns1__GetFileListByCodeResponse::soap_default(NULL); }
	virtual ~ns1__GetFileListByCodeResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxFileResult
#define SOAP_TYPE_ns1__abxFileResult (101)
/* ns1:abxFileResult */
class SOAP_CMAC ns1__abxFileResult : public xsd__anyType
{
public:
	unsigned int result;	/* required element of type xsd:unsignedInt */
	class ns1__abxFileList *list;	/* required element of type ns1:abxFileList */
	char *optionalMessage;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 101; } /* = unique id SOAP_TYPE_ns1__abxFileResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxFileResult() { ns1__abxFileResult::soap_default(NULL); }
	virtual ~ns1__abxFileResult() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxFileList
#define SOAP_TYPE_ns1__abxFileList (102)
/* ns1:abxFileList */
class SOAP_CMAC ns1__abxFileList : public xsd__anyType
{
public:
	int __sizedataList;	/* sequence of elements <dataList> */
	class ns1__abxFile **dataList;	/* required element of type ns1:abxFile */
public:
	virtual int soap_type() const { return 102; } /* = unique id SOAP_TYPE_ns1__abxFileList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxFileList() { ns1__abxFileList::soap_default(NULL); }
	virtual ~ns1__abxFileList() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxFile
#define SOAP_TYPE_ns1__abxFile (103)
/* ns1:abxFile */
class SOAP_CMAC ns1__abxFile : public xsd__anyType
{
public:
	char *attachmentId;	/* required element of type xsd:string */
	char *dataId;	/* required element of type xsd:string */
	bool isLastRevision;	/* required element of type xsd:boolean */
	char *revisionId;	/* required element of type xsd:string */
	char *filesize;	/* required element of type xsd:string */
	char *filename;	/* required element of type xsd:string */
	char *defaultLanguage;	/* required element of type xsd:string */
	char *description;	/* required element of type xsd:string */
	time_t timestamp;	/* required element of type xsd:dateTime */
	char *hash;	/* required element of type xsd:string */
	char *hashType;	/* required element of type xsd:string */
	char *containerId;	/* required element of type xsd:string */
	int __sizedownloadData;	/* sequence of elements <downloadData> */
	class ns1__downloadData **downloadData;	/* required element of type ns1:downloadData */
	int __sizeuploadData;	/* sequence of elements <uploadData> */
	class ns1__uploadData **uploadData;	/* required element of type ns1:uploadData */
	ns1__abxTranslation *translationList;	/* required element of type ns1:abxTranslation */
	char *fileUniqueCode;	/* required element of type xsd:string */
	char *previousFileUniqueCode;	/* optional element of type xsd:string */
	char *filepath;	/* required element of type xsd:string */
	char *filenameSaved;	/* required element of type xsd:string */
	int numDownload;	/* required element of type xsd:int */
	char *templateNameID;	/* required element of type xsd:string */
	class ns1__abxAllPermission *allPermission;	/* required element of type ns1:abxAllPermission */
	char *username;	/* required element of type xsd:string */
	char *codeGroupVersion;	/* required element of type xsd:string */
	xsd__base64Binary enabled;	/* required element of type xsd:base64Binary */
	char *signatureOwner;	/* required element of type xsd:string */
	time_t signatureTimestamp;	/* required element of type xsd:dateTime */
	int __sizelinkedFiles;	/* sequence of elements <linkedFiles> */
	ns1__abxFile **linkedFiles;	/* optional element of type ns1:abxFile */
public:
	virtual int soap_type() const { return 103; } /* = unique id SOAP_TYPE_ns1__abxFile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxFile() { ns1__abxFile::soap_default(NULL); }
	virtual ~ns1__abxFile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__downloadData
#define SOAP_TYPE_ns1__downloadData (104)
/* ns1:downloadData */
class SOAP_CMAC ns1__downloadData : public xsd__anyType
{
public:
	char *downloadDimTot;	/* required element of type xsd:string */
	char *byteSent;	/* required element of type xsd:string */
	char *filenameSaved;	/* required element of type xsd:string */
	char *dataId;	/* required element of type xsd:string */
	char *instanceId;	/* required element of type xsd:string */
	char *dbName;	/* required element of type xsd:string */
	char *codeFile;	/* required element of type xsd:string */
	xsd__base64Binary byteReady;	/* required element of type xsd:base64Binary */
	char *codeDownload;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 104; } /* = unique id SOAP_TYPE_ns1__downloadData */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__downloadData() { ns1__downloadData::soap_default(NULL); }
	virtual ~ns1__downloadData() { }
};
#endif

#ifndef SOAP_TYPE_ns1__uploadData
#define SOAP_TYPE_ns1__uploadData (105)
/* ns1:uploadData */
class SOAP_CMAC ns1__uploadData : public xsd__anyType
{
public:
	char *hash;	/* required element of type xsd:string */
	char *hashTypeId;	/* required element of type xsd:string */
	char *securityLevel;	/* required element of type xsd:string */
	time_t timestamp;	/* required element of type xsd:dateTime */
	char *uploadDimChunk;	/* required element of type xsd:string */
	char *codeFile;	/* required element of type xsd:string */
	char *filename;	/* required element of type xsd:string */
	char *filepath;	/* required element of type xsd:string */
	char *dimFile;	/* required element of type xsd:string */
	char *byteReceived;	/* required element of type xsd:string */
	char *filenameSaved;	/* required element of type xsd:string */
	char *dataId;	/* required element of type xsd:string */
	char *instanceId;	/* required element of type xsd:string */
	char *dbName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 105; } /* = unique id SOAP_TYPE_ns1__uploadData */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__uploadData() { ns1__uploadData::soap_default(NULL); }
	virtual ~ns1__uploadData() { }
};
#endif

#ifndef SOAP_TYPE__ns1__abxAllPermission_list
#define SOAP_TYPE__ns1__abxAllPermission_list (1053)
/* ns1:abxAllPermission-list */
class SOAP_CMAC _ns1__abxAllPermission_list
{
public:
	char *username;	/* required element of type xsd:string */
	char *instanceName;	/* required element of type xsd:string */
	char *inheritedInstanceName;	/* required element of type xsd:string */
	char *groupName;	/* required element of type xsd:string */
	char *orderId;	/* required element of type xsd:string */
	char *inherited;	/* required element of type xsd:string */
	char *spread;	/* required element of type xsd:string */
	char *permissionDef;	/* required element of type xsd:string */
	ns1__abxObjAction *objActionList;	/* required element of type ns1:abxObjAction */
	char *objName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1053; } /* = unique id SOAP_TYPE__ns1__abxAllPermission_list */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__abxAllPermission_list() { _ns1__abxAllPermission_list::soap_default(NULL); }
	virtual ~_ns1__abxAllPermission_list() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxAllPermission
#define SOAP_TYPE_ns1__abxAllPermission (106)
/* ns1:abxAllPermission */
class SOAP_CMAC ns1__abxAllPermission : public xsd__anyType
{
public:
	int __sizelist;	/* sequence of elements <list> */
	_ns1__abxAllPermission_list *list;	/* required element of type ns1:abxAllPermission-list */
public:
	virtual int soap_type() const { return 106; } /* = unique id SOAP_TYPE_ns1__abxAllPermission */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxAllPermission() { ns1__abxAllPermission::soap_default(NULL); }
	virtual ~ns1__abxAllPermission() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DestroyRaccoglitore
#define SOAP_TYPE_ns1__DestroyRaccoglitore (107)
/* ns1:DestroyRaccoglitore */
class SOAP_CMAC ns1__DestroyRaccoglitore : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *ContainerName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 107; } /* = unique id SOAP_TYPE_ns1__DestroyRaccoglitore */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DestroyRaccoglitore() { ns1__DestroyRaccoglitore::soap_default(NULL); }
	virtual ~ns1__DestroyRaccoglitore() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DestroyRaccoglitoreResponse
#define SOAP_TYPE_ns1__DestroyRaccoglitoreResponse (108)
/* ns1:DestroyRaccoglitoreResponse */
class SOAP_CMAC ns1__DestroyRaccoglitoreResponse : public xsd__anyType
{
public:
	class ns1__abxRaccoglitoreResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxRaccoglitoreResult */
public:
	virtual int soap_type() const { return 108; } /* = unique id SOAP_TYPE_ns1__DestroyRaccoglitoreResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DestroyRaccoglitoreResponse() { ns1__DestroyRaccoglitoreResponse::soap_default(NULL); }
	virtual ~ns1__DestroyRaccoglitoreResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxRaccoglitoreResult
#define SOAP_TYPE_ns1__abxRaccoglitoreResult (109)
/* ns1:abxRaccoglitoreResult */
class SOAP_CMAC ns1__abxRaccoglitoreResult : public xsd__anyType
{
public:
	unsigned int result;	/* required element of type xsd:unsignedInt */
	class ns1__abxTemplateList *template_;	/* required element of type ns1:abxTemplateList */
	class ns1__abxContainerList *container;	/* required element of type ns1:abxContainerList */
	ns3__abxDynamicorgRuleList *dynorg;	/* required element of type ns3:abxDynamicorgRuleList */
public:
	virtual int soap_type() const { return 109; } /* = unique id SOAP_TYPE_ns1__abxRaccoglitoreResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxRaccoglitoreResult() { ns1__abxRaccoglitoreResult::soap_default(NULL); }
	virtual ~ns1__abxRaccoglitoreResult() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxTemplateList
#define SOAP_TYPE_ns1__abxTemplateList (110)
/* ns1:abxTemplateList */
class SOAP_CMAC ns1__abxTemplateList : public xsd__anyType
{
public:
	int __sizetemplate_;	/* sequence of elements <template> */
	class ns1__abxTemplate **template_;	/* required element of type ns1:abxTemplate */
public:
	virtual int soap_type() const { return 110; } /* = unique id SOAP_TYPE_ns1__abxTemplateList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxTemplateList() { ns1__abxTemplateList::soap_default(NULL); }
	virtual ~ns1__abxTemplateList() { }
};
#endif

#ifndef SOAP_TYPE__ns1__abxTemplate_allDescription
#define SOAP_TYPE__ns1__abxTemplate_allDescription (1060)
/* ns1:abxTemplate-allDescription */
class SOAP_CMAC _ns1__abxTemplate_allDescription
{
public:
	char *language;	/* required element of type xsd:string */
	char *description;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1060; } /* = unique id SOAP_TYPE__ns1__abxTemplate_allDescription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__abxTemplate_allDescription() { _ns1__abxTemplate_allDescription::soap_default(NULL); }
	virtual ~_ns1__abxTemplate_allDescription() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxTemplate
#define SOAP_TYPE_ns1__abxTemplate (111)
/* ns1:abxTemplate */
class SOAP_CMAC ns1__abxTemplate : public xsd__anyType
{
public:
	char *name;	/* required element of type xsd:string */
	char *defaultLanguage;	/* required element of type xsd:string */
	char *Description;	/* required element of type xsd:string */
	int __sizeallDescription;	/* sequence of elements <allDescription> */
	_ns1__abxTemplate_allDescription *allDescription;	/* required element of type ns1:abxTemplate-allDescription */
	char *joinWithType;	/* required element of type xsd:string */
	class ns1__abxFieldList *fields;	/* required element of type ns1:abxFieldList */
	char *joinWithName;	/* required element of type xsd:string */
	bool revisionEnabled;	/* required element of type xsd:boolean */
	char *collation;	/* required element of type xsd:string */
	ns1__abxExpressionList *expression;	/* required element of type ns1:abxExpressionList */
	char *barcodePrefix;	/* required element of type xsd:string */
	bool enableProtocol;	/* required element of type xsd:boolean */
	ns1__abxPermission *permission;	/* required element of type ns1:abxPermission */
	char *objName;	/* required element of type xsd:string */
	bool dynorgEnabled;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 111; } /* = unique id SOAP_TYPE_ns1__abxTemplate */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxTemplate() { ns1__abxTemplate::soap_default(NULL); }
	virtual ~ns1__abxTemplate() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxFieldList
#define SOAP_TYPE_ns1__abxFieldList (112)
/* ns1:abxFieldList */
class SOAP_CMAC ns1__abxFieldList : public xsd__anyType
{
public:
	int __sizefield;	/* sequence of elements <field> */
	ns1__abxField **field;	/* required element of type ns1:abxField */
public:
	virtual int soap_type() const { return 112; } /* = unique id SOAP_TYPE_ns1__abxFieldList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxFieldList() { ns1__abxFieldList::soap_default(NULL); }
	virtual ~ns1__abxFieldList() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxContainerList
#define SOAP_TYPE_ns1__abxContainerList (113)
/* ns1:abxContainerList */
class SOAP_CMAC ns1__abxContainerList : public xsd__anyType
{
public:
	int __sizecontainer;	/* sequence of elements <container> */
	class ns1__abxContainer **container;	/* required element of type ns1:abxContainer */
public:
	virtual int soap_type() const { return 113; } /* = unique id SOAP_TYPE_ns1__abxContainerList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxContainerList() { ns1__abxContainerList::soap_default(NULL); }
	virtual ~ns1__abxContainerList() { }
};
#endif

#ifndef SOAP_TYPE__ns1__abxContainer_allDescription
#define SOAP_TYPE__ns1__abxContainer_allDescription (1066)
/* ns1:abxContainer-allDescription */
class SOAP_CMAC _ns1__abxContainer_allDescription
{
public:
	char *language;	/* required element of type xsd:string */
	char *description;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1066; } /* = unique id SOAP_TYPE__ns1__abxContainer_allDescription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__abxContainer_allDescription() { _ns1__abxContainer_allDescription::soap_default(NULL); }
	virtual ~_ns1__abxContainer_allDescription() { }
};
#endif

#ifndef SOAP_TYPE__ns1__abxContainer_parentDataID
#define SOAP_TYPE__ns1__abxContainer_parentDataID (1068)
/* ns1:abxContainer-parentDataID */
class SOAP_CMAC _ns1__abxContainer_parentDataID
{
public:
	char *container_USCOREInstanceName;	/* required element of type xsd:string */
	char *hexDataID;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1068; } /* = unique id SOAP_TYPE__ns1__abxContainer_parentDataID */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__abxContainer_parentDataID() { _ns1__abxContainer_parentDataID::soap_default(NULL); }
	virtual ~_ns1__abxContainer_parentDataID() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxContainer
#define SOAP_TYPE_ns1__abxContainer (114)
/* ns1:abxContainer */
class SOAP_CMAC ns1__abxContainer : public xsd__anyType
{
public:
	char *name;	/* required element of type xsd:string */
	char *defaultLanguage;	/* required element of type xsd:string */
	char *Description;	/* required element of type xsd:string */
	int __sizeallDescription;	/* sequence of elements <allDescription> */
	_ns1__abxContainer_allDescription *allDescription;	/* required element of type ns1:abxContainer-allDescription */
	bool revisionEnabled;	/* required element of type xsd:boolean */
	char *objName;	/* required element of type xsd:string */
	char *parentContainerName;	/* required element of type xsd:string */
	char *templateName;	/* required element of type xsd:string */
	_ns1__abxContainer_parentDataID parentDataID;	/* required element of type ns1:abxContainer-parentDataID */
	bool hideContainer;	/* required element of type xsd:boolean */
	char *colorDisplay;	/* required element of type xsd:string */
	bool fileAutoOverwrite;	/* required element of type xsd:boolean */
	ns1__abxPermission *permission;	/* required element of type ns1:abxPermission */
	class ns1__abxMasterDetail *masterDetail;	/* required element of type ns1:abxMasterDetail */
	bool protocolEnabled;	/* required element of type xsd:boolean */
	bool previewEnabled;	/* required element of type xsd:boolean */
	bool downloadNumEnabled;	/* required element of type xsd:boolean */
	char *downloadNumber;	/* required element of type xsd:string */
	char *defaultProtocolId;	/* required element of type xsd:string */
	bool WFProcDefEnabled;	/* required element of type xsd:boolean */
	bool WFProcDefUserEnabled;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 114; } /* = unique id SOAP_TYPE_ns1__abxContainer */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxContainer() { ns1__abxContainer::soap_default(NULL); }
	virtual ~ns1__abxContainer() { }
};
#endif

#ifndef SOAP_TYPE__ns1__abxMasterDetail_masterList
#define SOAP_TYPE__ns1__abxMasterDetail_masterList (1070)
/* ns1:abxMasterDetail-masterList */
class SOAP_CMAC _ns1__abxMasterDetail_masterList
{
public:
	char *name;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1070; } /* = unique id SOAP_TYPE__ns1__abxMasterDetail_masterList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__abxMasterDetail_masterList() { _ns1__abxMasterDetail_masterList::soap_default(NULL); }
	virtual ~_ns1__abxMasterDetail_masterList() { }
};
#endif

#ifndef SOAP_TYPE__ns1__abxMasterDetail_detailList
#define SOAP_TYPE__ns1__abxMasterDetail_detailList (1072)
/* ns1:abxMasterDetail-detailList */
class SOAP_CMAC _ns1__abxMasterDetail_detailList
{
public:
	char *name;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1072; } /* = unique id SOAP_TYPE__ns1__abxMasterDetail_detailList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__abxMasterDetail_detailList() { _ns1__abxMasterDetail_detailList::soap_default(NULL); }
	virtual ~_ns1__abxMasterDetail_detailList() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxMasterDetail
#define SOAP_TYPE_ns1__abxMasterDetail (115)
/* ns1:abxMasterDetail */
class SOAP_CMAC ns1__abxMasterDetail : public xsd__anyType
{
public:
	int __sizemasterList;	/* sequence of elements <masterList> */
	_ns1__abxMasterDetail_masterList *masterList;	/* required element of type ns1:abxMasterDetail-masterList */
	int __sizedetailList;	/* sequence of elements <detailList> */
	_ns1__abxMasterDetail_detailList *detailList;	/* required element of type ns1:abxMasterDetail-detailList */
public:
	virtual int soap_type() const { return 115; } /* = unique id SOAP_TYPE_ns1__abxMasterDetail */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxMasterDetail() { ns1__abxMasterDetail::soap_default(NULL); }
	virtual ~ns1__abxMasterDetail() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InsertUSFileWithUser
#define SOAP_TYPE_ns1__InsertUSFileWithUser (116)
/* ns1:InsertUSFileWithUser */
class SOAP_CMAC ns1__InsertUSFileWithUser : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	ns1__abxFileList *dataListInput;	/* optional element of type ns1:abxFileList */
	char *username;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 116; } /* = unique id SOAP_TYPE_ns1__InsertUSFileWithUser */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InsertUSFileWithUser() { ns1__InsertUSFileWithUser::soap_default(NULL); }
	virtual ~ns1__InsertUSFileWithUser() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InsertUSFileWithUserResponse
#define SOAP_TYPE_ns1__InsertUSFileWithUserResponse (117)
/* ns1:InsertUSFileWithUserResponse */
class SOAP_CMAC ns1__InsertUSFileWithUserResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 117; } /* = unique id SOAP_TYPE_ns1__InsertUSFileWithUserResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InsertUSFileWithUserResponse() { ns1__InsertUSFileWithUserResponse::soap_default(NULL); }
	virtual ~ns1__InsertUSFileWithUserResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetSDKLogList
#define SOAP_TYPE_ns1__GetSDKLogList (118)
/* ns1:GetSDKLogList */
class SOAP_CMAC ns1__GetSDKLogList : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	class ns1__abxLog *al;	/* optional element of type ns1:abxLog */
public:
	virtual int soap_type() const { return 118; } /* = unique id SOAP_TYPE_ns1__GetSDKLogList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetSDKLogList() { ns1__GetSDKLogList::soap_default(NULL); }
	virtual ~ns1__GetSDKLogList() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxLog
#define SOAP_TYPE_ns1__abxLog (119)
/* ns1:abxLog */
class SOAP_CMAC ns1__abxLog : public xsd__anyType
{
public:
	LONG64 eventTypeCode;	/* required element of type xsd:long */
	LONG64 levelCode;	/* required element of type xsd:long */
	LONG64 messageCode;	/* required element of type xsd:long */
	char *description;	/* required element of type xsd:string */
	char *username;	/* required element of type xsd:string */
	time_t timestamp;	/* required element of type xsd:dateTime */
public:
	virtual int soap_type() const { return 119; } /* = unique id SOAP_TYPE_ns1__abxLog */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxLog() { ns1__abxLog::soap_default(NULL); }
	virtual ~ns1__abxLog() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetSDKLogListResponse
#define SOAP_TYPE_ns1__GetSDKLogListResponse (120)
/* ns1:GetSDKLogListResponse */
class SOAP_CMAC ns1__GetSDKLogListResponse : public xsd__anyType
{
public:
	class ns1__abxLogResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxLogResult */
public:
	virtual int soap_type() const { return 120; } /* = unique id SOAP_TYPE_ns1__GetSDKLogListResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetSDKLogListResponse() { ns1__GetSDKLogListResponse::soap_default(NULL); }
	virtual ~ns1__GetSDKLogListResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxLogResult
#define SOAP_TYPE_ns1__abxLogResult (121)
/* ns1:abxLogResult */
class SOAP_CMAC ns1__abxLogResult : public xsd__anyType
{
public:
	unsigned int result;	/* required element of type xsd:unsignedInt */
	class ns1__abxLogList *list;	/* required element of type ns1:abxLogList */
public:
	virtual int soap_type() const { return 121; } /* = unique id SOAP_TYPE_ns1__abxLogResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxLogResult() { ns1__abxLogResult::soap_default(NULL); }
	virtual ~ns1__abxLogResult() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxLogList
#define SOAP_TYPE_ns1__abxLogList (122)
/* ns1:abxLogList */
class SOAP_CMAC ns1__abxLogList : public xsd__anyType
{
public:
	int __sizelogList;	/* sequence of elements <logList> */
	ns1__abxLog **logList;	/* required element of type ns1:abxLog */
public:
	virtual int soap_type() const { return 122; } /* = unique id SOAP_TYPE_ns1__abxLogList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxLogList() { ns1__abxLogList::soap_default(NULL); }
	virtual ~ns1__abxLogList() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Fk_USCOREgetRemoteFieldList
#define SOAP_TYPE_ns1__Fk_USCOREgetRemoteFieldList (123)
/* ns1:Fk_getRemoteFieldList */
class SOAP_CMAC ns1__Fk_USCOREgetRemoteFieldList : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *host;	/* optional element of type xsd:string */
	char *user;	/* optional element of type xsd:string */
	char *pwd;	/* optional element of type xsd:string */
	char *dbType;	/* optional element of type xsd:string */
	char *databaseName;	/* optional element of type xsd:string */
	char *tableName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 123; } /* = unique id SOAP_TYPE_ns1__Fk_USCOREgetRemoteFieldList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Fk_USCOREgetRemoteFieldList() { ns1__Fk_USCOREgetRemoteFieldList::soap_default(NULL); }
	virtual ~ns1__Fk_USCOREgetRemoteFieldList() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Fk_USCOREgetRemoteFieldListResponse
#define SOAP_TYPE_ns1__Fk_USCOREgetRemoteFieldListResponse (124)
/* ns1:Fk_getRemoteFieldListResponse */
class SOAP_CMAC ns1__Fk_USCOREgetRemoteFieldListResponse : public xsd__anyType
{
public:
	class ns1__abxFKResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFKResult */
public:
	virtual int soap_type() const { return 124; } /* = unique id SOAP_TYPE_ns1__Fk_USCOREgetRemoteFieldListResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Fk_USCOREgetRemoteFieldListResponse() { ns1__Fk_USCOREgetRemoteFieldListResponse::soap_default(NULL); }
	virtual ~ns1__Fk_USCOREgetRemoteFieldListResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxFKResult
#define SOAP_TYPE_ns1__abxFKResult (125)
/* ns1:abxFKResult */
class SOAP_CMAC ns1__abxFKResult : public xsd__anyType
{
public:
	unsigned int result;	/* required element of type xsd:unsignedInt */
	class ns1__abxFKList *list;	/* required element of type ns1:abxFKList */
public:
	virtual int soap_type() const { return 125; } /* = unique id SOAP_TYPE_ns1__abxFKResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxFKResult() { ns1__abxFKResult::soap_default(NULL); }
	virtual ~ns1__abxFKResult() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxFKList
#define SOAP_TYPE_ns1__abxFKList (126)
/* ns1:abxFKList */
class SOAP_CMAC ns1__abxFKList : public xsd__anyType
{
public:
	int __sizefk;	/* sequence of elements <fk> */
	class ns1__abxFK **fk;	/* required element of type ns1:abxFK */
public:
	virtual int soap_type() const { return 126; } /* = unique id SOAP_TYPE_ns1__abxFKList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxFKList() { ns1__abxFKList::soap_default(NULL); }
	virtual ~ns1__abxFKList() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxFK
#define SOAP_TYPE_ns1__abxFK (127)
/* ns1:abxFK */
class SOAP_CMAC ns1__abxFK : public xsd__anyType
{
public:
	class ns1__abxFkDb *fkDb;	/* required element of type ns1:abxFkDb */
	class ns1__abxFkArchiboxRacc *fkArchiboxRacc;	/* required element of type ns1:abxFkArchiboxRacc */
	class ns1__abxFkArchiboxUtenti *fkArchiboxUtenti;	/* required element of type ns1:abxFkArchiboxUtenti */
	char *name;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 127; } /* = unique id SOAP_TYPE_ns1__abxFK */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxFK() { ns1__abxFK::soap_default(NULL); }
	virtual ~ns1__abxFK() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxFkDb
#define SOAP_TYPE_ns1__abxFkDb (128)
/* ns1:abxFkDb */
class SOAP_CMAC ns1__abxFkDb : public xsd__anyType
{
public:
	char *dbType;	/* required element of type xsd:string */
	char *dbName;	/* required element of type xsd:string */
	char *host;	/* required element of type xsd:string */
	char *user;	/* required element of type xsd:string */
	char *password;	/* required element of type xsd:string */
	char *tableName;	/* required element of type xsd:string */
	char *tableIndex;	/* required element of type xsd:string */
	char *tableDesc;	/* required element of type xsd:string */
	char *poolName;	/* required element of type xsd:string */
	char *resourceName;	/* required element of type xsd:string */
	int __sizerecordList;	/* sequence of elements <recordList> */
	class ns1__abxFKDbRecord **recordList;	/* required element of type ns1:abxFKDbRecord */
	char *tableIndexValue;	/* required element of type xsd:string */
	char *tableDescValue;	/* required element of type xsd:string */
	char *optionGetRecord;	/* required element of type xsd:string */
	char *optionSetFkValue;	/* required element of type xsd:string */
	int __sizefieldMapList;	/* sequence of elements <fieldMapList> */
	class ns1__abxFKFieldMap **fieldMapList;	/* required element of type ns1:abxFKFieldMap */
	int __sizetableFieldList;	/* sequence of elements <tableFieldList> */
	class ns1__abxFKTableFields **tableFieldList;	/* required element of type ns1:abxFKTableFields */
	class ns1__abxRmDatabaseList *remoteDatabase;	/* required element of type ns1:abxRmDatabaseList */
	class ns1__abxRmTableList *remoteTable;	/* required element of type ns1:abxRmTableList */
	class ns1__abxRmViewList *remoteView;	/* required element of type ns1:abxRmViewList */
	class ns1__abxRmFieldList *remoteField;	/* required element of type ns1:abxRmFieldList */
	class ns1__abxMultiFKList *multiFKList;	/* required element of type ns1:abxMultiFKList */
public:
	virtual int soap_type() const { return 128; } /* = unique id SOAP_TYPE_ns1__abxFkDb */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxFkDb() { ns1__abxFkDb::soap_default(NULL); }
	virtual ~ns1__abxFkDb() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxFKDbRecord
#define SOAP_TYPE_ns1__abxFKDbRecord (129)
/* ns1:abxFKDbRecord */
class SOAP_CMAC ns1__abxFKDbRecord : public xsd__anyType
{
public:
	int __sizefieldList;	/* sequence of elements <fieldList> */
	class ns1__abxFKDbField **fieldList;	/* required element of type ns1:abxFKDbField */
	char *indexValue;	/* required element of type xsd:string */
	char *descValue;	/* required element of type xsd:string */
	char *count;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 129; } /* = unique id SOAP_TYPE_ns1__abxFKDbRecord */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxFKDbRecord() { ns1__abxFKDbRecord::soap_default(NULL); }
	virtual ~ns1__abxFKDbRecord() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxFKDbField
#define SOAP_TYPE_ns1__abxFKDbField (130)
/* ns1:abxFKDbField */
class SOAP_CMAC ns1__abxFKDbField : public xsd__anyType
{
public:
	char *fieldName;	/* required element of type xsd:string */
	char *fieldValue;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 130; } /* = unique id SOAP_TYPE_ns1__abxFKDbField */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxFKDbField() { ns1__abxFKDbField::soap_default(NULL); }
	virtual ~ns1__abxFKDbField() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxFKFieldMap
#define SOAP_TYPE_ns1__abxFKFieldMap (131)
/* ns1:abxFKFieldMap */
class SOAP_CMAC ns1__abxFKFieldMap : public xsd__anyType
{
public:
	char *remoteField;	/* required element of type xsd:string */
	char *localField;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 131; } /* = unique id SOAP_TYPE_ns1__abxFKFieldMap */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxFKFieldMap() { ns1__abxFKFieldMap::soap_default(NULL); }
	virtual ~ns1__abxFKFieldMap() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxFKTableFields
#define SOAP_TYPE_ns1__abxFKTableFields (132)
/* ns1:abxFKTableFields */
class SOAP_CMAC ns1__abxFKTableFields : public xsd__anyType
{
public:
	char *fieldName;	/* required element of type xsd:string */
	char *fieldType;	/* required element of type xsd:string */
	char *fieldPrecision;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 132; } /* = unique id SOAP_TYPE_ns1__abxFKTableFields */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxFKTableFields() { ns1__abxFKTableFields::soap_default(NULL); }
	virtual ~ns1__abxFKTableFields() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxRmDatabaseList
#define SOAP_TYPE_ns1__abxRmDatabaseList (133)
/* ns1:abxRmDatabaseList */
class SOAP_CMAC ns1__abxRmDatabaseList : public xsd__anyType
{
public:
	int __sizedatabaseName;	/* sequence of elements <databaseName> */
	char **databaseName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 133; } /* = unique id SOAP_TYPE_ns1__abxRmDatabaseList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxRmDatabaseList() { ns1__abxRmDatabaseList::soap_default(NULL); }
	virtual ~ns1__abxRmDatabaseList() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxRmTableList
#define SOAP_TYPE_ns1__abxRmTableList (134)
/* ns1:abxRmTableList */
class SOAP_CMAC ns1__abxRmTableList : public xsd__anyType
{
public:
	int __sizetableName;	/* sequence of elements <tableName> */
	char **tableName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 134; } /* = unique id SOAP_TYPE_ns1__abxRmTableList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxRmTableList() { ns1__abxRmTableList::soap_default(NULL); }
	virtual ~ns1__abxRmTableList() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxRmViewList
#define SOAP_TYPE_ns1__abxRmViewList (135)
/* ns1:abxRmViewList */
class SOAP_CMAC ns1__abxRmViewList : public xsd__anyType
{
public:
	int __sizeviewName;	/* sequence of elements <viewName> */
	char **viewName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 135; } /* = unique id SOAP_TYPE_ns1__abxRmViewList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxRmViewList() { ns1__abxRmViewList::soap_default(NULL); }
	virtual ~ns1__abxRmViewList() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxRmFieldList
#define SOAP_TYPE_ns1__abxRmFieldList (136)
/* ns1:abxRmFieldList */
class SOAP_CMAC ns1__abxRmFieldList : public xsd__anyType
{
public:
	int __sizefieldName;	/* sequence of elements <fieldName> */
	char **fieldName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 136; } /* = unique id SOAP_TYPE_ns1__abxRmFieldList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxRmFieldList() { ns1__abxRmFieldList::soap_default(NULL); }
	virtual ~ns1__abxRmFieldList() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxMultiFKList
#define SOAP_TYPE_ns1__abxMultiFKList (137)
/* ns1:abxMultiFKList */
class SOAP_CMAC ns1__abxMultiFKList : public xsd__anyType
{
public:
	int __sizemultiFK;	/* sequence of elements <multiFK> */
	class ns1__abxMultiFK **multiFK;	/* required element of type ns1:abxMultiFK */
public:
	virtual int soap_type() const { return 137; } /* = unique id SOAP_TYPE_ns1__abxMultiFKList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxMultiFKList() { ns1__abxMultiFKList::soap_default(NULL); }
	virtual ~ns1__abxMultiFKList() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxMultiFK
#define SOAP_TYPE_ns1__abxMultiFK (138)
/* ns1:abxMultiFK */
class SOAP_CMAC ns1__abxMultiFK : public xsd__anyType
{
public:
	char *abxFieldName;	/* required element of type xsd:string */
	char *abxFKFieldName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 138; } /* = unique id SOAP_TYPE_ns1__abxMultiFK */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxMultiFK() { ns1__abxMultiFK::soap_default(NULL); }
	virtual ~ns1__abxMultiFK() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxFkArchiboxRacc
#define SOAP_TYPE_ns1__abxFkArchiboxRacc (139)
/* ns1:abxFkArchiboxRacc */
class SOAP_CMAC ns1__abxFkArchiboxRacc : public xsd__anyType
{
public:
	char *instanceName;	/* required element of type xsd:string */
	char *dbName;	/* required element of type xsd:string */
	char *tableName;	/* required element of type xsd:string */
	char *tableIndex;	/* required element of type xsd:string */
	bool isRealTableIndex;	/* required element of type xsd:boolean */
	char *tableDesc;	/* required element of type xsd:string */
	char *tableIndexValue;	/* required element of type xsd:string */
	char *tableDescValue;	/* required element of type xsd:string */
	int __sizerecordList;	/* sequence of elements <recordList> */
	class ns1__abxFKRaccRecord **recordList;	/* required element of type ns1:abxFKRaccRecord */
	char *count;	/* required element of type xsd:string */
	ns1__abxMultiFKList *multiFKList;	/* required element of type ns1:abxMultiFKList */
public:
	virtual int soap_type() const { return 139; } /* = unique id SOAP_TYPE_ns1__abxFkArchiboxRacc */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxFkArchiboxRacc() { ns1__abxFkArchiboxRacc::soap_default(NULL); }
	virtual ~ns1__abxFkArchiboxRacc() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxFKRaccRecord
#define SOAP_TYPE_ns1__abxFKRaccRecord (140)
/* ns1:abxFKRaccRecord */
class SOAP_CMAC ns1__abxFKRaccRecord : public xsd__anyType
{
public:
	char *dataIdValue;	/* required element of type xsd:string */
	char *indexValue;	/* required element of type xsd:string */
	char *descValue;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 140; } /* = unique id SOAP_TYPE_ns1__abxFKRaccRecord */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxFKRaccRecord() { ns1__abxFKRaccRecord::soap_default(NULL); }
	virtual ~ns1__abxFKRaccRecord() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxFkArchiboxUtenti
#define SOAP_TYPE_ns1__abxFkArchiboxUtenti (141)
/* ns1:abxFkArchiboxUtenti */
class SOAP_CMAC ns1__abxFkArchiboxUtenti : public xsd__anyType
{
public:
	char *groupIndex;	/* required element of type xsd:string */
	char *groupDesc;	/* required element of type xsd:string */
	char *userIndex;	/* required element of type xsd:string */
	char *userDesc;	/* required element of type xsd:string */
	char *groupIndexValue;	/* required element of type xsd:string */
	char *groupDescValue;	/* required element of type xsd:string */
	char *userIndexValue;	/* required element of type xsd:string */
	char *userDescValue;	/* required element of type xsd:string */
	ns1__abxRmFieldList *localFields;	/* required element of type ns1:abxRmFieldList */
	int __sizerecordList;	/* sequence of elements <recordList> */
	class ns1__abxFKUtentiRecord **recordList;	/* required element of type ns1:abxFKUtentiRecord */
	char *count;	/* required element of type xsd:string */
	ns1__abxMultiFKList *multiFKList;	/* required element of type ns1:abxMultiFKList */
public:
	virtual int soap_type() const { return 141; } /* = unique id SOAP_TYPE_ns1__abxFkArchiboxUtenti */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxFkArchiboxUtenti() { ns1__abxFkArchiboxUtenti::soap_default(NULL); }
	virtual ~ns1__abxFkArchiboxUtenti() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxFKUtentiRecord
#define SOAP_TYPE_ns1__abxFKUtentiRecord (142)
/* ns1:abxFKUtentiRecord */
class SOAP_CMAC ns1__abxFKUtentiRecord : public xsd__anyType
{
public:
	char *userGroupIdValue;	/* required element of type xsd:string */
	int __sizefieldList;	/* sequence of elements <fieldList> */
	class ns1__abxFKUtentiField **fieldList;	/* required element of type ns1:abxFKUtentiField */
	char *indexValue;	/* required element of type xsd:string */
	char *descValue;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 142; } /* = unique id SOAP_TYPE_ns1__abxFKUtentiRecord */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxFKUtentiRecord() { ns1__abxFKUtentiRecord::soap_default(NULL); }
	virtual ~ns1__abxFKUtentiRecord() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxFKUtentiField
#define SOAP_TYPE_ns1__abxFKUtentiField (143)
/* ns1:abxFKUtentiField */
class SOAP_CMAC ns1__abxFKUtentiField : public xsd__anyType
{
public:
	char *fieldName;	/* required element of type xsd:string */
	char *fieldValue;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 143; } /* = unique id SOAP_TYPE_ns1__abxFKUtentiField */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxFKUtentiField() { ns1__abxFKUtentiField::soap_default(NULL); }
	virtual ~ns1__abxFKUtentiField() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetAllContainerExpressions
#define SOAP_TYPE_ns1__GetAllContainerExpressions (144)
/* ns1:GetAllContainerExpressions */
class SOAP_CMAC ns1__GetAllContainerExpressions : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 144; } /* = unique id SOAP_TYPE_ns1__GetAllContainerExpressions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetAllContainerExpressions() { ns1__GetAllContainerExpressions::soap_default(NULL); }
	virtual ~ns1__GetAllContainerExpressions() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetAllContainerExpressionsResponse
#define SOAP_TYPE_ns1__GetAllContainerExpressionsResponse (145)
/* ns1:GetAllContainerExpressionsResponse */
class SOAP_CMAC ns1__GetAllContainerExpressionsResponse : public xsd__anyType
{
public:
	ns1__abxExpressionResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxExpressionResult */
public:
	virtual int soap_type() const { return 145; } /* = unique id SOAP_TYPE_ns1__GetAllContainerExpressionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetAllContainerExpressionsResponse() { ns1__GetAllContainerExpressionsResponse::soap_default(NULL); }
	virtual ~ns1__GetAllContainerExpressionsResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__canDeleteDynorg
#define SOAP_TYPE_ns1__canDeleteDynorg (146)
/* ns1:canDeleteDynorg */
class SOAP_CMAC ns1__canDeleteDynorg : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *RuleName;	/* optional element of type xsd:string */
	char *TemplateName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 146; } /* = unique id SOAP_TYPE_ns1__canDeleteDynorg */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__canDeleteDynorg() { ns1__canDeleteDynorg::soap_default(NULL); }
	virtual ~ns1__canDeleteDynorg() { }
};
#endif

#ifndef SOAP_TYPE_ns1__canDeleteDynorgResponse
#define SOAP_TYPE_ns1__canDeleteDynorgResponse (147)
/* ns1:canDeleteDynorgResponse */
class SOAP_CMAC ns1__canDeleteDynorgResponse : public xsd__anyType
{
public:
	ns4__abxCan *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns4:abxCan */
public:
	virtual int soap_type() const { return 147; } /* = unique id SOAP_TYPE_ns1__canDeleteDynorgResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__canDeleteDynorgResponse() { ns1__canDeleteDynorgResponse::soap_default(NULL); }
	virtual ~ns1__canDeleteDynorgResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetDataTPFileListByContainer
#define SOAP_TYPE_ns1__GetDataTPFileListByContainer (148)
/* ns1:GetDataTPFileListByContainer */
class SOAP_CMAC ns1__GetDataTPFileListByContainer : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 148; } /* = unique id SOAP_TYPE_ns1__GetDataTPFileListByContainer */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetDataTPFileListByContainer() { ns1__GetDataTPFileListByContainer::soap_default(NULL); }
	virtual ~ns1__GetDataTPFileListByContainer() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetDataTPFileListByContainerResponse
#define SOAP_TYPE_ns1__GetDataTPFileListByContainerResponse (149)
/* ns1:GetDataTPFileListByContainerResponse */
class SOAP_CMAC ns1__GetDataTPFileListByContainerResponse : public xsd__anyType
{
public:
	class ns1__abxFileTpResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileTpResult */
public:
	virtual int soap_type() const { return 149; } /* = unique id SOAP_TYPE_ns1__GetDataTPFileListByContainerResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetDataTPFileListByContainerResponse() { ns1__GetDataTPFileListByContainerResponse::soap_default(NULL); }
	virtual ~ns1__GetDataTPFileListByContainerResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxFileTpResult
#define SOAP_TYPE_ns1__abxFileTpResult (150)
/* ns1:abxFileTpResult */
class SOAP_CMAC ns1__abxFileTpResult : public xsd__anyType
{
public:
	unsigned int result;	/* required element of type xsd:unsignedInt */
	class ns1__abxFileTpList *list;	/* required element of type ns1:abxFileTpList */
public:
	virtual int soap_type() const { return 150; } /* = unique id SOAP_TYPE_ns1__abxFileTpResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxFileTpResult() { ns1__abxFileTpResult::soap_default(NULL); }
	virtual ~ns1__abxFileTpResult() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxFileTpList
#define SOAP_TYPE_ns1__abxFileTpList (151)
/* ns1:abxFileTpList */
class SOAP_CMAC ns1__abxFileTpList : public xsd__anyType
{
public:
	int __sizedataList;	/* sequence of elements <dataList> */
	class ns1__abxFileTp **dataList;	/* required element of type ns1:abxFileTp */
public:
	virtual int soap_type() const { return 151; } /* = unique id SOAP_TYPE_ns1__abxFileTpList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxFileTpList() { ns1__abxFileTpList::soap_default(NULL); }
	virtual ~ns1__abxFileTpList() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxFileTp
#define SOAP_TYPE_ns1__abxFileTp (152)
/* ns1:abxFileTp */
class SOAP_CMAC ns1__abxFileTp : public xsd__anyType
{
public:
	char *attachmentId;	/* required element of type xsd:string */
	bool isLastRevision;	/* required element of type xsd:boolean */
	char *revisionId;	/* required element of type xsd:string */
	char *filesize;	/* required element of type xsd:string */
	char *filename;	/* required element of type xsd:string */
	char *defaultLanguage;	/* required element of type xsd:string */
	char *description;	/* required element of type xsd:string */
	char *hash;	/* required element of type xsd:string */
	char *hashType;	/* required element of type xsd:string */
	ns1__abxTranslation *translationList;	/* required element of type ns1:abxTranslation */
	char *fileUniqueCode;	/* required element of type xsd:string */
	char *filepath;	/* required element of type xsd:string */
	char *filenameSaved;	/* required element of type xsd:string */
	int numDownload;	/* required element of type xsd:int */
	char *idContainer;	/* required element of type xsd:string */
	char *templateNameID;	/* required element of type xsd:string */
	char *templateOption;	/* required element of type xsd:string */
	char *workflowProcessName;	/* required element of type xsd:string */
	char *workflowPackageName;	/* required element of type xsd:string */
	time_t dateCreated;	/* required element of type xsd:dateTime */
	char *userIdCreated;	/* required element of type xsd:string */
	time_t dateLastModify;	/* required element of type xsd:dateTime */
	char *userIdLastModify;	/* required element of type xsd:string */
	time_t timestamp;	/* required element of type xsd:dateTime */
	int __sizedownloadData;	/* sequence of elements <downloadData> */
	ns1__downloadData **downloadData;	/* required element of type ns1:downloadData */
	int __sizeuploadData;	/* sequence of elements <uploadData> */
	ns1__uploadData **uploadData;	/* required element of type ns1:uploadData */
	int __sizebindExcel;	/* sequence of elements <bindExcel> */
	class ns1__bindingExcel **bindExcel;	/* required element of type ns1:bindingExcel */
	int __sizebindWord;	/* sequence of elements <bindWord> */
	class ns1__bindingWord **bindWord;	/* required element of type ns1:bindingWord */
public:
	virtual int soap_type() const { return 152; } /* = unique id SOAP_TYPE_ns1__abxFileTp */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxFileTp() { ns1__abxFileTp::soap_default(NULL); }
	virtual ~ns1__abxFileTp() { }
};
#endif

#ifndef SOAP_TYPE_ns1__bindingExcel
#define SOAP_TYPE_ns1__bindingExcel (153)
/* ns1:bindingExcel */
class SOAP_CMAC ns1__bindingExcel : public xsd__anyType
{
public:
	char *ContainerField;	/* required element of type xsd:string */
	bool UserField;	/* required element of type xsd:boolean */
	char *DescriptionField;	/* required element of type xsd:string */
	int Column;	/* required element of type xsd:int */
	int Row;	/* required element of type xsd:int */
	int Sheet;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 153; } /* = unique id SOAP_TYPE_ns1__bindingExcel */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__bindingExcel() { ns1__bindingExcel::soap_default(NULL); }
	virtual ~ns1__bindingExcel() { }
};
#endif

#ifndef SOAP_TYPE_ns1__bindingWord
#define SOAP_TYPE_ns1__bindingWord (154)
/* ns1:bindingWord */
class SOAP_CMAC ns1__bindingWord : public xsd__anyType
{
public:
	char *ContainerField;	/* required element of type xsd:string */
	char *DocumentField;	/* required element of type xsd:string */
	char *DocumentFieldType;	/* required element of type xsd:string */
	bool UserField;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 154; } /* = unique id SOAP_TYPE_ns1__bindingWord */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__bindingWord() { ns1__bindingWord::soap_default(NULL); }
	virtual ~ns1__bindingWord() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetSDKImagesFromPDFTemplate
#define SOAP_TYPE_ns1__GetSDKImagesFromPDFTemplate (155)
/* ns1:GetSDKImagesFromPDFTemplate */
class SOAP_CMAC ns1__GetSDKImagesFromPDFTemplate : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *taskId;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 155; } /* = unique id SOAP_TYPE_ns1__GetSDKImagesFromPDFTemplate */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetSDKImagesFromPDFTemplate() { ns1__GetSDKImagesFromPDFTemplate::soap_default(NULL); }
	virtual ~ns1__GetSDKImagesFromPDFTemplate() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetSDKImagesFromPDFTemplateResponse
#define SOAP_TYPE_ns1__GetSDKImagesFromPDFTemplateResponse (156)
/* ns1:GetSDKImagesFromPDFTemplateResponse */
class SOAP_CMAC ns1__GetSDKImagesFromPDFTemplateResponse : public xsd__anyType
{
public:
	ns1__abxSDKResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxSDKResult */
public:
	virtual int soap_type() const { return 156; } /* = unique id SOAP_TYPE_ns1__GetSDKImagesFromPDFTemplateResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetSDKImagesFromPDFTemplateResponse() { ns1__GetSDKImagesFromPDFTemplateResponse::soap_default(NULL); }
	virtual ~ns1__GetSDKImagesFromPDFTemplateResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ModifyContainer
#define SOAP_TYPE_ns1__ModifyContainer (157)
/* ns1:ModifyContainer */
class SOAP_CMAC ns1__ModifyContainer : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	ns1__abxContainer *Container2Update;	/* optional element of type ns1:abxContainer */
	char *abxSecurityId;	/* optional element of type xsd:string */
	class ns1__abxVersioningList *avl;	/* optional element of type ns1:abxVersioningList */
public:
	virtual int soap_type() const { return 157; } /* = unique id SOAP_TYPE_ns1__ModifyContainer */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ModifyContainer() { ns1__ModifyContainer::soap_default(NULL); }
	virtual ~ns1__ModifyContainer() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxVersioningList
#define SOAP_TYPE_ns1__abxVersioningList (158)
/* ns1:abxVersioningList */
class SOAP_CMAC ns1__abxVersioningList : public xsd__anyType
{
public:
	int __sizeversionList;	/* sequence of elements <versionList> */
	class ns1__abxVersioning **versionList;	/* required element of type ns1:abxVersioning */
public:
	virtual int soap_type() const { return 158; } /* = unique id SOAP_TYPE_ns1__abxVersioningList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxVersioningList() { ns1__abxVersioningList::soap_default(NULL); }
	virtual ~ns1__abxVersioningList() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxVersioning
#define SOAP_TYPE_ns1__abxVersioning (159)
/* ns1:abxVersioning */
class SOAP_CMAC ns1__abxVersioning : public xsd__anyType
{
public:
	char *objName;	/* required element of type xsd:string */
	bool value;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 159; } /* = unique id SOAP_TYPE_ns1__abxVersioning */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxVersioning() { ns1__abxVersioning::soap_default(NULL); }
	virtual ~ns1__abxVersioning() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ModifyContainerResponse
#define SOAP_TYPE_ns1__ModifyContainerResponse (160)
/* ns1:ModifyContainerResponse */
class SOAP_CMAC ns1__ModifyContainerResponse : public xsd__anyType
{
public:
	class ns1__abxContainerResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxContainerResult */
public:
	virtual int soap_type() const { return 160; } /* = unique id SOAP_TYPE_ns1__ModifyContainerResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ModifyContainerResponse() { ns1__ModifyContainerResponse::soap_default(NULL); }
	virtual ~ns1__ModifyContainerResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxContainerResult
#define SOAP_TYPE_ns1__abxContainerResult (161)
/* ns1:abxContainerResult */
class SOAP_CMAC ns1__abxContainerResult : public xsd__anyType
{
public:
	unsigned int result;	/* required element of type xsd:unsignedInt */
	ns1__abxContainerList *list;	/* required element of type ns1:abxContainerList */
public:
	virtual int soap_type() const { return 161; } /* = unique id SOAP_TYPE_ns1__abxContainerResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxContainerResult() { ns1__abxContainerResult::soap_default(NULL); }
	virtual ~ns1__abxContainerResult() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Fk_USCOREDB_USCOREtestConnection
#define SOAP_TYPE_ns1__Fk_USCOREDB_USCOREtestConnection (162)
/* ns1:Fk_DB_testConnection */
class SOAP_CMAC ns1__Fk_USCOREDB_USCOREtestConnection : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *host;	/* optional element of type xsd:string */
	char *user;	/* optional element of type xsd:string */
	char *pwd;	/* optional element of type xsd:string */
	char *dbType;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 162; } /* = unique id SOAP_TYPE_ns1__Fk_USCOREDB_USCOREtestConnection */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Fk_USCOREDB_USCOREtestConnection() { ns1__Fk_USCOREDB_USCOREtestConnection::soap_default(NULL); }
	virtual ~ns1__Fk_USCOREDB_USCOREtestConnection() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Fk_USCOREDB_USCOREtestConnectionResponse
#define SOAP_TYPE_ns1__Fk_USCOREDB_USCOREtestConnectionResponse (163)
/* ns1:Fk_DB_testConnectionResponse */
class SOAP_CMAC ns1__Fk_USCOREDB_USCOREtestConnectionResponse : public xsd__anyType
{
public:
	ns1__abxFKResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFKResult */
public:
	virtual int soap_type() const { return 163; } /* = unique id SOAP_TYPE_ns1__Fk_USCOREDB_USCOREtestConnectionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Fk_USCOREDB_USCOREtestConnectionResponse() { ns1__Fk_USCOREDB_USCOREtestConnectionResponse::soap_default(NULL); }
	virtual ~ns1__Fk_USCOREDB_USCOREtestConnectionResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetListMarker
#define SOAP_TYPE_ns1__GetListMarker (164)
/* ns1:GetListMarker */
class SOAP_CMAC ns1__GetListMarker : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
public:
	virtual int soap_type() const { return 164; } /* = unique id SOAP_TYPE_ns1__GetListMarker */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetListMarker() { ns1__GetListMarker::soap_default(NULL); }
	virtual ~ns1__GetListMarker() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetListMarkerResponse
#define SOAP_TYPE_ns1__GetListMarkerResponse (165)
/* ns1:GetListMarkerResponse */
class SOAP_CMAC ns1__GetListMarkerResponse : public xsd__anyType
{
public:
	ns1__abxWorkflowResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxWorkflowResult */
public:
	virtual int soap_type() const { return 165; } /* = unique id SOAP_TYPE_ns1__GetListMarkerResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetListMarkerResponse() { ns1__GetListMarkerResponse::soap_default(NULL); }
	virtual ~ns1__GetListMarkerResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetDataFileContainerDetail
#define SOAP_TYPE_ns1__GetDataFileContainerDetail (166)
/* ns1:GetDataFileContainerDetail */
class SOAP_CMAC ns1__GetDataFileContainerDetail : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *objName;	/* optional element of type xsd:string */
	char *instanceName;	/* optional element of type xsd:string */
	char *contAttachmentId;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 166; } /* = unique id SOAP_TYPE_ns1__GetDataFileContainerDetail */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetDataFileContainerDetail() { ns1__GetDataFileContainerDetail::soap_default(NULL); }
	virtual ~ns1__GetDataFileContainerDetail() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetDataFileContainerDetailResponse
#define SOAP_TYPE_ns1__GetDataFileContainerDetailResponse (167)
/* ns1:GetDataFileContainerDetailResponse */
class SOAP_CMAC ns1__GetDataFileContainerDetailResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 167; } /* = unique id SOAP_TYPE_ns1__GetDataFileContainerDetailResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetDataFileContainerDetailResponse() { ns1__GetDataFileContainerDetailResponse::soap_default(NULL); }
	virtual ~ns1__GetDataFileContainerDetailResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetSDKTextFromTemplate
#define SOAP_TYPE_ns1__GetSDKTextFromTemplate (168)
/* ns1:GetSDKTextFromTemplate */
class SOAP_CMAC ns1__GetSDKTextFromTemplate : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *taskId;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 168; } /* = unique id SOAP_TYPE_ns1__GetSDKTextFromTemplate */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetSDKTextFromTemplate() { ns1__GetSDKTextFromTemplate::soap_default(NULL); }
	virtual ~ns1__GetSDKTextFromTemplate() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetSDKTextFromTemplateResponse
#define SOAP_TYPE_ns1__GetSDKTextFromTemplateResponse (169)
/* ns1:GetSDKTextFromTemplateResponse */
class SOAP_CMAC ns1__GetSDKTextFromTemplateResponse : public xsd__anyType
{
public:
	ns1__abxSDKResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxSDKResult */
public:
	virtual int soap_type() const { return 169; } /* = unique id SOAP_TYPE_ns1__GetSDKTextFromTemplateResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetSDKTextFromTemplateResponse() { ns1__GetSDKTextFromTemplateResponse::soap_default(NULL); }
	virtual ~ns1__GetSDKTextFromTemplateResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetDataFileListWA
#define SOAP_TYPE_ns1__GetDataFileListWA (170)
/* ns1:GetDataFileListWA */
class SOAP_CMAC ns1__GetDataFileListWA : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
	char *annotazioneId;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 170; } /* = unique id SOAP_TYPE_ns1__GetDataFileListWA */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetDataFileListWA() { ns1__GetDataFileListWA::soap_default(NULL); }
	virtual ~ns1__GetDataFileListWA() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetDataFileListWAResponse
#define SOAP_TYPE_ns1__GetDataFileListWAResponse (171)
/* ns1:GetDataFileListWAResponse */
class SOAP_CMAC ns1__GetDataFileListWAResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 171; } /* = unique id SOAP_TYPE_ns1__GetDataFileListWAResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetDataFileListWAResponse() { ns1__GetDataFileListWAResponse::soap_default(NULL); }
	virtual ~ns1__GetDataFileListWAResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ModifyTemplate
#define SOAP_TYPE_ns1__ModifyTemplate (172)
/* ns1:ModifyTemplate */
class SOAP_CMAC ns1__ModifyTemplate : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	ns1__abxTemplate *Template2Update;	/* optional element of type ns1:abxTemplate */
public:
	virtual int soap_type() const { return 172; } /* = unique id SOAP_TYPE_ns1__ModifyTemplate */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ModifyTemplate() { ns1__ModifyTemplate::soap_default(NULL); }
	virtual ~ns1__ModifyTemplate() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ModifyTemplateResponse
#define SOAP_TYPE_ns1__ModifyTemplateResponse (173)
/* ns1:ModifyTemplateResponse */
class SOAP_CMAC ns1__ModifyTemplateResponse : public xsd__anyType
{
public:
	class ns1__abxTemplateResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxTemplateResult */
public:
	virtual int soap_type() const { return 173; } /* = unique id SOAP_TYPE_ns1__ModifyTemplateResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ModifyTemplateResponse() { ns1__ModifyTemplateResponse::soap_default(NULL); }
	virtual ~ns1__ModifyTemplateResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxTemplateResult
#define SOAP_TYPE_ns1__abxTemplateResult (174)
/* ns1:abxTemplateResult */
class SOAP_CMAC ns1__abxTemplateResult : public xsd__anyType
{
public:
	unsigned int result;	/* required element of type xsd:unsignedInt */
	ns1__abxTemplateList *list;	/* required element of type ns1:abxTemplateList */
public:
	virtual int soap_type() const { return 174; } /* = unique id SOAP_TYPE_ns1__abxTemplateResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxTemplateResult() { ns1__abxTemplateResult::soap_default(NULL); }
	virtual ~ns1__abxTemplateResult() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CanInsertFileContainer
#define SOAP_TYPE_ns1__CanInsertFileContainer (175)
/* ns1:CanInsertFileContainer */
class SOAP_CMAC ns1__CanInsertFileContainer : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
	char *objName;	/* optional element of type xsd:string */
	ns1__abxFileList *dataListInput;	/* optional element of type ns1:abxFileList */
public:
	virtual int soap_type() const { return 175; } /* = unique id SOAP_TYPE_ns1__CanInsertFileContainer */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CanInsertFileContainer() { ns1__CanInsertFileContainer::soap_default(NULL); }
	virtual ~ns1__CanInsertFileContainer() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CanInsertFileContainerResponse
#define SOAP_TYPE_ns1__CanInsertFileContainerResponse (176)
/* ns1:CanInsertFileContainerResponse */
class SOAP_CMAC ns1__CanInsertFileContainerResponse : public xsd__anyType
{
public:
	ns4__abxCan *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns4:abxCan */
public:
	virtual int soap_type() const { return 176; } /* = unique id SOAP_TYPE_ns1__CanInsertFileContainerResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CanInsertFileContainerResponse() { ns1__CanInsertFileContainerResponse::soap_default(NULL); }
	virtual ~ns1__CanInsertFileContainerResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ModifyLinkContainerToContainer
#define SOAP_TYPE_ns1__ModifyLinkContainerToContainer (177)
/* ns1:ModifyLinkContainerToContainer */
class SOAP_CMAC ns1__ModifyLinkContainerToContainer : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *linkTypeName;	/* optional element of type xsd:string */
	char *instanceNameFrom;	/* optional element of type xsd:string */
	char *linkId;	/* optional element of type xsd:string */
	char *instanceNameTo;	/* optional element of type xsd:string */
	char *note;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 177; } /* = unique id SOAP_TYPE_ns1__ModifyLinkContainerToContainer */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ModifyLinkContainerToContainer() { ns1__ModifyLinkContainerToContainer::soap_default(NULL); }
	virtual ~ns1__ModifyLinkContainerToContainer() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ModifyLinkContainerToContainerResponse
#define SOAP_TYPE_ns1__ModifyLinkContainerToContainerResponse (178)
/* ns1:ModifyLinkContainerToContainerResponse */
class SOAP_CMAC ns1__ModifyLinkContainerToContainerResponse : public xsd__anyType
{
public:
	class ns1__abxLinkResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxLinkResult */
public:
	virtual int soap_type() const { return 178; } /* = unique id SOAP_TYPE_ns1__ModifyLinkContainerToContainerResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ModifyLinkContainerToContainerResponse() { ns1__ModifyLinkContainerToContainerResponse::soap_default(NULL); }
	virtual ~ns1__ModifyLinkContainerToContainerResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxLinkResult
#define SOAP_TYPE_ns1__abxLinkResult (179)
/* ns1:abxLinkResult */
class SOAP_CMAC ns1__abxLinkResult : public xsd__anyType
{
public:
	unsigned int result;	/* required element of type xsd:unsignedInt */
	class ns1__abxLinkList *list;	/* required element of type ns1:abxLinkList */
public:
	virtual int soap_type() const { return 179; } /* = unique id SOAP_TYPE_ns1__abxLinkResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxLinkResult() { ns1__abxLinkResult::soap_default(NULL); }
	virtual ~ns1__abxLinkResult() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxLinkList
#define SOAP_TYPE_ns1__abxLinkList (180)
/* ns1:abxLinkList */
class SOAP_CMAC ns1__abxLinkList : public xsd__anyType
{
public:
	int __sizelinkList;	/* sequence of elements <linkList> */
	class ns1__abxLink **linkList;	/* required element of type ns1:abxLink */
public:
	virtual int soap_type() const { return 180; } /* = unique id SOAP_TYPE_ns1__abxLinkList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxLinkList() { ns1__abxLinkList::soap_default(NULL); }
	virtual ~ns1__abxLinkList() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxLink
#define SOAP_TYPE_ns1__abxLink (181)
/* ns1:abxLink */
class SOAP_CMAC ns1__abxLink : public xsd__anyType
{
public:
	char *fromTable;	/* required element of type xsd:string */
	char *toTable;	/* required element of type xsd:string */
	char *fromTableId;	/* required element of type xsd:string */
	char *toTableId;	/* required element of type xsd:string */
	int countLinks;	/* required element of type xsd:int */
	char *fromInstanceName;	/* required element of type xsd:string */
	char *toInstanceName;	/* required element of type xsd:string */
	char *note;	/* required element of type xsd:string */
	char *linkId;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 181; } /* = unique id SOAP_TYPE_ns1__abxLink */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxLink() { ns1__abxLink::soap_default(NULL); }
	virtual ~ns1__abxLink() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CreateDynorg
#define SOAP_TYPE_ns1__CreateDynorg (182)
/* ns1:CreateDynorg */
class SOAP_CMAC ns1__CreateDynorg : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	ns3__abxDynamicorgRuleList *DynorgParam;	/* optional element of type ns3:abxDynamicorgRuleList */
public:
	virtual int soap_type() const { return 182; } /* = unique id SOAP_TYPE_ns1__CreateDynorg */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CreateDynorg() { ns1__CreateDynorg::soap_default(NULL); }
	virtual ~ns1__CreateDynorg() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CreateDynorgResponse
#define SOAP_TYPE_ns1__CreateDynorgResponse (183)
/* ns1:CreateDynorgResponse */
class SOAP_CMAC ns1__CreateDynorgResponse : public xsd__anyType
{
public:
	ns3__abxDynamicRuleResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns3:abxDynamicRuleResult */
public:
	virtual int soap_type() const { return 183; } /* = unique id SOAP_TYPE_ns1__CreateDynorgResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CreateDynorgResponse() { ns1__CreateDynorgResponse::soap_default(NULL); }
	virtual ~ns1__CreateDynorgResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetInstancePathname
#define SOAP_TYPE_ns1__GetInstancePathname (184)
/* ns1:GetInstancePathname */
class SOAP_CMAC ns1__GetInstancePathname : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *HexInstanceId;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 184; } /* = unique id SOAP_TYPE_ns1__GetInstancePathname */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetInstancePathname() { ns1__GetInstancePathname::soap_default(NULL); }
	virtual ~ns1__GetInstancePathname() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetInstancePathnameResponse
#define SOAP_TYPE_ns1__GetInstancePathnameResponse (185)
/* ns1:GetInstancePathnameResponse */
class SOAP_CMAC ns1__GetInstancePathnameResponse : public xsd__anyType
{
public:
	class ns1__abxGipResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxGipResult */
public:
	virtual int soap_type() const { return 185; } /* = unique id SOAP_TYPE_ns1__GetInstancePathnameResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetInstancePathnameResponse() { ns1__GetInstancePathnameResponse::soap_default(NULL); }
	virtual ~ns1__GetInstancePathnameResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxGipResult
#define SOAP_TYPE_ns1__abxGipResult (186)
/* ns1:abxGipResult */
class SOAP_CMAC ns1__abxGipResult : public xsd__anyType
{
public:
	unsigned int result;	/* required element of type xsd:unsignedInt */
	char *pathname;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 186; } /* = unique id SOAP_TYPE_ns1__abxGipResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxGipResult() { ns1__abxGipResult::soap_default(NULL); }
	virtual ~ns1__abxGipResult() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ValidateSDKTask
#define SOAP_TYPE_ns1__ValidateSDKTask (187)
/* ns1:ValidateSDKTask */
class SOAP_CMAC ns1__ValidateSDKTask : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *taskId;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 187; } /* = unique id SOAP_TYPE_ns1__ValidateSDKTask */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ValidateSDKTask() { ns1__ValidateSDKTask::soap_default(NULL); }
	virtual ~ns1__ValidateSDKTask() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ValidateSDKTaskResponse
#define SOAP_TYPE_ns1__ValidateSDKTaskResponse (188)
/* ns1:ValidateSDKTaskResponse */
class SOAP_CMAC ns1__ValidateSDKTaskResponse : public xsd__anyType
{
public:
	ns1__abxSDKResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxSDKResult */
public:
	virtual int soap_type() const { return 188; } /* = unique id SOAP_TYPE_ns1__ValidateSDKTaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ValidateSDKTaskResponse() { ns1__ValidateSDKTaskResponse::soap_default(NULL); }
	virtual ~ns1__ValidateSDKTaskResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Login
#define SOAP_TYPE_ns1__Login (189)
/* ns1:Login */
class SOAP_CMAC ns1__Login : public xsd__anyType
{
public:
	class ns1__abxLoginIdentity *LoginParam;	/* optional element of type ns1:abxLoginIdentity */
public:
	virtual int soap_type() const { return 189; } /* = unique id SOAP_TYPE_ns1__Login */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Login() { ns1__Login::soap_default(NULL); }
	virtual ~ns1__Login() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxLoginIdentity
#define SOAP_TYPE_ns1__abxLoginIdentity (190)
/* ns1:abxLoginIdentity */
class SOAP_CMAC ns1__abxLoginIdentity : public xsd__anyType
{
public:
	char *username;	/* required element of type xsd:string */
	char *password;	/* required element of type xsd:string */
	char *passphrase;	/* required element of type xsd:string */
	char *domain;	/* required element of type xsd:string */
	char *archiboxIP;	/* required element of type xsd:string */
	char *languageID;	/* required element of type xsd:string */
	unsigned int sourceID;	/* required element of type xsd:unsignedInt */
	bool usernameLogin;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 190; } /* = unique id SOAP_TYPE_ns1__abxLoginIdentity */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxLoginIdentity() { ns1__abxLoginIdentity::soap_default(NULL); }
	virtual ~ns1__abxLoginIdentity() { }
};
#endif

#ifndef SOAP_TYPE_ns1__LoginResponse
#define SOAP_TYPE_ns1__LoginResponse (191)
/* ns1:LoginResponse */
class SOAP_CMAC ns1__LoginResponse : public xsd__anyType
{
public:
	class ns1__abxLoginResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxLoginResult */
public:
	virtual int soap_type() const { return 191; } /* = unique id SOAP_TYPE_ns1__LoginResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__LoginResponse() { ns1__LoginResponse::soap_default(NULL); }
	virtual ~ns1__LoginResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxLoginResult
#define SOAP_TYPE_ns1__abxLoginResult (192)
/* ns1:abxLoginResult */
class SOAP_CMAC ns1__abxLoginResult : public xsd__anyType
{
public:
	unsigned int result;	/* required element of type xsd:unsignedInt */
	ns1__IDtype *sessionIDF;	/* required element of type ns1:IDtype */
	class ns1__abxLoginInfo *loginInfo;	/* required element of type ns1:abxLoginInfo */
public:
	virtual int soap_type() const { return 192; } /* = unique id SOAP_TYPE_ns1__abxLoginResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxLoginResult() { ns1__abxLoginResult::soap_default(NULL); }
	virtual ~ns1__abxLoginResult() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxLoginInfo
#define SOAP_TYPE_ns1__abxLoginInfo (193)
/* ns1:abxLoginInfo */
class SOAP_CMAC ns1__abxLoginInfo : public xsd__anyType
{
public:
	char *matricola;	/* required element of type xsd:string */
	char *description;	/* required element of type xsd:string */
	char *ipaddress;	/* required element of type xsd:string */
	char *location;	/* required element of type xsd:string */
	char *release;	/* required element of type xsd:string */
	int serverid;	/* required element of type xsd:int */
	bool activeDirectoryEnabled;	/* required element of type xsd:boolean */
	char *username;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 193; } /* = unique id SOAP_TYPE_ns1__abxLoginInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxLoginInfo() { ns1__abxLoginInfo::soap_default(NULL); }
	virtual ~ns1__abxLoginInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetFieldList
#define SOAP_TYPE_ns1__GetFieldList (194)
/* ns1:GetFieldList */
class SOAP_CMAC ns1__GetFieldList : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
public:
	virtual int soap_type() const { return 194; } /* = unique id SOAP_TYPE_ns1__GetFieldList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetFieldList() { ns1__GetFieldList::soap_default(NULL); }
	virtual ~ns1__GetFieldList() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetFieldListResponse
#define SOAP_TYPE_ns1__GetFieldListResponse (195)
/* ns1:GetFieldListResponse */
class SOAP_CMAC ns1__GetFieldListResponse : public xsd__anyType
{
public:
	class ns1__abxFieldResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFieldResult */
public:
	virtual int soap_type() const { return 195; } /* = unique id SOAP_TYPE_ns1__GetFieldListResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetFieldListResponse() { ns1__GetFieldListResponse::soap_default(NULL); }
	virtual ~ns1__GetFieldListResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxFieldResult
#define SOAP_TYPE_ns1__abxFieldResult (196)
/* ns1:abxFieldResult */
class SOAP_CMAC ns1__abxFieldResult : public xsd__anyType
{
public:
	unsigned int result;	/* required element of type xsd:unsignedInt */
	ns1__abxFieldList *list;	/* required element of type ns1:abxFieldList */
	char *optionalMessage;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 196; } /* = unique id SOAP_TYPE_ns1__abxFieldResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxFieldResult() { ns1__abxFieldResult::soap_default(NULL); }
	virtual ~ns1__abxFieldResult() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DownloadUSGetNext
#define SOAP_TYPE_ns1__DownloadUSGetNext (197)
/* ns1:DownloadUSGetNext */
class SOAP_CMAC ns1__DownloadUSGetNext : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *fileCode;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 197; } /* = unique id SOAP_TYPE_ns1__DownloadUSGetNext */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DownloadUSGetNext() { ns1__DownloadUSGetNext::soap_default(NULL); }
	virtual ~ns1__DownloadUSGetNext() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DownloadUSGetNextResponse
#define SOAP_TYPE_ns1__DownloadUSGetNextResponse (198)
/* ns1:DownloadUSGetNextResponse */
class SOAP_CMAC ns1__DownloadUSGetNextResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 198; } /* = unique id SOAP_TYPE_ns1__DownloadUSGetNextResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DownloadUSGetNextResponse() { ns1__DownloadUSGetNextResponse::soap_default(NULL); }
	virtual ~ns1__DownloadUSGetNextResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__canCreateField
#define SOAP_TYPE_ns1__canCreateField (199)
/* ns1:canCreateField */
class SOAP_CMAC ns1__canCreateField : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
public:
	virtual int soap_type() const { return 199; } /* = unique id SOAP_TYPE_ns1__canCreateField */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__canCreateField() { ns1__canCreateField::soap_default(NULL); }
	virtual ~ns1__canCreateField() { }
};
#endif

#ifndef SOAP_TYPE_ns1__canCreateFieldResponse
#define SOAP_TYPE_ns1__canCreateFieldResponse (200)
/* ns1:canCreateFieldResponse */
class SOAP_CMAC ns1__canCreateFieldResponse : public xsd__anyType
{
public:
	ns4__abxCan *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns4:abxCan */
public:
	virtual int soap_type() const { return 200; } /* = unique id SOAP_TYPE_ns1__canCreateFieldResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__canCreateFieldResponse() { ns1__canCreateFieldResponse::soap_default(NULL); }
	virtual ~ns1__canCreateFieldResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ModifyFileDescription
#define SOAP_TYPE_ns1__ModifyFileDescription (201)
/* ns1:ModifyFileDescription */
class SOAP_CMAC ns1__ModifyFileDescription : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
	char *dataId;	/* optional element of type xsd:string */
	ns1__abxFile *file;	/* optional element of type ns1:abxFile */
public:
	virtual int soap_type() const { return 201; } /* = unique id SOAP_TYPE_ns1__ModifyFileDescription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ModifyFileDescription() { ns1__ModifyFileDescription::soap_default(NULL); }
	virtual ~ns1__ModifyFileDescription() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ModifyFileDescriptionResponse
#define SOAP_TYPE_ns1__ModifyFileDescriptionResponse (202)
/* ns1:ModifyFileDescriptionResponse */
class SOAP_CMAC ns1__ModifyFileDescriptionResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 202; } /* = unique id SOAP_TYPE_ns1__ModifyFileDescriptionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ModifyFileDescriptionResponse() { ns1__ModifyFileDescriptionResponse::soap_default(NULL); }
	virtual ~ns1__ModifyFileDescriptionResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InsertData
#define SOAP_TYPE_ns1__InsertData (203)
/* ns1:InsertData */
class SOAP_CMAC ns1__InsertData : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
	LONG64 parentRevId;	/* required element of type xsd:long */
	class ns1__abxDataList *inputData;	/* optional element of type ns1:abxDataList */
	char *masterId;	/* optional element of type xsd:string */
	ns1__abxProtocolUse *protocolUseData;	/* optional element of type ns1:abxProtocolUse */
	char *abxSecurityId;	/* optional element of type xsd:string */
	char *note;	/* optional element of type xsd:string */
	ns1__abxVersioningList *avl;	/* optional element of type ns1:abxVersioningList */
public:
	virtual int soap_type() const { return 203; } /* = unique id SOAP_TYPE_ns1__InsertData */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InsertData() { ns1__InsertData::soap_default(NULL); }
	virtual ~ns1__InsertData() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxDataList
#define SOAP_TYPE_ns1__abxDataList (204)
/* ns1:abxDataList */
class SOAP_CMAC ns1__abxDataList : public xsd__anyType
{
public:
	int __sizedataList;	/* sequence of elements <dataList> */
	class ns1__abxData **dataList;	/* required element of type ns1:abxData */
public:
	virtual int soap_type() const { return 204; } /* = unique id SOAP_TYPE_ns1__abxDataList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxDataList() { ns1__abxDataList::soap_default(NULL); }
	virtual ~ns1__abxDataList() { }
};
#endif

#ifndef SOAP_TYPE__ns1__abxData_data
#define SOAP_TYPE__ns1__abxData_data (1132)
/* ns1:abxData-data */
class SOAP_CMAC _ns1__abxData_data
{
public:
	char *field;	/* required element of type xsd:string */
	char *value;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1132; } /* = unique id SOAP_TYPE__ns1__abxData_data */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__abxData_data() { _ns1__abxData_data::soap_default(NULL); }
	virtual ~_ns1__abxData_data() { }
};
#endif

#ifndef SOAP_TYPE__ns1__abxData_detailData
#define SOAP_TYPE__ns1__abxData_detailData (1134)
/* ns1:abxData-detailData */
class SOAP_CMAC _ns1__abxData_detailData
{
public:
	char *detailInstanceName;	/* required element of type xsd:string */
	char *detailDataId;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1134; } /* = unique id SOAP_TYPE__ns1__abxData_detailData */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__abxData_detailData() { _ns1__abxData_detailData::soap_default(NULL); }
	virtual ~_ns1__abxData_detailData() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxData
#define SOAP_TYPE_ns1__abxData (205)
/* ns1:abxData */
class SOAP_CMAC ns1__abxData : public xsd__anyType
{
public:
	int __sizedata;	/* sequence of elements <data> */
	_ns1__abxData_data *data;	/* required element of type ns1:abxData-data */
	ns1__abxProtocolUse *protocol;	/* required element of type ns1:abxProtocolUse */
	char *totRecordFound;	/* required element of type xsd:string */
	char *dataId;	/* required element of type xsd:string */
	char *securityId;	/* required element of type xsd:string */
	char *username;	/* required element of type xsd:string */
	char *masterDataId;	/* required element of type xsd:string */
	int __sizedetailData;	/* sequence of elements <detailData> */
	_ns1__abxData_detailData *detailData;	/* required element of type ns1:abxData-detailData */
	char *note;	/* required element of type xsd:string */
	ns1__abxAllPermission *allPermission;	/* required element of type ns1:abxAllPermission */
	time_t creationTimeStamp;	/* required element of type xsd:dateTime */
	time_t modifyTimeStamp;	/* required element of type xsd:dateTime */
public:
	virtual int soap_type() const { return 205; } /* = unique id SOAP_TYPE_ns1__abxData */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxData() { ns1__abxData::soap_default(NULL); }
	virtual ~ns1__abxData() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InsertDataResponse
#define SOAP_TYPE_ns1__InsertDataResponse (206)
/* ns1:InsertDataResponse */
class SOAP_CMAC ns1__InsertDataResponse : public xsd__anyType
{
public:
	class ns1__abxDataResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxDataResult */
public:
	virtual int soap_type() const { return 206; } /* = unique id SOAP_TYPE_ns1__InsertDataResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InsertDataResponse() { ns1__InsertDataResponse::soap_default(NULL); }
	virtual ~ns1__InsertDataResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxDataResult
#define SOAP_TYPE_ns1__abxDataResult (207)
/* ns1:abxDataResult */
class SOAP_CMAC ns1__abxDataResult : public xsd__anyType
{
public:
	unsigned int result;	/* required element of type xsd:unsignedInt */
	ns1__abxDataList *list;	/* required element of type ns1:abxDataList */
	char *optionalMessage;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 207; } /* = unique id SOAP_TYPE_ns1__abxDataResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxDataResult() { ns1__abxDataResult::soap_default(NULL); }
	virtual ~ns1__abxDataResult() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UploadWFSendChunk
#define SOAP_TYPE_ns1__UploadWFSendChunk (208)
/* ns1:UploadWFSendChunk */
class SOAP_CMAC ns1__UploadWFSendChunk : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *fileCode;	/* optional element of type xsd:string */
	xsd__base64Binary *objName;	/* optional element of type xsd:base64Binary */
public:
	virtual int soap_type() const { return 208; } /* = unique id SOAP_TYPE_ns1__UploadWFSendChunk */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UploadWFSendChunk() { ns1__UploadWFSendChunk::soap_default(NULL); }
	virtual ~ns1__UploadWFSendChunk() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UploadWFSendChunkResponse
#define SOAP_TYPE_ns1__UploadWFSendChunkResponse (209)
/* ns1:UploadWFSendChunkResponse */
class SOAP_CMAC ns1__UploadWFSendChunkResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 209; } /* = unique id SOAP_TYPE_ns1__UploadWFSendChunkResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UploadWFSendChunkResponse() { ns1__UploadWFSendChunkResponse::soap_default(NULL); }
	virtual ~ns1__UploadWFSendChunkResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetDataLimit
#define SOAP_TYPE_ns1__GetDataLimit (210)
/* ns1:GetDataLimit */
class SOAP_CMAC ns1__GetDataLimit : public xsd__anyType
{
public:
	ns1__IDtype *IDtype_USCORESessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
	int numTotRecord;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 210; } /* = unique id SOAP_TYPE_ns1__GetDataLimit */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetDataLimit() { ns1__GetDataLimit::soap_default(NULL); }
	virtual ~ns1__GetDataLimit() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetDataLimitResponse
#define SOAP_TYPE_ns1__GetDataLimitResponse (211)
/* ns1:GetDataLimitResponse */
class SOAP_CMAC ns1__GetDataLimitResponse : public xsd__anyType
{
public:
	ns1__abxDataResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxDataResult */
public:
	virtual int soap_type() const { return 211; } /* = unique id SOAP_TYPE_ns1__GetDataLimitResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetDataLimitResponse() { ns1__GetDataLimitResponse::soap_default(NULL); }
	virtual ~ns1__GetDataLimitResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetDataTPFileListByName
#define SOAP_TYPE_ns1__GetDataTPFileListByName (212)
/* ns1:GetDataTPFileListByName */
class SOAP_CMAC ns1__GetDataTPFileListByName : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *templateName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 212; } /* = unique id SOAP_TYPE_ns1__GetDataTPFileListByName */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetDataTPFileListByName() { ns1__GetDataTPFileListByName::soap_default(NULL); }
	virtual ~ns1__GetDataTPFileListByName() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetDataTPFileListByNameResponse
#define SOAP_TYPE_ns1__GetDataTPFileListByNameResponse (213)
/* ns1:GetDataTPFileListByNameResponse */
class SOAP_CMAC ns1__GetDataTPFileListByNameResponse : public xsd__anyType
{
public:
	ns1__abxFileTpResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileTpResult */
public:
	virtual int soap_type() const { return 213; } /* = unique id SOAP_TYPE_ns1__GetDataTPFileListByNameResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetDataTPFileListByNameResponse() { ns1__GetDataTPFileListByNameResponse::soap_default(NULL); }
	virtual ~ns1__GetDataTPFileListByNameResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DownloadGetNextWA
#define SOAP_TYPE_ns1__DownloadGetNextWA (214)
/* ns1:DownloadGetNextWA */
class SOAP_CMAC ns1__DownloadGetNextWA : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *fileCode;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 214; } /* = unique id SOAP_TYPE_ns1__DownloadGetNextWA */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DownloadGetNextWA() { ns1__DownloadGetNextWA::soap_default(NULL); }
	virtual ~ns1__DownloadGetNextWA() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DownloadGetNextWAResponse
#define SOAP_TYPE_ns1__DownloadGetNextWAResponse (215)
/* ns1:DownloadGetNextWAResponse */
class SOAP_CMAC ns1__DownloadGetNextWAResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 215; } /* = unique id SOAP_TYPE_ns1__DownloadGetNextWAResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DownloadGetNextWAResponse() { ns1__DownloadGetNextWAResponse::soap_default(NULL); }
	virtual ~ns1__DownloadGetNextWAResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DownloadUSFile
#define SOAP_TYPE_ns1__DownloadUSFile (216)
/* ns1:DownloadUSFile */
class SOAP_CMAC ns1__DownloadUSFile : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *attachmentId;	/* optional element of type xsd:string */
	char *dChunk;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 216; } /* = unique id SOAP_TYPE_ns1__DownloadUSFile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DownloadUSFile() { ns1__DownloadUSFile::soap_default(NULL); }
	virtual ~ns1__DownloadUSFile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DownloadUSFileResponse
#define SOAP_TYPE_ns1__DownloadUSFileResponse (217)
/* ns1:DownloadUSFileResponse */
class SOAP_CMAC ns1__DownloadUSFileResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 217; } /* = unique id SOAP_TYPE_ns1__DownloadUSFileResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DownloadUSFileResponse() { ns1__DownloadUSFileResponse::soap_default(NULL); }
	virtual ~ns1__DownloadUSFileResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SetTmpTPUploadPath
#define SOAP_TYPE_ns1__SetTmpTPUploadPath (218)
/* ns1:SetTmpTPUploadPath */
class SOAP_CMAC ns1__SetTmpTPUploadPath : public xsd__anyType
{
public:
	char *path;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 218; } /* = unique id SOAP_TYPE_ns1__SetTmpTPUploadPath */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SetTmpTPUploadPath() { ns1__SetTmpTPUploadPath::soap_default(NULL); }
	virtual ~ns1__SetTmpTPUploadPath() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SetTmpTPUploadPathResponse
#define SOAP_TYPE_ns1__SetTmpTPUploadPathResponse (219)
/* ns1:SetTmpTPUploadPathResponse */
class SOAP_CMAC ns1__SetTmpTPUploadPathResponse : public xsd__anyType
{
public:
	ns1__abxFileTpResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileTpResult */
public:
	virtual int soap_type() const { return 219; } /* = unique id SOAP_TYPE_ns1__SetTmpTPUploadPathResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SetTmpTPUploadPathResponse() { ns1__SetTmpTPUploadPathResponse::soap_default(NULL); }
	virtual ~ns1__SetTmpTPUploadPathResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetGroupsListByUser
#define SOAP_TYPE_ns1__GetGroupsListByUser (220)
/* ns1:GetGroupsListByUser */
class SOAP_CMAC ns1__GetGroupsListByUser : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *username;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 220; } /* = unique id SOAP_TYPE_ns1__GetGroupsListByUser */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetGroupsListByUser() { ns1__GetGroupsListByUser::soap_default(NULL); }
	virtual ~ns1__GetGroupsListByUser() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetGroupsListByUserResponse
#define SOAP_TYPE_ns1__GetGroupsListByUserResponse (221)
/* ns1:GetGroupsListByUserResponse */
class SOAP_CMAC ns1__GetGroupsListByUserResponse : public xsd__anyType
{
public:
	ns1__abxUserListResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxUserListResult */
public:
	virtual int soap_type() const { return 221; } /* = unique id SOAP_TYPE_ns1__GetGroupsListByUserResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetGroupsListByUserResponse() { ns1__GetGroupsListByUserResponse::soap_default(NULL); }
	virtual ~ns1__GetGroupsListByUserResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DownloadWFEndFile
#define SOAP_TYPE_ns1__DownloadWFEndFile (222)
/* ns1:DownloadWFEndFile */
class SOAP_CMAC ns1__DownloadWFEndFile : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *fileCode;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 222; } /* = unique id SOAP_TYPE_ns1__DownloadWFEndFile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DownloadWFEndFile() { ns1__DownloadWFEndFile::soap_default(NULL); }
	virtual ~ns1__DownloadWFEndFile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DownloadWFEndFileResponse
#define SOAP_TYPE_ns1__DownloadWFEndFileResponse (223)
/* ns1:DownloadWFEndFileResponse */
class SOAP_CMAC ns1__DownloadWFEndFileResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 223; } /* = unique id SOAP_TYPE_ns1__DownloadWFEndFileResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DownloadWFEndFileResponse() { ns1__DownloadWFEndFileResponse::soap_default(NULL); }
	virtual ~ns1__DownloadWFEndFileResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__canDeleteTemplate
#define SOAP_TYPE_ns1__canDeleteTemplate (224)
/* ns1:canDeleteTemplate */
class SOAP_CMAC ns1__canDeleteTemplate : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *TemplateName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 224; } /* = unique id SOAP_TYPE_ns1__canDeleteTemplate */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__canDeleteTemplate() { ns1__canDeleteTemplate::soap_default(NULL); }
	virtual ~ns1__canDeleteTemplate() { }
};
#endif

#ifndef SOAP_TYPE_ns1__canDeleteTemplateResponse
#define SOAP_TYPE_ns1__canDeleteTemplateResponse (225)
/* ns1:canDeleteTemplateResponse */
class SOAP_CMAC ns1__canDeleteTemplateResponse : public xsd__anyType
{
public:
	ns4__abxCan *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns4:abxCan */
public:
	virtual int soap_type() const { return 225; } /* = unique id SOAP_TYPE_ns1__canDeleteTemplateResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__canDeleteTemplateResponse() { ns1__canDeleteTemplateResponse::soap_default(NULL); }
	virtual ~ns1__canDeleteTemplateResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteSDKLog
#define SOAP_TYPE_ns1__DeleteSDKLog (226)
/* ns1:DeleteSDKLog */
class SOAP_CMAC ns1__DeleteSDKLog : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	ns1__abxLog *al;	/* optional element of type ns1:abxLog */
public:
	virtual int soap_type() const { return 226; } /* = unique id SOAP_TYPE_ns1__DeleteSDKLog */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteSDKLog() { ns1__DeleteSDKLog::soap_default(NULL); }
	virtual ~ns1__DeleteSDKLog() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteSDKLogResponse
#define SOAP_TYPE_ns1__DeleteSDKLogResponse (227)
/* ns1:DeleteSDKLogResponse */
class SOAP_CMAC ns1__DeleteSDKLogResponse : public xsd__anyType
{
public:
	ns1__abxLogResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxLogResult */
public:
	virtual int soap_type() const { return 227; } /* = unique id SOAP_TYPE_ns1__DeleteSDKLogResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteSDKLogResponse() { ns1__DeleteSDKLogResponse::soap_default(NULL); }
	virtual ~ns1__DeleteSDKLogResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CopyData
#define SOAP_TYPE_ns1__CopyData (228)
/* ns1:CopyData */
class SOAP_CMAC ns1__CopyData : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
	char *instanceNameDest;	/* optional element of type xsd:string */
	ns1__abxData *document;	/* optional element of type ns1:abxData */
public:
	virtual int soap_type() const { return 228; } /* = unique id SOAP_TYPE_ns1__CopyData */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CopyData() { ns1__CopyData::soap_default(NULL); }
	virtual ~ns1__CopyData() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CopyDataResponse
#define SOAP_TYPE_ns1__CopyDataResponse (229)
/* ns1:CopyDataResponse */
class SOAP_CMAC ns1__CopyDataResponse : public xsd__anyType
{
public:
	ns1__abxDataResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxDataResult */
public:
	virtual int soap_type() const { return 229; } /* = unique id SOAP_TYPE_ns1__CopyDataResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CopyDataResponse() { ns1__CopyDataResponse::soap_default(NULL); }
	virtual ~ns1__CopyDataResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CreateSDKTaskWatchFolder
#define SOAP_TYPE_ns1__CreateSDKTaskWatchFolder (230)
/* ns1:CreateSDKTaskWatchFolder */
class SOAP_CMAC ns1__CreateSDKTaskWatchFolder : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	ns1__abxSDKTask *sdkTask;	/* optional element of type ns1:abxSDKTask */
public:
	virtual int soap_type() const { return 230; } /* = unique id SOAP_TYPE_ns1__CreateSDKTaskWatchFolder */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CreateSDKTaskWatchFolder() { ns1__CreateSDKTaskWatchFolder::soap_default(NULL); }
	virtual ~ns1__CreateSDKTaskWatchFolder() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CreateSDKTaskWatchFolderResponse
#define SOAP_TYPE_ns1__CreateSDKTaskWatchFolderResponse (231)
/* ns1:CreateSDKTaskWatchFolderResponse */
class SOAP_CMAC ns1__CreateSDKTaskWatchFolderResponse : public xsd__anyType
{
public:
	ns1__abxSDKResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxSDKResult */
public:
	virtual int soap_type() const { return 231; } /* = unique id SOAP_TYPE_ns1__CreateSDKTaskWatchFolderResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CreateSDKTaskWatchFolderResponse() { ns1__CreateSDKTaskWatchFolderResponse::soap_default(NULL); }
	virtual ~ns1__CreateSDKTaskWatchFolderResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetArchiBoxInfo
#define SOAP_TYPE_ns1__GetArchiBoxInfo (232)
/* ns1:GetArchiBoxInfo */
class SOAP_CMAC ns1__GetArchiBoxInfo : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
public:
	virtual int soap_type() const { return 232; } /* = unique id SOAP_TYPE_ns1__GetArchiBoxInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetArchiBoxInfo() { ns1__GetArchiBoxInfo::soap_default(NULL); }
	virtual ~ns1__GetArchiBoxInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetArchiBoxInfoResponse
#define SOAP_TYPE_ns1__GetArchiBoxInfoResponse (233)
/* ns1:GetArchiBoxInfoResponse */
class SOAP_CMAC ns1__GetArchiBoxInfoResponse : public xsd__anyType
{
public:
	class ns1__abxArchiBoxDomainResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxArchiBoxDomainResult */
public:
	virtual int soap_type() const { return 233; } /* = unique id SOAP_TYPE_ns1__GetArchiBoxInfoResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetArchiBoxInfoResponse() { ns1__GetArchiBoxInfoResponse::soap_default(NULL); }
	virtual ~ns1__GetArchiBoxInfoResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxArchiBoxDomainResult
#define SOAP_TYPE_ns1__abxArchiBoxDomainResult (234)
/* ns1:abxArchiBoxDomainResult */
class SOAP_CMAC ns1__abxArchiBoxDomainResult : public xsd__anyType
{
public:
	class ns1__abxArchiBoxDomainList *list;	/* required element of type ns1:abxArchiBoxDomainList */
	unsigned int result;	/* required element of type xsd:unsignedInt */
public:
	virtual int soap_type() const { return 234; } /* = unique id SOAP_TYPE_ns1__abxArchiBoxDomainResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxArchiBoxDomainResult() { ns1__abxArchiBoxDomainResult::soap_default(NULL); }
	virtual ~ns1__abxArchiBoxDomainResult() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxArchiBoxDomainList
#define SOAP_TYPE_ns1__abxArchiBoxDomainList (235)
/* ns1:abxArchiBoxDomainList */
class SOAP_CMAC ns1__abxArchiBoxDomainList : public xsd__anyType
{
public:
	int __sizearchiboxDomainList;	/* sequence of elements <archiboxDomainList> */
	class ns1__abxArchiBoxDomain **archiboxDomainList;	/* required element of type ns1:abxArchiBoxDomain */
public:
	virtual int soap_type() const { return 235; } /* = unique id SOAP_TYPE_ns1__abxArchiBoxDomainList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxArchiBoxDomainList() { ns1__abxArchiBoxDomainList::soap_default(NULL); }
	virtual ~ns1__abxArchiBoxDomainList() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxArchiBoxDomain
#define SOAP_TYPE_ns1__abxArchiBoxDomain (236)
/* ns1:abxArchiBoxDomain */
class SOAP_CMAC ns1__abxArchiBoxDomain : public xsd__anyType
{
public:
	char *matricola;	/* required element of type xsd:string */
	char *description;	/* required element of type xsd:string */
	char *ipaddress;	/* required element of type xsd:string */
	char *location;	/* required element of type xsd:string */
	char *release;	/* required element of type xsd:string */
	int serverid;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 236; } /* = unique id SOAP_TYPE_ns1__abxArchiBoxDomain */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxArchiBoxDomain() { ns1__abxArchiBoxDomain::soap_default(NULL); }
	virtual ~ns1__abxArchiBoxDomain() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Fk_USCOREgetCountAllRecordByIndexDesc
#define SOAP_TYPE_ns1__Fk_USCOREgetCountAllRecordByIndexDesc (237)
/* ns1:Fk_getCountAllRecordByIndexDesc */
class SOAP_CMAC ns1__Fk_USCOREgetCountAllRecordByIndexDesc : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	ns1__abxFK *fkp;	/* optional element of type ns1:abxFK */
	char *InstanceName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 237; } /* = unique id SOAP_TYPE_ns1__Fk_USCOREgetCountAllRecordByIndexDesc */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Fk_USCOREgetCountAllRecordByIndexDesc() { ns1__Fk_USCOREgetCountAllRecordByIndexDesc::soap_default(NULL); }
	virtual ~ns1__Fk_USCOREgetCountAllRecordByIndexDesc() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Fk_USCOREgetCountAllRecordByIndexDescResponse
#define SOAP_TYPE_ns1__Fk_USCOREgetCountAllRecordByIndexDescResponse (238)
/* ns1:Fk_getCountAllRecordByIndexDescResponse */
class SOAP_CMAC ns1__Fk_USCOREgetCountAllRecordByIndexDescResponse : public xsd__anyType
{
public:
	ns1__abxFKResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFKResult */
public:
	virtual int soap_type() const { return 238; } /* = unique id SOAP_TYPE_ns1__Fk_USCOREgetCountAllRecordByIndexDescResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Fk_USCOREgetCountAllRecordByIndexDescResponse() { ns1__Fk_USCOREgetCountAllRecordByIndexDescResponse::soap_default(NULL); }
	virtual ~ns1__Fk_USCOREgetCountAllRecordByIndexDescResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetSDKTaskFieldMapping
#define SOAP_TYPE_ns1__GetSDKTaskFieldMapping (239)
/* ns1:GetSDKTaskFieldMapping */
class SOAP_CMAC ns1__GetSDKTaskFieldMapping : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *taskId;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 239; } /* = unique id SOAP_TYPE_ns1__GetSDKTaskFieldMapping */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetSDKTaskFieldMapping() { ns1__GetSDKTaskFieldMapping::soap_default(NULL); }
	virtual ~ns1__GetSDKTaskFieldMapping() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetSDKTaskFieldMappingResponse
#define SOAP_TYPE_ns1__GetSDKTaskFieldMappingResponse (240)
/* ns1:GetSDKTaskFieldMappingResponse */
class SOAP_CMAC ns1__GetSDKTaskFieldMappingResponse : public xsd__anyType
{
public:
	ns1__abxSDKResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxSDKResult */
public:
	virtual int soap_type() const { return 240; } /* = unique id SOAP_TYPE_ns1__GetSDKTaskFieldMappingResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetSDKTaskFieldMappingResponse() { ns1__GetSDKTaskFieldMappingResponse::soap_default(NULL); }
	virtual ~ns1__GetSDKTaskFieldMappingResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteTPFileByCode
#define SOAP_TYPE_ns1__DeleteTPFileByCode (241)
/* ns1:DeleteTPFileByCode */
class SOAP_CMAC ns1__DeleteTPFileByCode : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *fileCode;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 241; } /* = unique id SOAP_TYPE_ns1__DeleteTPFileByCode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteTPFileByCode() { ns1__DeleteTPFileByCode::soap_default(NULL); }
	virtual ~ns1__DeleteTPFileByCode() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteTPFileByCodeResponse
#define SOAP_TYPE_ns1__DeleteTPFileByCodeResponse (242)
/* ns1:DeleteTPFileByCodeResponse */
class SOAP_CMAC ns1__DeleteTPFileByCodeResponse : public xsd__anyType
{
public:
	ns1__abxFileTpResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileTpResult */
public:
	virtual int soap_type() const { return 242; } /* = unique id SOAP_TYPE_ns1__DeleteTPFileByCodeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteTPFileByCodeResponse() { ns1__DeleteTPFileByCodeResponse::soap_default(NULL); }
	virtual ~ns1__DeleteTPFileByCodeResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__MoveData
#define SOAP_TYPE_ns1__MoveData (243)
/* ns1:MoveData */
class SOAP_CMAC ns1__MoveData : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
	char *instanceNameDest;	/* optional element of type xsd:string */
	ns1__abxData *document;	/* optional element of type ns1:abxData */
public:
	virtual int soap_type() const { return 243; } /* = unique id SOAP_TYPE_ns1__MoveData */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__MoveData() { ns1__MoveData::soap_default(NULL); }
	virtual ~ns1__MoveData() { }
};
#endif

#ifndef SOAP_TYPE_ns1__MoveDataResponse
#define SOAP_TYPE_ns1__MoveDataResponse (244)
/* ns1:MoveDataResponse */
class SOAP_CMAC ns1__MoveDataResponse : public xsd__anyType
{
public:
	ns1__abxDataResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxDataResult */
public:
	virtual int soap_type() const { return 244; } /* = unique id SOAP_TYPE_ns1__MoveDataResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__MoveDataResponse() { ns1__MoveDataResponse::soap_default(NULL); }
	virtual ~ns1__MoveDataResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ModifyUser
#define SOAP_TYPE_ns1__ModifyUser (245)
/* ns1:ModifyUser */
class SOAP_CMAC ns1__ModifyUser : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	ns1__abxUser *user;	/* optional element of type ns1:abxUser */
public:
	virtual int soap_type() const { return 245; } /* = unique id SOAP_TYPE_ns1__ModifyUser */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ModifyUser() { ns1__ModifyUser::soap_default(NULL); }
	virtual ~ns1__ModifyUser() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ModifyUserResponse
#define SOAP_TYPE_ns1__ModifyUserResponse (246)
/* ns1:ModifyUserResponse */
class SOAP_CMAC ns1__ModifyUserResponse : public xsd__anyType
{
public:
	ns1__abxUserListResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxUserListResult */
public:
	virtual int soap_type() const { return 246; } /* = unique id SOAP_TYPE_ns1__ModifyUserResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ModifyUserResponse() { ns1__ModifyUserResponse::soap_default(NULL); }
	virtual ~ns1__ModifyUserResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetSchedulerTasks
#define SOAP_TYPE_ns1__GetSchedulerTasks (247)
/* ns1:GetSchedulerTasks */
class SOAP_CMAC ns1__GetSchedulerTasks : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *taskType;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 247; } /* = unique id SOAP_TYPE_ns1__GetSchedulerTasks */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetSchedulerTasks() { ns1__GetSchedulerTasks::soap_default(NULL); }
	virtual ~ns1__GetSchedulerTasks() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetSchedulerTasksResponse
#define SOAP_TYPE_ns1__GetSchedulerTasksResponse (248)
/* ns1:GetSchedulerTasksResponse */
class SOAP_CMAC ns1__GetSchedulerTasksResponse : public xsd__anyType
{
public:
	class ns1__abxSchedulerResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxSchedulerResult */
public:
	virtual int soap_type() const { return 248; } /* = unique id SOAP_TYPE_ns1__GetSchedulerTasksResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetSchedulerTasksResponse() { ns1__GetSchedulerTasksResponse::soap_default(NULL); }
	virtual ~ns1__GetSchedulerTasksResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxSchedulerResult
#define SOAP_TYPE_ns1__abxSchedulerResult (249)
/* ns1:abxSchedulerResult */
class SOAP_CMAC ns1__abxSchedulerResult : public xsd__anyType
{
public:
	unsigned int result;	/* required element of type xsd:unsignedInt */
	class ns1__abxSchedulerTaskList *list;	/* required element of type ns1:abxSchedulerTaskList */
public:
	virtual int soap_type() const { return 249; } /* = unique id SOAP_TYPE_ns1__abxSchedulerResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxSchedulerResult() { ns1__abxSchedulerResult::soap_default(NULL); }
	virtual ~ns1__abxSchedulerResult() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxSchedulerTaskList
#define SOAP_TYPE_ns1__abxSchedulerTaskList (250)
/* ns1:abxSchedulerTaskList */
class SOAP_CMAC ns1__abxSchedulerTaskList : public xsd__anyType
{
public:
	int __sizedataList;	/* sequence of elements <dataList> */
	class ns1__abxSchedulerTask **dataList;	/* required element of type ns1:abxSchedulerTask */
public:
	virtual int soap_type() const { return 250; } /* = unique id SOAP_TYPE_ns1__abxSchedulerTaskList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxSchedulerTaskList() { ns1__abxSchedulerTaskList::soap_default(NULL); }
	virtual ~ns1__abxSchedulerTaskList() { }
};
#endif

#ifndef SOAP_TYPE__ns1__abxSchedulerTask_abxSchedule
#define SOAP_TYPE__ns1__abxSchedulerTask_abxSchedule (1146)
/* ns1:abxSchedulerTask-abxSchedule */
class SOAP_CMAC _ns1__abxSchedulerTask_abxSchedule
{
public:
	char *id;	/* required element of type xsd:string */
	char *startDate;	/* required element of type xsd:string */
	int recurence;	/* required element of type xsd:int */
	bool isOneTime;	/* required element of type xsd:boolean */
	char *daysOfTheWeek;	/* required element of type xsd:string */
	char *months;	/* required element of type xsd:string */
	char *daysOfTheMonth;	/* required element of type xsd:string */
	int status;	/* required element of type xsd:int */
	int type;	/* required element of type xsd:int */
	char *lastRun;	/* required element of type xsd:string */
	char *option;	/* required element of type xsd:string */
	char *audit_USCOREmessage_USCOREcode_USCOREid;	/* optional element of type xsd:string */
	char *optional_USCOREmessage;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 1146; } /* = unique id SOAP_TYPE__ns1__abxSchedulerTask_abxSchedule */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__abxSchedulerTask_abxSchedule() { _ns1__abxSchedulerTask_abxSchedule::soap_default(NULL); }
	virtual ~_ns1__abxSchedulerTask_abxSchedule() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxSchedulerTask
#define SOAP_TYPE_ns1__abxSchedulerTask (251)
/* ns1:abxSchedulerTask */
class SOAP_CMAC ns1__abxSchedulerTask : public xsd__anyType
{
public:
	int __sizeabxSchedule;	/* sequence of elements <abxSchedule> */
	_ns1__abxSchedulerTask_abxSchedule *abxSchedule;	/* required element of type ns1:abxSchedulerTask-abxSchedule */
	char *name;	/* required element of type xsd:string */
	char *description;	/* required element of type xsd:string */
	char *type;	/* required element of type xsd:string */
	char *configXML;	/* required element of type xsd:string */
	char *id;	/* required element of type xsd:string */
	char *appTaskId;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 251; } /* = unique id SOAP_TYPE_ns1__abxSchedulerTask */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxSchedulerTask() { ns1__abxSchedulerTask::soap_default(NULL); }
	virtual ~ns1__abxSchedulerTask() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ModifyField
#define SOAP_TYPE_ns1__ModifyField (252)
/* ns1:ModifyField */
class SOAP_CMAC ns1__ModifyField : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	ns1__abxField *Field2Update;	/* optional element of type ns1:abxField */
	class ns1__abxCombo *recordsArray;	/* optional element of type ns1:abxCombo */
	ns1__abxFK *fk;	/* optional element of type ns1:abxFK */
	bool optionGetCache;	/* required element of type xsd:boolean */
	bool optionSetDesc;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 252; } /* = unique id SOAP_TYPE_ns1__ModifyField */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ModifyField() { ns1__ModifyField::soap_default(NULL); }
	virtual ~ns1__ModifyField() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxCombo
#define SOAP_TYPE_ns1__abxCombo (253)
/* ns1:abxCombo */
class SOAP_CMAC ns1__abxCombo : public xsd__anyType
{
public:
	int __sizelistRecords;	/* sequence of elements <listRecords> */
	class ns1__abxComboRecord **listRecords;	/* required element of type ns1:abxComboRecord */
public:
	virtual int soap_type() const { return 253; } /* = unique id SOAP_TYPE_ns1__abxCombo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxCombo() { ns1__abxCombo::soap_default(NULL); }
	virtual ~ns1__abxCombo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxComboRecord
#define SOAP_TYPE_ns1__abxComboRecord (254)
/* ns1:abxComboRecord */
class SOAP_CMAC ns1__abxComboRecord : public xsd__anyType
{
public:
	char *idRecord;	/* required element of type xsd:string */
	char *fieldTypeId;	/* required element of type xsd:string */
	char *description;	/* required element of type xsd:string */
	bool default_;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 254; } /* = unique id SOAP_TYPE_ns1__abxComboRecord */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxComboRecord() { ns1__abxComboRecord::soap_default(NULL); }
	virtual ~ns1__abxComboRecord() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ModifyFieldResponse
#define SOAP_TYPE_ns1__ModifyFieldResponse (255)
/* ns1:ModifyFieldResponse */
class SOAP_CMAC ns1__ModifyFieldResponse : public xsd__anyType
{
public:
	ns1__abxFieldResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFieldResult */
public:
	virtual int soap_type() const { return 255; } /* = unique id SOAP_TYPE_ns1__ModifyFieldResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ModifyFieldResponse() { ns1__ModifyFieldResponse::soap_default(NULL); }
	virtual ~ns1__ModifyFieldResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ExistUserByUsername
#define SOAP_TYPE_ns1__ExistUserByUsername (256)
/* ns1:ExistUserByUsername */
class SOAP_CMAC ns1__ExistUserByUsername : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *username;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 256; } /* = unique id SOAP_TYPE_ns1__ExistUserByUsername */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ExistUserByUsername() { ns1__ExistUserByUsername::soap_default(NULL); }
	virtual ~ns1__ExistUserByUsername() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ExistUserByUsernameResponse
#define SOAP_TYPE_ns1__ExistUserByUsernameResponse (257)
/* ns1:ExistUserByUsernameResponse */
class SOAP_CMAC ns1__ExistUserByUsernameResponse : public xsd__anyType
{
public:
	ns1__abxUserListResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxUserListResult */
public:
	virtual int soap_type() const { return 257; } /* = unique id SOAP_TYPE_ns1__ExistUserByUsernameResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ExistUserByUsernameResponse() { ns1__ExistUserByUsernameResponse::soap_default(NULL); }
	virtual ~ns1__ExistUserByUsernameResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetDownloadDetailByContId
#define SOAP_TYPE_ns1__GetDownloadDetailByContId (258)
/* ns1:GetDownloadDetailByContId */
class SOAP_CMAC ns1__GetDownloadDetailByContId : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 258; } /* = unique id SOAP_TYPE_ns1__GetDownloadDetailByContId */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetDownloadDetailByContId() { ns1__GetDownloadDetailByContId::soap_default(NULL); }
	virtual ~ns1__GetDownloadDetailByContId() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetDownloadDetailByContIdResponse
#define SOAP_TYPE_ns1__GetDownloadDetailByContIdResponse (259)
/* ns1:GetDownloadDetailByContIdResponse */
class SOAP_CMAC ns1__GetDownloadDetailByContIdResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 259; } /* = unique id SOAP_TYPE_ns1__GetDownloadDetailByContIdResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetDownloadDetailByContIdResponse() { ns1__GetDownloadDetailByContIdResponse::soap_default(NULL); }
	virtual ~ns1__GetDownloadDetailByContIdResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CreateSDKTaskFieldMapping
#define SOAP_TYPE_ns1__CreateSDKTaskFieldMapping (260)
/* ns1:CreateSDKTaskFieldMapping */
class SOAP_CMAC ns1__CreateSDKTaskFieldMapping : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	ns1__abxSDKTask *sdkTask;	/* optional element of type ns1:abxSDKTask */
public:
	virtual int soap_type() const { return 260; } /* = unique id SOAP_TYPE_ns1__CreateSDKTaskFieldMapping */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CreateSDKTaskFieldMapping() { ns1__CreateSDKTaskFieldMapping::soap_default(NULL); }
	virtual ~ns1__CreateSDKTaskFieldMapping() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CreateSDKTaskFieldMappingResponse
#define SOAP_TYPE_ns1__CreateSDKTaskFieldMappingResponse (261)
/* ns1:CreateSDKTaskFieldMappingResponse */
class SOAP_CMAC ns1__CreateSDKTaskFieldMappingResponse : public xsd__anyType
{
public:
	ns1__abxSDKResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxSDKResult */
public:
	virtual int soap_type() const { return 261; } /* = unique id SOAP_TYPE_ns1__CreateSDKTaskFieldMappingResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CreateSDKTaskFieldMappingResponse() { ns1__CreateSDKTaskFieldMappingResponse::soap_default(NULL); }
	virtual ~ns1__CreateSDKTaskFieldMappingResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetUserListActiveDirectory
#define SOAP_TYPE_ns1__GetUserListActiveDirectory (262)
/* ns1:GetUserListActiveDirectory */
class SOAP_CMAC ns1__GetUserListActiveDirectory : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	ns1__abxUser *userField;	/* optional element of type ns1:abxUser */
public:
	virtual int soap_type() const { return 262; } /* = unique id SOAP_TYPE_ns1__GetUserListActiveDirectory */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetUserListActiveDirectory() { ns1__GetUserListActiveDirectory::soap_default(NULL); }
	virtual ~ns1__GetUserListActiveDirectory() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetUserListActiveDirectoryResponse
#define SOAP_TYPE_ns1__GetUserListActiveDirectoryResponse (263)
/* ns1:GetUserListActiveDirectoryResponse */
class SOAP_CMAC ns1__GetUserListActiveDirectoryResponse : public xsd__anyType
{
public:
	ns1__abxUserListResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxUserListResult */
public:
	virtual int soap_type() const { return 263; } /* = unique id SOAP_TYPE_ns1__GetUserListActiveDirectoryResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetUserListActiveDirectoryResponse() { ns1__GetUserListActiveDirectoryResponse::soap_default(NULL); }
	virtual ~ns1__GetUserListActiveDirectoryResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RegenerateDynOrg
#define SOAP_TYPE_ns1__RegenerateDynOrg (264)
/* ns1:RegenerateDynOrg */
class SOAP_CMAC ns1__RegenerateDynOrg : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	ns3__abxDynamicorgRuleList *DynorgParam;	/* optional element of type ns3:abxDynamicorgRuleList */
public:
	virtual int soap_type() const { return 264; } /* = unique id SOAP_TYPE_ns1__RegenerateDynOrg */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RegenerateDynOrg() { ns1__RegenerateDynOrg::soap_default(NULL); }
	virtual ~ns1__RegenerateDynOrg() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RegenerateDynOrgResponse
#define SOAP_TYPE_ns1__RegenerateDynOrgResponse (265)
/* ns1:RegenerateDynOrgResponse */
class SOAP_CMAC ns1__RegenerateDynOrgResponse : public xsd__anyType
{
public:
	ns3__abxDynamicRuleResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns3:abxDynamicRuleResult */
public:
	virtual int soap_type() const { return 265; } /* = unique id SOAP_TYPE_ns1__RegenerateDynOrgResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RegenerateDynOrgResponse() { ns1__RegenerateDynOrgResponse::soap_default(NULL); }
	virtual ~ns1__RegenerateDynOrgResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetSchedulerTaskByTaskTypeId
#define SOAP_TYPE_ns1__GetSchedulerTaskByTaskTypeId (266)
/* ns1:GetSchedulerTaskByTaskTypeId */
class SOAP_CMAC ns1__GetSchedulerTaskByTaskTypeId : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *taskType;	/* optional element of type xsd:string */
	char *taskTypeId;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 266; } /* = unique id SOAP_TYPE_ns1__GetSchedulerTaskByTaskTypeId */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetSchedulerTaskByTaskTypeId() { ns1__GetSchedulerTaskByTaskTypeId::soap_default(NULL); }
	virtual ~ns1__GetSchedulerTaskByTaskTypeId() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetSchedulerTaskByTaskTypeIdResponse
#define SOAP_TYPE_ns1__GetSchedulerTaskByTaskTypeIdResponse (267)
/* ns1:GetSchedulerTaskByTaskTypeIdResponse */
class SOAP_CMAC ns1__GetSchedulerTaskByTaskTypeIdResponse : public xsd__anyType
{
public:
	ns1__abxSchedulerResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxSchedulerResult */
public:
	virtual int soap_type() const { return 267; } /* = unique id SOAP_TYPE_ns1__GetSchedulerTaskByTaskTypeIdResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetSchedulerTaskByTaskTypeIdResponse() { ns1__GetSchedulerTaskByTaskTypeIdResponse::soap_default(NULL); }
	virtual ~ns1__GetSchedulerTaskByTaskTypeIdResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DownloadUSGetChunk
#define SOAP_TYPE_ns1__DownloadUSGetChunk (268)
/* ns1:DownloadUSGetChunk */
class SOAP_CMAC ns1__DownloadUSGetChunk : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *fileCode;	/* optional element of type xsd:string */
	char *dChunk;	/* optional element of type xsd:string */
	char *oset;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 268; } /* = unique id SOAP_TYPE_ns1__DownloadUSGetChunk */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DownloadUSGetChunk() { ns1__DownloadUSGetChunk::soap_default(NULL); }
	virtual ~ns1__DownloadUSGetChunk() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DownloadUSGetChunkResponse
#define SOAP_TYPE_ns1__DownloadUSGetChunkResponse (269)
/* ns1:DownloadUSGetChunkResponse */
class SOAP_CMAC ns1__DownloadUSGetChunkResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 269; } /* = unique id SOAP_TYPE_ns1__DownloadUSGetChunkResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DownloadUSGetChunkResponse() { ns1__DownloadUSGetChunkResponse::soap_default(NULL); }
	virtual ~ns1__DownloadUSGetChunkResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetProtocolByNameDesc
#define SOAP_TYPE_ns1__GetProtocolByNameDesc (270)
/* ns1:GetProtocolByNameDesc */
class SOAP_CMAC ns1__GetProtocolByNameDesc : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *protocolDesc;	/* optional element of type xsd:string */
	char *protocolName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 270; } /* = unique id SOAP_TYPE_ns1__GetProtocolByNameDesc */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetProtocolByNameDesc() { ns1__GetProtocolByNameDesc::soap_default(NULL); }
	virtual ~ns1__GetProtocolByNameDesc() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetProtocolByNameDescResponse
#define SOAP_TYPE_ns1__GetProtocolByNameDescResponse (271)
/* ns1:GetProtocolByNameDescResponse */
class SOAP_CMAC ns1__GetProtocolByNameDescResponse : public xsd__anyType
{
public:
	ns2__abxProtocolResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns2:abxProtocolResult */
public:
	virtual int soap_type() const { return 271; } /* = unique id SOAP_TYPE_ns1__GetProtocolByNameDescResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetProtocolByNameDescResponse() { ns1__GetProtocolByNameDescResponse::soap_default(NULL); }
	virtual ~ns1__GetProtocolByNameDescResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetDynorgTypeList
#define SOAP_TYPE_ns1__GetDynorgTypeList (272)
/* ns1:GetDynorgTypeList */
class SOAP_CMAC ns1__GetDynorgTypeList : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
public:
	virtual int soap_type() const { return 272; } /* = unique id SOAP_TYPE_ns1__GetDynorgTypeList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetDynorgTypeList() { ns1__GetDynorgTypeList::soap_default(NULL); }
	virtual ~ns1__GetDynorgTypeList() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetDynorgTypeListResponse
#define SOAP_TYPE_ns1__GetDynorgTypeListResponse (273)
/* ns1:GetDynorgTypeListResponse */
class SOAP_CMAC ns1__GetDynorgTypeListResponse : public xsd__anyType
{
public:
	ns3__abxDynorgTypeResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns3:abxDynorgTypeResult */
public:
	virtual int soap_type() const { return 273; } /* = unique id SOAP_TYPE_ns1__GetDynorgTypeListResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetDynorgTypeListResponse() { ns1__GetDynorgTypeListResponse::soap_default(NULL); }
	virtual ~ns1__GetDynorgTypeListResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__canDeleteRaccoglitore
#define SOAP_TYPE_ns1__canDeleteRaccoglitore (274)
/* ns1:canDeleteRaccoglitore */
class SOAP_CMAC ns1__canDeleteRaccoglitore : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *TemplateName;	/* optional element of type xsd:string */
	char *ContainerName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 274; } /* = unique id SOAP_TYPE_ns1__canDeleteRaccoglitore */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__canDeleteRaccoglitore() { ns1__canDeleteRaccoglitore::soap_default(NULL); }
	virtual ~ns1__canDeleteRaccoglitore() { }
};
#endif

#ifndef SOAP_TYPE_ns1__canDeleteRaccoglitoreResponse
#define SOAP_TYPE_ns1__canDeleteRaccoglitoreResponse (275)
/* ns1:canDeleteRaccoglitoreResponse */
class SOAP_CMAC ns1__canDeleteRaccoglitoreResponse : public xsd__anyType
{
public:
	ns4__abxCan *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns4:abxCan */
public:
	virtual int soap_type() const { return 275; } /* = unique id SOAP_TYPE_ns1__canDeleteRaccoglitoreResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__canDeleteRaccoglitoreResponse() { ns1__canDeleteRaccoglitoreResponse::soap_default(NULL); }
	virtual ~ns1__canDeleteRaccoglitoreResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetTemplateList
#define SOAP_TYPE_ns1__GetTemplateList (276)
/* ns1:GetTemplateList */
class SOAP_CMAC ns1__GetTemplateList : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
public:
	virtual int soap_type() const { return 276; } /* = unique id SOAP_TYPE_ns1__GetTemplateList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetTemplateList() { ns1__GetTemplateList::soap_default(NULL); }
	virtual ~ns1__GetTemplateList() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetTemplateListResponse
#define SOAP_TYPE_ns1__GetTemplateListResponse (277)
/* ns1:GetTemplateListResponse */
class SOAP_CMAC ns1__GetTemplateListResponse : public xsd__anyType
{
public:
	ns1__abxTemplateResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxTemplateResult */
public:
	virtual int soap_type() const { return 277; } /* = unique id SOAP_TYPE_ns1__GetTemplateListResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetTemplateListResponse() { ns1__GetTemplateListResponse::soap_default(NULL); }
	virtual ~ns1__GetTemplateListResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UploadUSSendChunk
#define SOAP_TYPE_ns1__UploadUSSendChunk (278)
/* ns1:UploadUSSendChunk */
class SOAP_CMAC ns1__UploadUSSendChunk : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *fileCode;	/* optional element of type xsd:string */
	xsd__base64Binary *objName;	/* optional element of type xsd:base64Binary */
public:
	virtual int soap_type() const { return 278; } /* = unique id SOAP_TYPE_ns1__UploadUSSendChunk */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UploadUSSendChunk() { ns1__UploadUSSendChunk::soap_default(NULL); }
	virtual ~ns1__UploadUSSendChunk() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UploadUSSendChunkResponse
#define SOAP_TYPE_ns1__UploadUSSendChunkResponse (279)
/* ns1:UploadUSSendChunkResponse */
class SOAP_CMAC ns1__UploadUSSendChunkResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 279; } /* = unique id SOAP_TYPE_ns1__UploadUSSendChunkResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UploadUSSendChunkResponse() { ns1__UploadUSSendChunkResponse::soap_default(NULL); }
	virtual ~ns1__UploadUSSendChunkResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetInstanceNameFromLinks
#define SOAP_TYPE_ns1__GetInstanceNameFromLinks (280)
/* ns1:GetInstanceNameFromLinks */
class SOAP_CMAC ns1__GetInstanceNameFromLinks : public xsd__anyType
{
public:
	ns1__IDtype *IDtype_USCORESessionId;	/* optional element of type ns1:IDtype */
	char *instanceNameFrom;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 280; } /* = unique id SOAP_TYPE_ns1__GetInstanceNameFromLinks */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetInstanceNameFromLinks() { ns1__GetInstanceNameFromLinks::soap_default(NULL); }
	virtual ~ns1__GetInstanceNameFromLinks() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetInstanceNameFromLinksResponse
#define SOAP_TYPE_ns1__GetInstanceNameFromLinksResponse (281)
/* ns1:GetInstanceNameFromLinksResponse */
class SOAP_CMAC ns1__GetInstanceNameFromLinksResponse : public xsd__anyType
{
public:
	ns1__abxLinkResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxLinkResult */
public:
	virtual int soap_type() const { return 281; } /* = unique id SOAP_TYPE_ns1__GetInstanceNameFromLinksResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetInstanceNameFromLinksResponse() { ns1__GetInstanceNameFromLinksResponse::soap_default(NULL); }
	virtual ~ns1__GetInstanceNameFromLinksResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetTreeForSecurity
#define SOAP_TYPE_ns1__GetTreeForSecurity (282)
/* ns1:GetTreeForSecurity */
class SOAP_CMAC ns1__GetTreeForSecurity : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	class ns1__abxTreeParam *param;	/* optional element of type ns1:abxTreeParam */
public:
	virtual int soap_type() const { return 282; } /* = unique id SOAP_TYPE_ns1__GetTreeForSecurity */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetTreeForSecurity() { ns1__GetTreeForSecurity::soap_default(NULL); }
	virtual ~ns1__GetTreeForSecurity() { }
};
#endif

#ifndef SOAP_TYPE__ns1__abxTreeParam_objvect
#define SOAP_TYPE__ns1__abxTreeParam_objvect (1154)
/* ns1:abxTreeParam-objvect */
class SOAP_CMAC _ns1__abxTreeParam_objvect
{
public:
	char *objname;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1154; } /* = unique id SOAP_TYPE__ns1__abxTreeParam_objvect */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__abxTreeParam_objvect() { _ns1__abxTreeParam_objvect::soap_default(NULL); }
	virtual ~_ns1__abxTreeParam_objvect() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxTreeParam
#define SOAP_TYPE_ns1__abxTreeParam (283)
/* ns1:abxTreeParam */
class SOAP_CMAC ns1__abxTreeParam : public xsd__anyType
{
public:
	int revisionID;	/* required element of type xsd:int */
	char *treeStartHexInstanceID;	/* required element of type xsd:string */
	char *treeStartInstancePathname;	/* required element of type xsd:string */
	int treeDeepLevelNumberDown;	/* required element of type xsd:int */
	int treeNumberElementsDown;	/* required element of type xsd:int */
	int __sizeobjvect;	/* sequence of elements <objvect> */
	_ns1__abxTreeParam_objvect *objvect;	/* required element of type ns1:abxTreeParam-objvect */
public:
	virtual int soap_type() const { return 283; } /* = unique id SOAP_TYPE_ns1__abxTreeParam */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxTreeParam() { ns1__abxTreeParam::soap_default(NULL); }
	virtual ~ns1__abxTreeParam() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetTreeForSecurityResponse
#define SOAP_TYPE_ns1__GetTreeForSecurityResponse (284)
/* ns1:GetTreeForSecurityResponse */
class SOAP_CMAC ns1__GetTreeForSecurityResponse : public xsd__anyType
{
public:
	class ns1__abxTreeResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxTreeResult */
public:
	virtual int soap_type() const { return 284; } /* = unique id SOAP_TYPE_ns1__GetTreeForSecurityResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetTreeForSecurityResponse() { ns1__GetTreeForSecurityResponse::soap_default(NULL); }
	virtual ~ns1__GetTreeForSecurityResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxTreeResult
#define SOAP_TYPE_ns1__abxTreeResult (285)
/* ns1:abxTreeResult */
class SOAP_CMAC ns1__abxTreeResult : public xsd__anyType
{
public:
	unsigned int result;	/* required element of type xsd:unsignedInt */
	class ns1__abxTree *tree;	/* required element of type ns1:abxTree */
public:
	virtual int soap_type() const { return 285; } /* = unique id SOAP_TYPE_ns1__abxTreeResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxTreeResult() { ns1__abxTreeResult::soap_default(NULL); }
	virtual ~ns1__abxTreeResult() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxTree
#define SOAP_TYPE_ns1__abxTree (286)
/* ns1:abxTree */
class SOAP_CMAC ns1__abxTree : public xsd__anyType
{
public:
	ns1__abxTreeParam *queryParam;	/* required element of type ns1:abxTreeParam */
	class ns1__abxTreeElement *tree;	/* required element of type ns1:abxTreeElement */
public:
	virtual int soap_type() const { return 286; } /* = unique id SOAP_TYPE_ns1__abxTree */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxTree() { ns1__abxTree::soap_default(NULL); }
	virtual ~ns1__abxTree() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxTreeElement
#define SOAP_TYPE_ns1__abxTreeElement (287)
/* ns1:abxTreeElement */
class SOAP_CMAC ns1__abxTreeElement : public xsd__anyType
{
public:
	char *instanceName;	/* required element of type xsd:string */
	char *HexInstanceID;	/* required element of type xsd:string */
	char *InstanceDescription;	/* required element of type xsd:string */
	char *objName;	/* required element of type xsd:string */
	time_t creationTimestamp;	/* required element of type xsd:dateTime */
	int revisionID;	/* required element of type xsd:int */
	bool isLastRevision;	/* required element of type xsd:boolean */
	bool disableRevision;	/* required element of type xsd:boolean */
	int __sizesubelements;	/* sequence of elements <subelements> */
	ns1__abxTreeElement **subelements;	/* required element of type ns1:abxTreeElement */
	bool dataAvailable;	/* required element of type xsd:boolean */
	char *templateName;	/* required element of type xsd:string */
	bool hideContainer;	/* required element of type xsd:boolean */
	char *colorDisplay;	/* required element of type xsd:string */
	ns1__abxContainer *containerDetails;	/* required element of type ns1:abxContainer */
	ns1__abxTemplate *templateDetails;	/* required element of type ns1:abxTemplate */
	ns1__abxPermission *permission;	/* required element of type ns1:abxPermission */
	ns1__abxAllPermission *allPermission;	/* required element of type ns1:abxAllPermission */
	char *countDocument;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 287; } /* = unique id SOAP_TYPE_ns1__abxTreeElement */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxTreeElement() { ns1__abxTreeElement::soap_default(NULL); }
	virtual ~ns1__abxTreeElement() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Logout
#define SOAP_TYPE_ns1__Logout (288)
/* ns1:Logout */
class SOAP_CMAC ns1__Logout : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
public:
	virtual int soap_type() const { return 288; } /* = unique id SOAP_TYPE_ns1__Logout */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Logout() { ns1__Logout::soap_default(NULL); }
	virtual ~ns1__Logout() { }
};
#endif

#ifndef SOAP_TYPE_ns1__LogoutResponse
#define SOAP_TYPE_ns1__LogoutResponse (289)
/* ns1:LogoutResponse */
class SOAP_CMAC ns1__LogoutResponse : public xsd__anyType
{
public:
	ns1__abxLoginResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxLoginResult */
public:
	virtual int soap_type() const { return 289; } /* = unique id SOAP_TYPE_ns1__LogoutResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__LogoutResponse() { ns1__LogoutResponse::soap_default(NULL); }
	virtual ~ns1__LogoutResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteGroup
#define SOAP_TYPE_ns1__DeleteGroup (290)
/* ns1:DeleteGroup */
class SOAP_CMAC ns1__DeleteGroup : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *name;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 290; } /* = unique id SOAP_TYPE_ns1__DeleteGroup */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteGroup() { ns1__DeleteGroup::soap_default(NULL); }
	virtual ~ns1__DeleteGroup() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteGroupResponse
#define SOAP_TYPE_ns1__DeleteGroupResponse (291)
/* ns1:DeleteGroupResponse */
class SOAP_CMAC ns1__DeleteGroupResponse : public xsd__anyType
{
public:
	class ns1__abxGroupResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxGroupResult */
public:
	virtual int soap_type() const { return 291; } /* = unique id SOAP_TYPE_ns1__DeleteGroupResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteGroupResponse() { ns1__DeleteGroupResponse::soap_default(NULL); }
	virtual ~ns1__DeleteGroupResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxGroupResult
#define SOAP_TYPE_ns1__abxGroupResult (292)
/* ns1:abxGroupResult */
class SOAP_CMAC ns1__abxGroupResult : public xsd__anyType
{
public:
	unsigned int result;	/* required element of type xsd:unsignedInt */
	ns1__abxGroupList *list;	/* required element of type ns1:abxGroupList */
public:
	virtual int soap_type() const { return 292; } /* = unique id SOAP_TYPE_ns1__abxGroupResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxGroupResult() { ns1__abxGroupResult::soap_default(NULL); }
	virtual ~ns1__abxGroupResult() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetFileListByCodeForSecurity
#define SOAP_TYPE_ns1__GetFileListByCodeForSecurity (293)
/* ns1:GetFileListByCodeForSecurity */
class SOAP_CMAC ns1__GetFileListByCodeForSecurity : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
	char *fileCode;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 293; } /* = unique id SOAP_TYPE_ns1__GetFileListByCodeForSecurity */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetFileListByCodeForSecurity() { ns1__GetFileListByCodeForSecurity::soap_default(NULL); }
	virtual ~ns1__GetFileListByCodeForSecurity() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetFileListByCodeForSecurityResponse
#define SOAP_TYPE_ns1__GetFileListByCodeForSecurityResponse (294)
/* ns1:GetFileListByCodeForSecurityResponse */
class SOAP_CMAC ns1__GetFileListByCodeForSecurityResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 294; } /* = unique id SOAP_TYPE_ns1__GetFileListByCodeForSecurityResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetFileListByCodeForSecurityResponse() { ns1__GetFileListByCodeForSecurityResponse::soap_default(NULL); }
	virtual ~ns1__GetFileListByCodeForSecurityResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SetFileAvailable
#define SOAP_TYPE_ns1__SetFileAvailable (295)
/* ns1:SetFileAvailable */
class SOAP_CMAC ns1__SetFileAvailable : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
	char *fileCode;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 295; } /* = unique id SOAP_TYPE_ns1__SetFileAvailable */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SetFileAvailable() { ns1__SetFileAvailable::soap_default(NULL); }
	virtual ~ns1__SetFileAvailable() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SetFileAvailableResponse
#define SOAP_TYPE_ns1__SetFileAvailableResponse (296)
/* ns1:SetFileAvailableResponse */
class SOAP_CMAC ns1__SetFileAvailableResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 296; } /* = unique id SOAP_TYPE_ns1__SetFileAvailableResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SetFileAvailableResponse() { ns1__SetFileAvailableResponse::soap_default(NULL); }
	virtual ~ns1__SetFileAvailableResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Fk_USCOREgetCountAllRecord
#define SOAP_TYPE_ns1__Fk_USCOREgetCountAllRecord (297)
/* ns1:Fk_getCountAllRecord */
class SOAP_CMAC ns1__Fk_USCOREgetCountAllRecord : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	ns1__abxFK *fk;	/* optional element of type ns1:abxFK */
	char *InstanceName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 297; } /* = unique id SOAP_TYPE_ns1__Fk_USCOREgetCountAllRecord */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Fk_USCOREgetCountAllRecord() { ns1__Fk_USCOREgetCountAllRecord::soap_default(NULL); }
	virtual ~ns1__Fk_USCOREgetCountAllRecord() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Fk_USCOREgetCountAllRecordResponse
#define SOAP_TYPE_ns1__Fk_USCOREgetCountAllRecordResponse (298)
/* ns1:Fk_getCountAllRecordResponse */
class SOAP_CMAC ns1__Fk_USCOREgetCountAllRecordResponse : public xsd__anyType
{
public:
	ns1__abxFKResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFKResult */
public:
	virtual int soap_type() const { return 298; } /* = unique id SOAP_TYPE_ns1__Fk_USCOREgetCountAllRecordResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Fk_USCOREgetCountAllRecordResponse() { ns1__Fk_USCOREgetCountAllRecordResponse::soap_default(NULL); }
	virtual ~ns1__Fk_USCOREgetCountAllRecordResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetExpression
#define SOAP_TYPE_ns1__GetExpression (299)
/* ns1:GetExpression */
class SOAP_CMAC ns1__GetExpression : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
	char *expressionName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 299; } /* = unique id SOAP_TYPE_ns1__GetExpression */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetExpression() { ns1__GetExpression::soap_default(NULL); }
	virtual ~ns1__GetExpression() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetExpressionResponse
#define SOAP_TYPE_ns1__GetExpressionResponse (300)
/* ns1:GetExpressionResponse */
class SOAP_CMAC ns1__GetExpressionResponse : public xsd__anyType
{
public:
	ns1__abxExpressionResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxExpressionResult */
public:
	virtual int soap_type() const { return 300; } /* = unique id SOAP_TYPE_ns1__GetExpressionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetExpressionResponse() { ns1__GetExpressionResponse::soap_default(NULL); }
	virtual ~ns1__GetExpressionResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteField
#define SOAP_TYPE_ns1__DeleteField (301)
/* ns1:DeleteField */
class SOAP_CMAC ns1__DeleteField : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *FieldName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 301; } /* = unique id SOAP_TYPE_ns1__DeleteField */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteField() { ns1__DeleteField::soap_default(NULL); }
	virtual ~ns1__DeleteField() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteFieldResponse
#define SOAP_TYPE_ns1__DeleteFieldResponse (302)
/* ns1:DeleteFieldResponse */
class SOAP_CMAC ns1__DeleteFieldResponse : public xsd__anyType
{
public:
	int return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 302; } /* = unique id SOAP_TYPE_ns1__DeleteFieldResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteFieldResponse() { ns1__DeleteFieldResponse::soap_default(NULL); }
	virtual ~ns1__DeleteFieldResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetSDKTasks
#define SOAP_TYPE_ns1__GetSDKTasks (303)
/* ns1:GetSDKTasks */
class SOAP_CMAC ns1__GetSDKTasks : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
public:
	virtual int soap_type() const { return 303; } /* = unique id SOAP_TYPE_ns1__GetSDKTasks */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetSDKTasks() { ns1__GetSDKTasks::soap_default(NULL); }
	virtual ~ns1__GetSDKTasks() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetSDKTasksResponse
#define SOAP_TYPE_ns1__GetSDKTasksResponse (304)
/* ns1:GetSDKTasksResponse */
class SOAP_CMAC ns1__GetSDKTasksResponse : public xsd__anyType
{
public:
	ns1__abxSDKResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxSDKResult */
public:
	virtual int soap_type() const { return 304; } /* = unique id SOAP_TYPE_ns1__GetSDKTasksResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetSDKTasksResponse() { ns1__GetSDKTasksResponse::soap_default(NULL); }
	virtual ~ns1__GetSDKTasksResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetContSignByUser
#define SOAP_TYPE_ns1__GetContSignByUser (305)
/* ns1:GetContSignByUser */
class SOAP_CMAC ns1__GetContSignByUser : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
	char *userName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 305; } /* = unique id SOAP_TYPE_ns1__GetContSignByUser */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetContSignByUser() { ns1__GetContSignByUser::soap_default(NULL); }
	virtual ~ns1__GetContSignByUser() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetContSignByUserResponse
#define SOAP_TYPE_ns1__GetContSignByUserResponse (306)
/* ns1:GetContSignByUserResponse */
class SOAP_CMAC ns1__GetContSignByUserResponse : public xsd__anyType
{
public:
	ns1__abxWorkflowResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxWorkflowResult */
public:
	virtual int soap_type() const { return 306; } /* = unique id SOAP_TYPE_ns1__GetContSignByUserResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetContSignByUserResponse() { ns1__GetContSignByUserResponse::soap_default(NULL); }
	virtual ~ns1__GetContSignByUserResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Fk_USCOREcreate
#define SOAP_TYPE_ns1__Fk_USCOREcreate (307)
/* ns1:Fk_create */
class SOAP_CMAC ns1__Fk_USCOREcreate : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *fieldName;	/* optional element of type xsd:string */
	ns1__abxFK *fkp;	/* optional element of type ns1:abxFK */
	bool optionGetCache;	/* required element of type xsd:boolean */
	bool optionSetDesc;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 307; } /* = unique id SOAP_TYPE_ns1__Fk_USCOREcreate */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Fk_USCOREcreate() { ns1__Fk_USCOREcreate::soap_default(NULL); }
	virtual ~ns1__Fk_USCOREcreate() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Fk_USCOREcreateResponse
#define SOAP_TYPE_ns1__Fk_USCOREcreateResponse (308)
/* ns1:Fk_createResponse */
class SOAP_CMAC ns1__Fk_USCOREcreateResponse : public xsd__anyType
{
public:
	ns1__abxFKResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFKResult */
public:
	virtual int soap_type() const { return 308; } /* = unique id SOAP_TYPE_ns1__Fk_USCOREcreateResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Fk_USCOREcreateResponse() { ns1__Fk_USCOREcreateResponse::soap_default(NULL); }
	virtual ~ns1__Fk_USCOREcreateResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Fk_USCOREgetColumnsName
#define SOAP_TYPE_ns1__Fk_USCOREgetColumnsName (309)
/* ns1:Fk_getColumnsName */
class SOAP_CMAC ns1__Fk_USCOREgetColumnsName : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	ns1__abxFK *fk;	/* optional element of type ns1:abxFK */
public:
	virtual int soap_type() const { return 309; } /* = unique id SOAP_TYPE_ns1__Fk_USCOREgetColumnsName */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Fk_USCOREgetColumnsName() { ns1__Fk_USCOREgetColumnsName::soap_default(NULL); }
	virtual ~ns1__Fk_USCOREgetColumnsName() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Fk_USCOREgetColumnsNameResponse
#define SOAP_TYPE_ns1__Fk_USCOREgetColumnsNameResponse (310)
/* ns1:Fk_getColumnsNameResponse */
class SOAP_CMAC ns1__Fk_USCOREgetColumnsNameResponse : public xsd__anyType
{
public:
	ns1__abxFKResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFKResult */
public:
	virtual int soap_type() const { return 310; } /* = unique id SOAP_TYPE_ns1__Fk_USCOREgetColumnsNameResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Fk_USCOREgetColumnsNameResponse() { ns1__Fk_USCOREgetColumnsNameResponse::soap_default(NULL); }
	virtual ~ns1__Fk_USCOREgetColumnsNameResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InsertFileContainer
#define SOAP_TYPE_ns1__InsertFileContainer (311)
/* ns1:InsertFileContainer */
class SOAP_CMAC ns1__InsertFileContainer : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
	char *objName;	/* optional element of type xsd:string */
	ns1__abxFileList *dataListInput;	/* optional element of type ns1:abxFileList */
public:
	virtual int soap_type() const { return 311; } /* = unique id SOAP_TYPE_ns1__InsertFileContainer */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InsertFileContainer() { ns1__InsertFileContainer::soap_default(NULL); }
	virtual ~ns1__InsertFileContainer() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InsertFileContainerResponse
#define SOAP_TYPE_ns1__InsertFileContainerResponse (312)
/* ns1:InsertFileContainerResponse */
class SOAP_CMAC ns1__InsertFileContainerResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 312; } /* = unique id SOAP_TYPE_ns1__InsertFileContainerResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InsertFileContainerResponse() { ns1__InsertFileContainerResponse::soap_default(NULL); }
	virtual ~ns1__InsertFileContainerResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetContainerLinks
#define SOAP_TYPE_ns1__GetContainerLinks (313)
/* ns1:GetContainerLinks */
class SOAP_CMAC ns1__GetContainerLinks : public xsd__anyType
{
public:
	ns1__IDtype *IDtype_USCORESessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
	char *linkTypeName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 313; } /* = unique id SOAP_TYPE_ns1__GetContainerLinks */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetContainerLinks() { ns1__GetContainerLinks::soap_default(NULL); }
	virtual ~ns1__GetContainerLinks() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetContainerLinksResponse
#define SOAP_TYPE_ns1__GetContainerLinksResponse (314)
/* ns1:GetContainerLinksResponse */
class SOAP_CMAC ns1__GetContainerLinksResponse : public xsd__anyType
{
public:
	ns1__abxLinkResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxLinkResult */
public:
	virtual int soap_type() const { return 314; } /* = unique id SOAP_TYPE_ns1__GetContainerLinksResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetContainerLinksResponse() { ns1__GetContainerLinksResponse::soap_default(NULL); }
	virtual ~ns1__GetContainerLinksResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteTPFileById
#define SOAP_TYPE_ns1__DeleteTPFileById (315)
/* ns1:DeleteTPFileById */
class SOAP_CMAC ns1__DeleteTPFileById : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *fileId;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 315; } /* = unique id SOAP_TYPE_ns1__DeleteTPFileById */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteTPFileById() { ns1__DeleteTPFileById::soap_default(NULL); }
	virtual ~ns1__DeleteTPFileById() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteTPFileByIdResponse
#define SOAP_TYPE_ns1__DeleteTPFileByIdResponse (316)
/* ns1:DeleteTPFileByIdResponse */
class SOAP_CMAC ns1__DeleteTPFileByIdResponse : public xsd__anyType
{
public:
	ns1__abxFileTpResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileTpResult */
public:
	virtual int soap_type() const { return 316; } /* = unique id SOAP_TYPE_ns1__DeleteTPFileByIdResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteTPFileByIdResponse() { ns1__DeleteTPFileByIdResponse::soap_default(NULL); }
	virtual ~ns1__DeleteTPFileByIdResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__canDeleteContainer
#define SOAP_TYPE_ns1__canDeleteContainer (317)
/* ns1:canDeleteContainer */
class SOAP_CMAC ns1__canDeleteContainer : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *ContainerName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 317; } /* = unique id SOAP_TYPE_ns1__canDeleteContainer */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__canDeleteContainer() { ns1__canDeleteContainer::soap_default(NULL); }
	virtual ~ns1__canDeleteContainer() { }
};
#endif

#ifndef SOAP_TYPE_ns1__canDeleteContainerResponse
#define SOAP_TYPE_ns1__canDeleteContainerResponse (318)
/* ns1:canDeleteContainerResponse */
class SOAP_CMAC ns1__canDeleteContainerResponse : public xsd__anyType
{
public:
	ns4__abxCan *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns4:abxCan */
public:
	virtual int soap_type() const { return 318; } /* = unique id SOAP_TYPE_ns1__canDeleteContainerResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__canDeleteContainerResponse() { ns1__canDeleteContainerResponse::soap_default(NULL); }
	virtual ~ns1__canDeleteContainerResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__IfFileExist
#define SOAP_TYPE_ns1__IfFileExist (319)
/* ns1:IfFileExist */
class SOAP_CMAC ns1__IfFileExist : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *pathfilename;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 319; } /* = unique id SOAP_TYPE_ns1__IfFileExist */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__IfFileExist() { ns1__IfFileExist::soap_default(NULL); }
	virtual ~ns1__IfFileExist() { }
};
#endif

#ifndef SOAP_TYPE_ns1__IfFileExistResponse
#define SOAP_TYPE_ns1__IfFileExistResponse (320)
/* ns1:IfFileExistResponse */
class SOAP_CMAC ns1__IfFileExistResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 320; } /* = unique id SOAP_TYPE_ns1__IfFileExistResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__IfFileExistResponse() { ns1__IfFileExistResponse::soap_default(NULL); }
	virtual ~ns1__IfFileExistResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DownloadTPFile
#define SOAP_TYPE_ns1__DownloadTPFile (321)
/* ns1:DownloadTPFile */
class SOAP_CMAC ns1__DownloadTPFile : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *attachmentId;	/* optional element of type xsd:string */
	char *dChunk;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 321; } /* = unique id SOAP_TYPE_ns1__DownloadTPFile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DownloadTPFile() { ns1__DownloadTPFile::soap_default(NULL); }
	virtual ~ns1__DownloadTPFile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DownloadTPFileResponse
#define SOAP_TYPE_ns1__DownloadTPFileResponse (322)
/* ns1:DownloadTPFileResponse */
class SOAP_CMAC ns1__DownloadTPFileResponse : public xsd__anyType
{
public:
	ns1__abxFileTpResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileTpResult */
public:
	virtual int soap_type() const { return 322; } /* = unique id SOAP_TYPE_ns1__DownloadTPFileResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DownloadTPFileResponse() { ns1__DownloadTPFileResponse::soap_default(NULL); }
	virtual ~ns1__DownloadTPFileResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SetInstanceReplication
#define SOAP_TYPE_ns1__SetInstanceReplication (323)
/* ns1:SetInstanceReplication */
class SOAP_CMAC ns1__SetInstanceReplication : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
	class ns1__abxReplicationList *replicationList;	/* optional element of type ns1:abxReplicationList */
public:
	virtual int soap_type() const { return 323; } /* = unique id SOAP_TYPE_ns1__SetInstanceReplication */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SetInstanceReplication() { ns1__SetInstanceReplication::soap_default(NULL); }
	virtual ~ns1__SetInstanceReplication() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxReplicationList
#define SOAP_TYPE_ns1__abxReplicationList (324)
/* ns1:abxReplicationList */
class SOAP_CMAC ns1__abxReplicationList : public xsd__anyType
{
public:
	int __sizedataList;	/* sequence of elements <dataList> */
	class ns1__abxArchiBoxInDomain **dataList;	/* required element of type ns1:abxArchiBoxInDomain */
public:
	virtual int soap_type() const { return 324; } /* = unique id SOAP_TYPE_ns1__abxReplicationList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxReplicationList() { ns1__abxReplicationList::soap_default(NULL); }
	virtual ~ns1__abxReplicationList() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxArchiBoxInDomain
#define SOAP_TYPE_ns1__abxArchiBoxInDomain (325)
/* ns1:abxArchiBoxInDomain */
class SOAP_CMAC ns1__abxArchiBoxInDomain : public xsd__anyType
{
public:
	LONG64 abxId;	/* required element of type xsd:long */
	LONG64 domainId;	/* required element of type xsd:long */
	char *matricola;	/* required element of type xsd:string */
	char *description;	/* required element of type xsd:string */
	char *ipAddress;	/* required element of type xsd:string */
	char *location;	/* required element of type xsd:string */
	char *release;	/* required element of type xsd:string */
	int serverId;	/* required element of type xsd:int */
	char *status;	/* required element of type xsd:string */
	int requestId;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 325; } /* = unique id SOAP_TYPE_ns1__abxArchiBoxInDomain */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxArchiBoxInDomain() { ns1__abxArchiBoxInDomain::soap_default(NULL); }
	virtual ~ns1__abxArchiBoxInDomain() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SetInstanceReplicationResponse
#define SOAP_TYPE_ns1__SetInstanceReplicationResponse (326)
/* ns1:SetInstanceReplicationResponse */
class SOAP_CMAC ns1__SetInstanceReplicationResponse : public xsd__anyType
{
public:
	class ns1__abxReplicationResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxReplicationResult */
public:
	virtual int soap_type() const { return 326; } /* = unique id SOAP_TYPE_ns1__SetInstanceReplicationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SetInstanceReplicationResponse() { ns1__SetInstanceReplicationResponse::soap_default(NULL); }
	virtual ~ns1__SetInstanceReplicationResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxReplicationResult
#define SOAP_TYPE_ns1__abxReplicationResult (327)
/* ns1:abxReplicationResult */
class SOAP_CMAC ns1__abxReplicationResult : public xsd__anyType
{
public:
	unsigned int result;	/* required element of type xsd:unsignedInt */
	ns1__abxReplicationList *list;	/* required element of type ns1:abxReplicationList */
public:
	virtual int soap_type() const { return 327; } /* = unique id SOAP_TYPE_ns1__abxReplicationResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxReplicationResult() { ns1__abxReplicationResult::soap_default(NULL); }
	virtual ~ns1__abxReplicationResult() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Fk_USCOREgetRemoteTableList
#define SOAP_TYPE_ns1__Fk_USCOREgetRemoteTableList (328)
/* ns1:Fk_getRemoteTableList */
class SOAP_CMAC ns1__Fk_USCOREgetRemoteTableList : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *host;	/* optional element of type xsd:string */
	char *user;	/* optional element of type xsd:string */
	char *pwd;	/* optional element of type xsd:string */
	char *dbType;	/* optional element of type xsd:string */
	char *databaseName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 328; } /* = unique id SOAP_TYPE_ns1__Fk_USCOREgetRemoteTableList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Fk_USCOREgetRemoteTableList() { ns1__Fk_USCOREgetRemoteTableList::soap_default(NULL); }
	virtual ~ns1__Fk_USCOREgetRemoteTableList() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Fk_USCOREgetRemoteTableListResponse
#define SOAP_TYPE_ns1__Fk_USCOREgetRemoteTableListResponse (329)
/* ns1:Fk_getRemoteTableListResponse */
class SOAP_CMAC ns1__Fk_USCOREgetRemoteTableListResponse : public xsd__anyType
{
public:
	ns1__abxFKResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFKResult */
public:
	virtual int soap_type() const { return 329; } /* = unique id SOAP_TYPE_ns1__Fk_USCOREgetRemoteTableListResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Fk_USCOREgetRemoteTableListResponse() { ns1__Fk_USCOREgetRemoteTableListResponse::soap_default(NULL); }
	virtual ~ns1__Fk_USCOREgetRemoteTableListResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetDataFileListOnlyLastVersion
#define SOAP_TYPE_ns1__GetDataFileListOnlyLastVersion (330)
/* ns1:GetDataFileListOnlyLastVersion */
class SOAP_CMAC ns1__GetDataFileListOnlyLastVersion : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
	char *dataId;	/* optional element of type xsd:string */
	bool *getLinkedFiles;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 330; } /* = unique id SOAP_TYPE_ns1__GetDataFileListOnlyLastVersion */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetDataFileListOnlyLastVersion() { ns1__GetDataFileListOnlyLastVersion::soap_default(NULL); }
	virtual ~ns1__GetDataFileListOnlyLastVersion() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetDataFileListOnlyLastVersionResponse
#define SOAP_TYPE_ns1__GetDataFileListOnlyLastVersionResponse (331)
/* ns1:GetDataFileListOnlyLastVersionResponse */
class SOAP_CMAC ns1__GetDataFileListOnlyLastVersionResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 331; } /* = unique id SOAP_TYPE_ns1__GetDataFileListOnlyLastVersionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetDataFileListOnlyLastVersionResponse() { ns1__GetDataFileListOnlyLastVersionResponse::soap_default(NULL); }
	virtual ~ns1__GetDataFileListOnlyLastVersionResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DelMarker
#define SOAP_TYPE_ns1__DelMarker (332)
/* ns1:DelMarker */
class SOAP_CMAC ns1__DelMarker : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *marker;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 332; } /* = unique id SOAP_TYPE_ns1__DelMarker */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DelMarker() { ns1__DelMarker::soap_default(NULL); }
	virtual ~ns1__DelMarker() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DelMarkerResponse
#define SOAP_TYPE_ns1__DelMarkerResponse (333)
/* ns1:DelMarkerResponse */
class SOAP_CMAC ns1__DelMarkerResponse : public xsd__anyType
{
public:
	ns1__abxWorkflowResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxWorkflowResult */
public:
	virtual int soap_type() const { return 333; } /* = unique id SOAP_TYPE_ns1__DelMarkerResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DelMarkerResponse() { ns1__DelMarkerResponse::soap_default(NULL); }
	virtual ~ns1__DelMarkerResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ModDefaultProcess
#define SOAP_TYPE_ns1__ModDefaultProcess (334)
/* ns1:ModDefaultProcess */
class SOAP_CMAC ns1__ModDefaultProcess : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	ns1__abxWorkflow *aw;	/* optional element of type ns1:abxWorkflow */
public:
	virtual int soap_type() const { return 334; } /* = unique id SOAP_TYPE_ns1__ModDefaultProcess */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ModDefaultProcess() { ns1__ModDefaultProcess::soap_default(NULL); }
	virtual ~ns1__ModDefaultProcess() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ModDefaultProcessResponse
#define SOAP_TYPE_ns1__ModDefaultProcessResponse (335)
/* ns1:ModDefaultProcessResponse */
class SOAP_CMAC ns1__ModDefaultProcessResponse : public xsd__anyType
{
public:
	ns1__abxWorkflowResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxWorkflowResult */
public:
	virtual int soap_type() const { return 335; } /* = unique id SOAP_TYPE_ns1__ModDefaultProcessResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ModDefaultProcessResponse() { ns1__ModDefaultProcessResponse::soap_default(NULL); }
	virtual ~ns1__ModDefaultProcessResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__canModifyTemplate
#define SOAP_TYPE_ns1__canModifyTemplate (336)
/* ns1:canModifyTemplate */
class SOAP_CMAC ns1__canModifyTemplate : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *Template2Update;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 336; } /* = unique id SOAP_TYPE_ns1__canModifyTemplate */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__canModifyTemplate() { ns1__canModifyTemplate::soap_default(NULL); }
	virtual ~ns1__canModifyTemplate() { }
};
#endif

#ifndef SOAP_TYPE_ns1__canModifyTemplateResponse
#define SOAP_TYPE_ns1__canModifyTemplateResponse (337)
/* ns1:canModifyTemplateResponse */
class SOAP_CMAC ns1__canModifyTemplateResponse : public xsd__anyType
{
public:
	ns4__abxCan *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns4:abxCan */
public:
	virtual int soap_type() const { return 337; } /* = unique id SOAP_TYPE_ns1__canModifyTemplateResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__canModifyTemplateResponse() { ns1__canModifyTemplateResponse::soap_default(NULL); }
	virtual ~ns1__canModifyTemplateResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetSDKRules
#define SOAP_TYPE_ns1__GetSDKRules (338)
/* ns1:GetSDKRules */
class SOAP_CMAC ns1__GetSDKRules : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
public:
	virtual int soap_type() const { return 338; } /* = unique id SOAP_TYPE_ns1__GetSDKRules */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetSDKRules() { ns1__GetSDKRules::soap_default(NULL); }
	virtual ~ns1__GetSDKRules() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetSDKRulesResponse
#define SOAP_TYPE_ns1__GetSDKRulesResponse (339)
/* ns1:GetSDKRulesResponse */
class SOAP_CMAC ns1__GetSDKRulesResponse : public xsd__anyType
{
public:
	ns1__abxSDKResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxSDKResult */
public:
	virtual int soap_type() const { return 339; } /* = unique id SOAP_TYPE_ns1__GetSDKRulesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetSDKRulesResponse() { ns1__GetSDKRulesResponse::soap_default(NULL); }
	virtual ~ns1__GetSDKRulesResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetTranslationByRangeLabelCode
#define SOAP_TYPE_ns1__GetTranslationByRangeLabelCode (340)
/* ns1:GetTranslationByRangeLabelCode */
class SOAP_CMAC ns1__GetTranslationByRangeLabelCode : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *exLabelCodeFrom;	/* optional element of type xsd:string */
	char *exLabelCodeTo;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 340; } /* = unique id SOAP_TYPE_ns1__GetTranslationByRangeLabelCode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetTranslationByRangeLabelCode() { ns1__GetTranslationByRangeLabelCode::soap_default(NULL); }
	virtual ~ns1__GetTranslationByRangeLabelCode() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetTranslationByRangeLabelCodeResponse
#define SOAP_TYPE_ns1__GetTranslationByRangeLabelCodeResponse (341)
/* ns1:GetTranslationByRangeLabelCodeResponse */
class SOAP_CMAC ns1__GetTranslationByRangeLabelCodeResponse : public xsd__anyType
{
public:
	class ns1__abxTranslationResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxTranslationResult */
public:
	virtual int soap_type() const { return 341; } /* = unique id SOAP_TYPE_ns1__GetTranslationByRangeLabelCodeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetTranslationByRangeLabelCodeResponse() { ns1__GetTranslationByRangeLabelCodeResponse::soap_default(NULL); }
	virtual ~ns1__GetTranslationByRangeLabelCodeResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxTranslationResult
#define SOAP_TYPE_ns1__abxTranslationResult (342)
/* ns1:abxTranslationResult */
class SOAP_CMAC ns1__abxTranslationResult : public xsd__anyType
{
public:
	unsigned int result;	/* required element of type xsd:unsignedInt */
	class ns1__abxTranslationList *list;	/* required element of type ns1:abxTranslationList */
public:
	virtual int soap_type() const { return 342; } /* = unique id SOAP_TYPE_ns1__abxTranslationResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxTranslationResult() { ns1__abxTranslationResult::soap_default(NULL); }
	virtual ~ns1__abxTranslationResult() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxTranslationList
#define SOAP_TYPE_ns1__abxTranslationList (343)
/* ns1:abxTranslationList */
class SOAP_CMAC ns1__abxTranslationList : public xsd__anyType
{
public:
	int __sizedataList;	/* sequence of elements <dataList> */
	ns1__abxTranslation **dataList;	/* required element of type ns1:abxTranslation */
public:
	virtual int soap_type() const { return 343; } /* = unique id SOAP_TYPE_ns1__abxTranslationList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxTranslationList() { ns1__abxTranslationList::soap_default(NULL); }
	virtual ~ns1__abxTranslationList() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetCountDocumentLinks
#define SOAP_TYPE_ns1__GetCountDocumentLinks (344)
/* ns1:GetCountDocumentLinks */
class SOAP_CMAC ns1__GetCountDocumentLinks : public xsd__anyType
{
public:
	ns1__IDtype *IDtype_USCORESessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
	char *dataId;	/* optional element of type xsd:string */
	char *linkTypeName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 344; } /* = unique id SOAP_TYPE_ns1__GetCountDocumentLinks */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetCountDocumentLinks() { ns1__GetCountDocumentLinks::soap_default(NULL); }
	virtual ~ns1__GetCountDocumentLinks() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetCountDocumentLinksResponse
#define SOAP_TYPE_ns1__GetCountDocumentLinksResponse (345)
/* ns1:GetCountDocumentLinksResponse */
class SOAP_CMAC ns1__GetCountDocumentLinksResponse : public xsd__anyType
{
public:
	ns1__abxLinkResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxLinkResult */
public:
	virtual int soap_type() const { return 345; } /* = unique id SOAP_TYPE_ns1__GetCountDocumentLinksResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetCountDocumentLinksResponse() { ns1__GetCountDocumentLinksResponse::soap_default(NULL); }
	virtual ~ns1__GetCountDocumentLinksResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteFileContainer
#define SOAP_TYPE_ns1__DeleteFileContainer (346)
/* ns1:DeleteFileContainer */
class SOAP_CMAC ns1__DeleteFileContainer : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
	char *objName;	/* optional element of type xsd:string */
	char *fileCode;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 346; } /* = unique id SOAP_TYPE_ns1__DeleteFileContainer */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteFileContainer() { ns1__DeleteFileContainer::soap_default(NULL); }
	virtual ~ns1__DeleteFileContainer() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteFileContainerResponse
#define SOAP_TYPE_ns1__DeleteFileContainerResponse (347)
/* ns1:DeleteFileContainerResponse */
class SOAP_CMAC ns1__DeleteFileContainerResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 347; } /* = unique id SOAP_TYPE_ns1__DeleteFileContainerResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteFileContainerResponse() { ns1__DeleteFileContainerResponse::soap_default(NULL); }
	virtual ~ns1__DeleteFileContainerResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Ping
#define SOAP_TYPE_ns1__Ping (348)
/* ns1:Ping */
class SOAP_CMAC ns1__Ping : public xsd__anyType
{
public:
	char *In;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 348; } /* = unique id SOAP_TYPE_ns1__Ping */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Ping() { ns1__Ping::soap_default(NULL); }
	virtual ~ns1__Ping() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PingResponse
#define SOAP_TYPE_ns1__PingResponse (349)
/* ns1:PingResponse */
class SOAP_CMAC ns1__PingResponse : public xsd__anyType
{
public:
	class ns1__AbxPingResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:AbxPingResult */
public:
	virtual int soap_type() const { return 349; } /* = unique id SOAP_TYPE_ns1__PingResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PingResponse() { ns1__PingResponse::soap_default(NULL); }
	virtual ~ns1__PingResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AbxPingResult
#define SOAP_TYPE_ns1__AbxPingResult (350)
/* ns1:AbxPingResult */
class SOAP_CMAC ns1__AbxPingResult : public xsd__anyType
{
public:
	unsigned int result;	/* required element of type xsd:unsignedInt */
	char *value;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 350; } /* = unique id SOAP_TYPE_ns1__AbxPingResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AbxPingResult() { ns1__AbxPingResult::soap_default(NULL); }
	virtual ~ns1__AbxPingResult() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetUploadDetailByFilecode
#define SOAP_TYPE_ns1__GetUploadDetailByFilecode (351)
/* ns1:GetUploadDetailByFilecode */
class SOAP_CMAC ns1__GetUploadDetailByFilecode : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *fileCode;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 351; } /* = unique id SOAP_TYPE_ns1__GetUploadDetailByFilecode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetUploadDetailByFilecode() { ns1__GetUploadDetailByFilecode::soap_default(NULL); }
	virtual ~ns1__GetUploadDetailByFilecode() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetUploadDetailByFilecodeResponse
#define SOAP_TYPE_ns1__GetUploadDetailByFilecodeResponse (352)
/* ns1:GetUploadDetailByFilecodeResponse */
class SOAP_CMAC ns1__GetUploadDetailByFilecodeResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 352; } /* = unique id SOAP_TYPE_ns1__GetUploadDetailByFilecodeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetUploadDetailByFilecodeResponse() { ns1__GetUploadDetailByFilecodeResponse::soap_default(NULL); }
	virtual ~ns1__GetUploadDetailByFilecodeResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CanAddNewYear
#define SOAP_TYPE_ns1__CanAddNewYear (353)
/* ns1:CanAddNewYear */
class SOAP_CMAC ns1__CanAddNewYear : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	ns2__abxProtocol *protocolData;	/* optional element of type ns2:abxProtocol */
public:
	virtual int soap_type() const { return 353; } /* = unique id SOAP_TYPE_ns1__CanAddNewYear */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CanAddNewYear() { ns1__CanAddNewYear::soap_default(NULL); }
	virtual ~ns1__CanAddNewYear() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CanAddNewYearResponse
#define SOAP_TYPE_ns1__CanAddNewYearResponse (354)
/* ns1:CanAddNewYearResponse */
class SOAP_CMAC ns1__CanAddNewYearResponse : public xsd__anyType
{
public:
	ns4__abxCan *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns4:abxCan */
public:
	virtual int soap_type() const { return 354; } /* = unique id SOAP_TYPE_ns1__CanAddNewYearResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CanAddNewYearResponse() { ns1__CanAddNewYearResponse::soap_default(NULL); }
	virtual ~ns1__CanAddNewYearResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InsertUser
#define SOAP_TYPE_ns1__InsertUser (355)
/* ns1:InsertUser */
class SOAP_CMAC ns1__InsertUser : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	ns1__abxUser *user;	/* optional element of type ns1:abxUser */
public:
	virtual int soap_type() const { return 355; } /* = unique id SOAP_TYPE_ns1__InsertUser */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InsertUser() { ns1__InsertUser::soap_default(NULL); }
	virtual ~ns1__InsertUser() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InsertUserResponse
#define SOAP_TYPE_ns1__InsertUserResponse (356)
/* ns1:InsertUserResponse */
class SOAP_CMAC ns1__InsertUserResponse : public xsd__anyType
{
public:
	ns1__abxUserListResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxUserListResult */
public:
	virtual int soap_type() const { return 356; } /* = unique id SOAP_TYPE_ns1__InsertUserResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InsertUserResponse() { ns1__InsertUserResponse::soap_default(NULL); }
	virtual ~ns1__InsertUserResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetDataUSFileListByUsername
#define SOAP_TYPE_ns1__GetDataUSFileListByUsername (357)
/* ns1:GetDataUSFileListByUsername */
class SOAP_CMAC ns1__GetDataUSFileListByUsername : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *username;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 357; } /* = unique id SOAP_TYPE_ns1__GetDataUSFileListByUsername */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetDataUSFileListByUsername() { ns1__GetDataUSFileListByUsername::soap_default(NULL); }
	virtual ~ns1__GetDataUSFileListByUsername() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetDataUSFileListByUsernameResponse
#define SOAP_TYPE_ns1__GetDataUSFileListByUsernameResponse (358)
/* ns1:GetDataUSFileListByUsernameResponse */
class SOAP_CMAC ns1__GetDataUSFileListByUsernameResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 358; } /* = unique id SOAP_TYPE_ns1__GetDataUSFileListByUsernameResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetDataUSFileListByUsernameResponse() { ns1__GetDataUSFileListByUsernameResponse::soap_default(NULL); }
	virtual ~ns1__GetDataUSFileListByUsernameResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__canModifyField
#define SOAP_TYPE_ns1__canModifyField (359)
/* ns1:canModifyField */
class SOAP_CMAC ns1__canModifyField : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *FieldName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 359; } /* = unique id SOAP_TYPE_ns1__canModifyField */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__canModifyField() { ns1__canModifyField::soap_default(NULL); }
	virtual ~ns1__canModifyField() { }
};
#endif

#ifndef SOAP_TYPE_ns1__canModifyFieldResponse
#define SOAP_TYPE_ns1__canModifyFieldResponse (360)
/* ns1:canModifyFieldResponse */
class SOAP_CMAC ns1__canModifyFieldResponse : public xsd__anyType
{
public:
	ns4__abxCan *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns4:abxCan */
public:
	virtual int soap_type() const { return 360; } /* = unique id SOAP_TYPE_ns1__canModifyFieldResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__canModifyFieldResponse() { ns1__canModifyFieldResponse::soap_default(NULL); }
	virtual ~ns1__canModifyFieldResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ModifyFilter
#define SOAP_TYPE_ns1__ModifyFilter (361)
/* ns1:ModifyFilter */
class SOAP_CMAC ns1__ModifyFilter : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	class ns1__AbxFilter *filter;	/* optional element of type ns1:AbxFilter */
public:
	virtual int soap_type() const { return 361; } /* = unique id SOAP_TYPE_ns1__ModifyFilter */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ModifyFilter() { ns1__ModifyFilter::soap_default(NULL); }
	virtual ~ns1__ModifyFilter() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AbxFilter
#define SOAP_TYPE_ns1__AbxFilter (362)
/* ns1:AbxFilter */
class SOAP_CMAC ns1__AbxFilter : public xsd__anyType
{
public:
	char *instance_USCOREname;	/* required element of type xsd:string */
	char *group_USCOREname;	/* required element of type xsd:string */
	char *field_USCOREname;	/* required element of type xsd:string */
	char *field_USCOREvalue;	/* required element of type xsd:string */
	char *filter_USCOREname;	/* required element of type xsd:string */
	char *instance_USCOREdescription;	/* required element of type xsd:string */
	char *field_USCOREdescription;	/* required element of type xsd:string */
	char *field_USCOREvalue_USCOREdescription;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 362; } /* = unique id SOAP_TYPE_ns1__AbxFilter */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AbxFilter() { ns1__AbxFilter::soap_default(NULL); }
	virtual ~ns1__AbxFilter() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ModifyFilterResponse
#define SOAP_TYPE_ns1__ModifyFilterResponse (363)
/* ns1:ModifyFilterResponse */
class SOAP_CMAC ns1__ModifyFilterResponse : public xsd__anyType
{
public:
	class ns1__AbxFilterResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:AbxFilterResult */
public:
	virtual int soap_type() const { return 363; } /* = unique id SOAP_TYPE_ns1__ModifyFilterResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ModifyFilterResponse() { ns1__ModifyFilterResponse::soap_default(NULL); }
	virtual ~ns1__ModifyFilterResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AbxFilterResult
#define SOAP_TYPE_ns1__AbxFilterResult (364)
/* ns1:AbxFilterResult */
class SOAP_CMAC ns1__AbxFilterResult : public xsd__anyType
{
public:
	unsigned int result;	/* required element of type xsd:unsignedInt */
	class ns1__AbxFilterList *list;	/* required element of type ns1:AbxFilterList */
public:
	virtual int soap_type() const { return 364; } /* = unique id SOAP_TYPE_ns1__AbxFilterResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AbxFilterResult() { ns1__AbxFilterResult::soap_default(NULL); }
	virtual ~ns1__AbxFilterResult() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AbxFilterList
#define SOAP_TYPE_ns1__AbxFilterList (365)
/* ns1:AbxFilterList */
class SOAP_CMAC ns1__AbxFilterList : public xsd__anyType
{
public:
	int __sizedataList;	/* sequence of elements <dataList> */
	ns1__AbxFilter **dataList;	/* required element of type ns1:AbxFilter */
public:
	virtual int soap_type() const { return 365; } /* = unique id SOAP_TYPE_ns1__AbxFilterList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AbxFilterList() { ns1__AbxFilterList::soap_default(NULL); }
	virtual ~ns1__AbxFilterList() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InsertGroup
#define SOAP_TYPE_ns1__InsertGroup (366)
/* ns1:InsertGroup */
class SOAP_CMAC ns1__InsertGroup : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	ns1__abxGroup *group;	/* optional element of type ns1:abxGroup */
public:
	virtual int soap_type() const { return 366; } /* = unique id SOAP_TYPE_ns1__InsertGroup */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InsertGroup() { ns1__InsertGroup::soap_default(NULL); }
	virtual ~ns1__InsertGroup() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InsertGroupResponse
#define SOAP_TYPE_ns1__InsertGroupResponse (367)
/* ns1:InsertGroupResponse */
class SOAP_CMAC ns1__InsertGroupResponse : public xsd__anyType
{
public:
	ns1__abxGroupResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxGroupResult */
public:
	virtual int soap_type() const { return 367; } /* = unique id SOAP_TYPE_ns1__InsertGroupResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InsertGroupResponse() { ns1__InsertGroupResponse::soap_default(NULL); }
	virtual ~ns1__InsertGroupResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetProtocolById
#define SOAP_TYPE_ns1__GetProtocolById (368)
/* ns1:GetProtocolById */
class SOAP_CMAC ns1__GetProtocolById : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *protocolId;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 368; } /* = unique id SOAP_TYPE_ns1__GetProtocolById */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetProtocolById() { ns1__GetProtocolById::soap_default(NULL); }
	virtual ~ns1__GetProtocolById() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetProtocolByIdResponse
#define SOAP_TYPE_ns1__GetProtocolByIdResponse (369)
/* ns1:GetProtocolByIdResponse */
class SOAP_CMAC ns1__GetProtocolByIdResponse : public xsd__anyType
{
public:
	ns2__abxProtocolResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns2:abxProtocolResult */
public:
	virtual int soap_type() const { return 369; } /* = unique id SOAP_TYPE_ns1__GetProtocolByIdResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetProtocolByIdResponse() { ns1__GetProtocolByIdResponse::soap_default(NULL); }
	virtual ~ns1__GetProtocolByIdResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetData
#define SOAP_TYPE_ns1__GetData (370)
/* ns1:GetData */
class SOAP_CMAC ns1__GetData : public xsd__anyType
{
public:
	ns1__IDtype *IDtype_USCORESessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 370; } /* = unique id SOAP_TYPE_ns1__GetData */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetData() { ns1__GetData::soap_default(NULL); }
	virtual ~ns1__GetData() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetDataResponse
#define SOAP_TYPE_ns1__GetDataResponse (371)
/* ns1:GetDataResponse */
class SOAP_CMAC ns1__GetDataResponse : public xsd__anyType
{
public:
	ns1__abxDataResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxDataResult */
public:
	virtual int soap_type() const { return 371; } /* = unique id SOAP_TYPE_ns1__GetDataResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetDataResponse() { ns1__GetDataResponse::soap_default(NULL); }
	virtual ~ns1__GetDataResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__canDeleteField
#define SOAP_TYPE_ns1__canDeleteField (372)
/* ns1:canDeleteField */
class SOAP_CMAC ns1__canDeleteField : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *FieldName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 372; } /* = unique id SOAP_TYPE_ns1__canDeleteField */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__canDeleteField() { ns1__canDeleteField::soap_default(NULL); }
	virtual ~ns1__canDeleteField() { }
};
#endif

#ifndef SOAP_TYPE_ns1__canDeleteFieldResponse
#define SOAP_TYPE_ns1__canDeleteFieldResponse (373)
/* ns1:canDeleteFieldResponse */
class SOAP_CMAC ns1__canDeleteFieldResponse : public xsd__anyType
{
public:
	ns4__abxCan *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns4:abxCan */
public:
	virtual int soap_type() const { return 373; } /* = unique id SOAP_TYPE_ns1__canDeleteFieldResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__canDeleteFieldResponse() { ns1__canDeleteFieldResponse::soap_default(NULL); }
	virtual ~ns1__canDeleteFieldResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AddDefaultProcess
#define SOAP_TYPE_ns1__AddDefaultProcess (374)
/* ns1:AddDefaultProcess */
class SOAP_CMAC ns1__AddDefaultProcess : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	ns1__abxWorkflow *aw;	/* optional element of type ns1:abxWorkflow */
public:
	virtual int soap_type() const { return 374; } /* = unique id SOAP_TYPE_ns1__AddDefaultProcess */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AddDefaultProcess() { ns1__AddDefaultProcess::soap_default(NULL); }
	virtual ~ns1__AddDefaultProcess() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AddDefaultProcessResponse
#define SOAP_TYPE_ns1__AddDefaultProcessResponse (375)
/* ns1:AddDefaultProcessResponse */
class SOAP_CMAC ns1__AddDefaultProcessResponse : public xsd__anyType
{
public:
	ns1__abxWorkflowResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxWorkflowResult */
public:
	virtual int soap_type() const { return 375; } /* = unique id SOAP_TYPE_ns1__AddDefaultProcessResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AddDefaultProcessResponse() { ns1__AddDefaultProcessResponse::soap_default(NULL); }
	virtual ~ns1__AddDefaultProcessResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ValidateSession
#define SOAP_TYPE_ns1__ValidateSession (376)
/* ns1:ValidateSession */
class SOAP_CMAC ns1__ValidateSession : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
public:
	virtual int soap_type() const { return 376; } /* = unique id SOAP_TYPE_ns1__ValidateSession */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ValidateSession() { ns1__ValidateSession::soap_default(NULL); }
	virtual ~ns1__ValidateSession() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ValidateSessionResponse
#define SOAP_TYPE_ns1__ValidateSessionResponse (377)
/* ns1:ValidateSessionResponse */
class SOAP_CMAC ns1__ValidateSessionResponse : public xsd__anyType
{
public:
	ns1__abxLoginResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxLoginResult */
public:
	virtual int soap_type() const { return 377; } /* = unique id SOAP_TYPE_ns1__ValidateSessionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ValidateSessionResponse() { ns1__ValidateSessionResponse::soap_default(NULL); }
	virtual ~ns1__ValidateSessionResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Fk_USCOREgetCountAllRecordByDesc
#define SOAP_TYPE_ns1__Fk_USCOREgetCountAllRecordByDesc (378)
/* ns1:Fk_getCountAllRecordByDesc */
class SOAP_CMAC ns1__Fk_USCOREgetCountAllRecordByDesc : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	ns1__abxFK *fk;	/* optional element of type ns1:abxFK */
	char *InstanceName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 378; } /* = unique id SOAP_TYPE_ns1__Fk_USCOREgetCountAllRecordByDesc */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Fk_USCOREgetCountAllRecordByDesc() { ns1__Fk_USCOREgetCountAllRecordByDesc::soap_default(NULL); }
	virtual ~ns1__Fk_USCOREgetCountAllRecordByDesc() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Fk_USCOREgetCountAllRecordByDescResponse
#define SOAP_TYPE_ns1__Fk_USCOREgetCountAllRecordByDescResponse (379)
/* ns1:Fk_getCountAllRecordByDescResponse */
class SOAP_CMAC ns1__Fk_USCOREgetCountAllRecordByDescResponse : public xsd__anyType
{
public:
	ns1__abxFKResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFKResult */
public:
	virtual int soap_type() const { return 379; } /* = unique id SOAP_TYPE_ns1__Fk_USCOREgetCountAllRecordByDescResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Fk_USCOREgetCountAllRecordByDescResponse() { ns1__Fk_USCOREgetCountAllRecordByDescResponse::soap_default(NULL); }
	virtual ~ns1__Fk_USCOREgetCountAllRecordByDescResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__SchedulerTaskScheduleProcessed_schedule
#define SOAP_TYPE__ns1__SchedulerTaskScheduleProcessed_schedule (1174)
/* ns1:SchedulerTaskScheduleProcessed-schedule */
class SOAP_CMAC _ns1__SchedulerTaskScheduleProcessed_schedule
{
public:
	char *id;	/* required element of type xsd:string */
	char *startDate;	/* required element of type xsd:string */
	int recurence;	/* required element of type xsd:int */
	bool isOneTime;	/* required element of type xsd:boolean */
	char *daysOfTheWeek;	/* required element of type xsd:string */
	char *months;	/* required element of type xsd:string */
	char *daysOfTheMonth;	/* required element of type xsd:string */
	int status;	/* required element of type xsd:int */
	int type;	/* required element of type xsd:int */
	char *lastRun;	/* required element of type xsd:string */
	char *option;	/* required element of type xsd:string */
	char *audit_USCOREmessage_USCOREcode_USCOREid;	/* optional element of type xsd:string */
	char *optional_USCOREmessage;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 1174; } /* = unique id SOAP_TYPE__ns1__SchedulerTaskScheduleProcessed_schedule */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__SchedulerTaskScheduleProcessed_schedule() { _ns1__SchedulerTaskScheduleProcessed_schedule::soap_default(NULL); }
	virtual ~_ns1__SchedulerTaskScheduleProcessed_schedule() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SchedulerTaskScheduleProcessed
#define SOAP_TYPE_ns1__SchedulerTaskScheduleProcessed (380)
/* ns1:SchedulerTaskScheduleProcessed */
class SOAP_CMAC ns1__SchedulerTaskScheduleProcessed : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	_ns1__SchedulerTaskScheduleProcessed_schedule *schedule;	/* optional element of type ns1:SchedulerTaskScheduleProcessed-schedule */
public:
	virtual int soap_type() const { return 380; } /* = unique id SOAP_TYPE_ns1__SchedulerTaskScheduleProcessed */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SchedulerTaskScheduleProcessed() { ns1__SchedulerTaskScheduleProcessed::soap_default(NULL); }
	virtual ~ns1__SchedulerTaskScheduleProcessed() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SchedulerTaskScheduleProcessedResponse
#define SOAP_TYPE_ns1__SchedulerTaskScheduleProcessedResponse (381)
/* ns1:SchedulerTaskScheduleProcessedResponse */
class SOAP_CMAC ns1__SchedulerTaskScheduleProcessedResponse : public xsd__anyType
{
public:
	ns1__abxSchedulerResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxSchedulerResult */
public:
	virtual int soap_type() const { return 381; } /* = unique id SOAP_TYPE_ns1__SchedulerTaskScheduleProcessedResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SchedulerTaskScheduleProcessedResponse() { ns1__SchedulerTaskScheduleProcessedResponse::soap_default(NULL); }
	virtual ~ns1__SchedulerTaskScheduleProcessedResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DownloadWFFile
#define SOAP_TYPE_ns1__DownloadWFFile (382)
/* ns1:DownloadWFFile */
class SOAP_CMAC ns1__DownloadWFFile : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *attachmentId;	/* optional element of type xsd:string */
	char *dChunk;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 382; } /* = unique id SOAP_TYPE_ns1__DownloadWFFile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DownloadWFFile() { ns1__DownloadWFFile::soap_default(NULL); }
	virtual ~ns1__DownloadWFFile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DownloadWFFileResponse
#define SOAP_TYPE_ns1__DownloadWFFileResponse (383)
/* ns1:DownloadWFFileResponse */
class SOAP_CMAC ns1__DownloadWFFileResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 383; } /* = unique id SOAP_TYPE_ns1__DownloadWFFileResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DownloadWFFileResponse() { ns1__DownloadWFFileResponse::soap_default(NULL); }
	virtual ~ns1__DownloadWFFileResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__EditProtocol
#define SOAP_TYPE_ns1__EditProtocol (384)
/* ns1:EditProtocol */
class SOAP_CMAC ns1__EditProtocol : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	ns2__abxProtocol *protocolData;	/* optional element of type ns2:abxProtocol */
public:
	virtual int soap_type() const { return 384; } /* = unique id SOAP_TYPE_ns1__EditProtocol */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__EditProtocol() { ns1__EditProtocol::soap_default(NULL); }
	virtual ~ns1__EditProtocol() { }
};
#endif

#ifndef SOAP_TYPE_ns1__EditProtocolResponse
#define SOAP_TYPE_ns1__EditProtocolResponse (385)
/* ns1:EditProtocolResponse */
class SOAP_CMAC ns1__EditProtocolResponse : public xsd__anyType
{
public:
	ns2__abxProtocolResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns2:abxProtocolResult */
public:
	virtual int soap_type() const { return 385; } /* = unique id SOAP_TYPE_ns1__EditProtocolResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__EditProtocolResponse() { ns1__EditProtocolResponse::soap_default(NULL); }
	virtual ~ns1__EditProtocolResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetDataTPFileDetail
#define SOAP_TYPE_ns1__GetDataTPFileDetail (386)
/* ns1:GetDataTPFileDetail */
class SOAP_CMAC ns1__GetDataTPFileDetail : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *attachmentId;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 386; } /* = unique id SOAP_TYPE_ns1__GetDataTPFileDetail */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetDataTPFileDetail() { ns1__GetDataTPFileDetail::soap_default(NULL); }
	virtual ~ns1__GetDataTPFileDetail() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetDataTPFileDetailResponse
#define SOAP_TYPE_ns1__GetDataTPFileDetailResponse (387)
/* ns1:GetDataTPFileDetailResponse */
class SOAP_CMAC ns1__GetDataTPFileDetailResponse : public xsd__anyType
{
public:
	ns1__abxFileTpResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileTpResult */
public:
	virtual int soap_type() const { return 387; } /* = unique id SOAP_TYPE_ns1__GetDataTPFileDetailResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetDataTPFileDetailResponse() { ns1__GetDataTPFileDetailResponse::soap_default(NULL); }
	virtual ~ns1__GetDataTPFileDetailResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetDataCountWithoutPermission
#define SOAP_TYPE_ns1__GetDataCountWithoutPermission (388)
/* ns1:GetDataCountWithoutPermission */
class SOAP_CMAC ns1__GetDataCountWithoutPermission : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 388; } /* = unique id SOAP_TYPE_ns1__GetDataCountWithoutPermission */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetDataCountWithoutPermission() { ns1__GetDataCountWithoutPermission::soap_default(NULL); }
	virtual ~ns1__GetDataCountWithoutPermission() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetDataCountWithoutPermissionResponse
#define SOAP_TYPE_ns1__GetDataCountWithoutPermissionResponse (389)
/* ns1:GetDataCountWithoutPermissionResponse */
class SOAP_CMAC ns1__GetDataCountWithoutPermissionResponse : public xsd__anyType
{
public:
	ns1__abxDataResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxDataResult */
public:
	virtual int soap_type() const { return 389; } /* = unique id SOAP_TYPE_ns1__GetDataCountWithoutPermissionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetDataCountWithoutPermissionResponse() { ns1__GetDataCountWithoutPermissionResponse::soap_default(NULL); }
	virtual ~ns1__GetDataCountWithoutPermissionResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InsertLinkContainerToContainer
#define SOAP_TYPE_ns1__InsertLinkContainerToContainer (390)
/* ns1:InsertLinkContainerToContainer */
class SOAP_CMAC ns1__InsertLinkContainerToContainer : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *linkTypeName;	/* optional element of type xsd:string */
	char *instanceNameFrom;	/* optional element of type xsd:string */
	char *instanceNameTo;	/* optional element of type xsd:string */
	char *note;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 390; } /* = unique id SOAP_TYPE_ns1__InsertLinkContainerToContainer */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InsertLinkContainerToContainer() { ns1__InsertLinkContainerToContainer::soap_default(NULL); }
	virtual ~ns1__InsertLinkContainerToContainer() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InsertLinkContainerToContainerResponse
#define SOAP_TYPE_ns1__InsertLinkContainerToContainerResponse (391)
/* ns1:InsertLinkContainerToContainerResponse */
class SOAP_CMAC ns1__InsertLinkContainerToContainerResponse : public xsd__anyType
{
public:
	ns1__abxLinkResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxLinkResult */
public:
	virtual int soap_type() const { return 391; } /* = unique id SOAP_TYPE_ns1__InsertLinkContainerToContainerResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InsertLinkContainerToContainerResponse() { ns1__InsertLinkContainerToContainerResponse::soap_default(NULL); }
	virtual ~ns1__InsertLinkContainerToContainerResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetSign
#define SOAP_TYPE_ns1__GetSign (392)
/* ns1:GetSign */
class SOAP_CMAC ns1__GetSign : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
public:
	virtual int soap_type() const { return 392; } /* = unique id SOAP_TYPE_ns1__GetSign */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetSign() { ns1__GetSign::soap_default(NULL); }
	virtual ~ns1__GetSign() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetSignResponse
#define SOAP_TYPE_ns1__GetSignResponse (393)
/* ns1:GetSignResponse */
class SOAP_CMAC ns1__GetSignResponse : public xsd__anyType
{
public:
	ns1__abxWorkflowResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxWorkflowResult */
public:
	virtual int soap_type() const { return 393; } /* = unique id SOAP_TYPE_ns1__GetSignResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetSignResponse() { ns1__GetSignResponse::soap_default(NULL); }
	virtual ~ns1__GetSignResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UploadUSEndFile
#define SOAP_TYPE_ns1__UploadUSEndFile (394)
/* ns1:UploadUSEndFile */
class SOAP_CMAC ns1__UploadUSEndFile : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	ns1__abxFileList *dataListInput;	/* optional element of type ns1:abxFileList */
public:
	virtual int soap_type() const { return 394; } /* = unique id SOAP_TYPE_ns1__UploadUSEndFile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UploadUSEndFile() { ns1__UploadUSEndFile::soap_default(NULL); }
	virtual ~ns1__UploadUSEndFile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UploadUSEndFileResponse
#define SOAP_TYPE_ns1__UploadUSEndFileResponse (395)
/* ns1:UploadUSEndFileResponse */
class SOAP_CMAC ns1__UploadUSEndFileResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 395; } /* = unique id SOAP_TYPE_ns1__UploadUSEndFileResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UploadUSEndFileResponse() { ns1__UploadUSEndFileResponse::soap_default(NULL); }
	virtual ~ns1__UploadUSEndFileResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DelDefaultProcess
#define SOAP_TYPE_ns1__DelDefaultProcess (396)
/* ns1:DelDefaultProcess */
class SOAP_CMAC ns1__DelDefaultProcess : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	ns1__abxWorkflow *aw;	/* optional element of type ns1:abxWorkflow */
public:
	virtual int soap_type() const { return 396; } /* = unique id SOAP_TYPE_ns1__DelDefaultProcess */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DelDefaultProcess() { ns1__DelDefaultProcess::soap_default(NULL); }
	virtual ~ns1__DelDefaultProcess() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DelDefaultProcessResponse
#define SOAP_TYPE_ns1__DelDefaultProcessResponse (397)
/* ns1:DelDefaultProcessResponse */
class SOAP_CMAC ns1__DelDefaultProcessResponse : public xsd__anyType
{
public:
	ns1__abxWorkflowResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxWorkflowResult */
public:
	virtual int soap_type() const { return 397; } /* = unique id SOAP_TYPE_ns1__DelDefaultProcessResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DelDefaultProcessResponse() { ns1__DelDefaultProcessResponse::soap_default(NULL); }
	virtual ~ns1__DelDefaultProcessResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetDataCountWithPermission
#define SOAP_TYPE_ns1__GetDataCountWithPermission (398)
/* ns1:GetDataCountWithPermission */
class SOAP_CMAC ns1__GetDataCountWithPermission : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 398; } /* = unique id SOAP_TYPE_ns1__GetDataCountWithPermission */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetDataCountWithPermission() { ns1__GetDataCountWithPermission::soap_default(NULL); }
	virtual ~ns1__GetDataCountWithPermission() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetDataCountWithPermissionResponse
#define SOAP_TYPE_ns1__GetDataCountWithPermissionResponse (399)
/* ns1:GetDataCountWithPermissionResponse */
class SOAP_CMAC ns1__GetDataCountWithPermissionResponse : public xsd__anyType
{
public:
	ns1__abxDataResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxDataResult */
public:
	virtual int soap_type() const { return 399; } /* = unique id SOAP_TYPE_ns1__GetDataCountWithPermissionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetDataCountWithPermissionResponse() { ns1__GetDataCountWithPermissionResponse::soap_default(NULL); }
	virtual ~ns1__GetDataCountWithPermissionResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetExpressionValue
#define SOAP_TYPE_ns1__GetExpressionValue (400)
/* ns1:GetExpressionValue */
class SOAP_CMAC ns1__GetExpressionValue : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *dataid;	/* optional element of type xsd:string */
	char *instanceName;	/* optional element of type xsd:string */
	char *expressionName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 400; } /* = unique id SOAP_TYPE_ns1__GetExpressionValue */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetExpressionValue() { ns1__GetExpressionValue::soap_default(NULL); }
	virtual ~ns1__GetExpressionValue() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetExpressionValueResponse
#define SOAP_TYPE_ns1__GetExpressionValueResponse (401)
/* ns1:GetExpressionValueResponse */
class SOAP_CMAC ns1__GetExpressionValueResponse : public xsd__anyType
{
public:
	ns1__abxExpressionResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxExpressionResult */
public:
	virtual int soap_type() const { return 401; } /* = unique id SOAP_TYPE_ns1__GetExpressionValueResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetExpressionValueResponse() { ns1__GetExpressionValueResponse::soap_default(NULL); }
	virtual ~ns1__GetExpressionValueResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetLanguages
#define SOAP_TYPE_ns1__GetLanguages (402)
/* Primitive ns1:GetLanguages schema type: */
class SOAP_CMAC ns1__GetLanguages : public xsd__anyType
{
public:
	virtual int soap_type() const { return 402; } /* = unique id SOAP_TYPE_ns1__GetLanguages */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetLanguages() { ns1__GetLanguages::soap_default(NULL); }
	virtual ~ns1__GetLanguages() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetLanguagesResponse
#define SOAP_TYPE_ns1__GetLanguagesResponse (403)
/* ns1:GetLanguagesResponse */
class SOAP_CMAC ns1__GetLanguagesResponse : public xsd__anyType
{
public:
	class ns1__abxLanguageResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxLanguageResult */
public:
	virtual int soap_type() const { return 403; } /* = unique id SOAP_TYPE_ns1__GetLanguagesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetLanguagesResponse() { ns1__GetLanguagesResponse::soap_default(NULL); }
	virtual ~ns1__GetLanguagesResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxLanguageResult
#define SOAP_TYPE_ns1__abxLanguageResult (404)
/* ns1:abxLanguageResult */
class SOAP_CMAC ns1__abxLanguageResult : public xsd__anyType
{
public:
	unsigned int result;	/* required element of type xsd:unsignedInt */
	class ns1__abxLanguageList *list;	/* required element of type ns1:abxLanguageList */
public:
	virtual int soap_type() const { return 404; } /* = unique id SOAP_TYPE_ns1__abxLanguageResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxLanguageResult() { ns1__abxLanguageResult::soap_default(NULL); }
	virtual ~ns1__abxLanguageResult() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxLanguageList
#define SOAP_TYPE_ns1__abxLanguageList (405)
/* ns1:abxLanguageList */
class SOAP_CMAC ns1__abxLanguageList : public xsd__anyType
{
public:
	int __sizedataList;	/* sequence of elements <dataList> */
	class ns1__abxLanguage **dataList;	/* required element of type ns1:abxLanguage */
public:
	virtual int soap_type() const { return 405; } /* = unique id SOAP_TYPE_ns1__abxLanguageList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxLanguageList() { ns1__abxLanguageList::soap_default(NULL); }
	virtual ~ns1__abxLanguageList() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxLanguage
#define SOAP_TYPE_ns1__abxLanguage (406)
/* ns1:abxLanguage */
class SOAP_CMAC ns1__abxLanguage : public xsd__anyType
{
public:
	char *language;	/* required element of type xsd:string */
	char *languageId;	/* required element of type xsd:string */
	char *languageCode;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 406; } /* = unique id SOAP_TYPE_ns1__abxLanguage */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxLanguage() { ns1__abxLanguage::soap_default(NULL); }
	virtual ~ns1__abxLanguage() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CanDeleteLinkFromContainer
#define SOAP_TYPE_ns1__CanDeleteLinkFromContainer (407)
/* ns1:CanDeleteLinkFromContainer */
class SOAP_CMAC ns1__CanDeleteLinkFromContainer : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *instanceNameFrom;	/* optional element of type xsd:string */
	char *linkId;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 407; } /* = unique id SOAP_TYPE_ns1__CanDeleteLinkFromContainer */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CanDeleteLinkFromContainer() { ns1__CanDeleteLinkFromContainer::soap_default(NULL); }
	virtual ~ns1__CanDeleteLinkFromContainer() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CanDeleteLinkFromContainerResponse
#define SOAP_TYPE_ns1__CanDeleteLinkFromContainerResponse (408)
/* ns1:CanDeleteLinkFromContainerResponse */
class SOAP_CMAC ns1__CanDeleteLinkFromContainerResponse : public xsd__anyType
{
public:
	ns4__abxCan *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns4:abxCan */
public:
	virtual int soap_type() const { return 408; } /* = unique id SOAP_TYPE_ns1__CanDeleteLinkFromContainerResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CanDeleteLinkFromContainerResponse() { ns1__CanDeleteLinkFromContainerResponse::soap_default(NULL); }
	virtual ~ns1__CanDeleteLinkFromContainerResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__TestScritturaLettura
#define SOAP_TYPE_ns1__TestScritturaLettura (409)
/* ns1:TestScritturaLettura */
class SOAP_CMAC ns1__TestScritturaLettura : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
public:
	virtual int soap_type() const { return 409; } /* = unique id SOAP_TYPE_ns1__TestScritturaLettura */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__TestScritturaLettura() { ns1__TestScritturaLettura::soap_default(NULL); }
	virtual ~ns1__TestScritturaLettura() { }
};
#endif

#ifndef SOAP_TYPE_ns1__TestScritturaLetturaResponse
#define SOAP_TYPE_ns1__TestScritturaLetturaResponse (410)
/* ns1:TestScritturaLetturaResponse */
class SOAP_CMAC ns1__TestScritturaLetturaResponse : public xsd__anyType
{
public:
	char *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 410; } /* = unique id SOAP_TYPE_ns1__TestScritturaLetturaResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__TestScritturaLetturaResponse() { ns1__TestScritturaLetturaResponse::soap_default(NULL); }
	virtual ~ns1__TestScritturaLetturaResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteTemplate
#define SOAP_TYPE_ns1__DeleteTemplate (411)
/* ns1:DeleteTemplate */
class SOAP_CMAC ns1__DeleteTemplate : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *TemplateName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 411; } /* = unique id SOAP_TYPE_ns1__DeleteTemplate */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteTemplate() { ns1__DeleteTemplate::soap_default(NULL); }
	virtual ~ns1__DeleteTemplate() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteTemplateResponse
#define SOAP_TYPE_ns1__DeleteTemplateResponse (412)
/* ns1:DeleteTemplateResponse */
class SOAP_CMAC ns1__DeleteTemplateResponse : public xsd__anyType
{
public:
	ns1__abxTemplateResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxTemplateResult */
public:
	virtual int soap_type() const { return 412; } /* = unique id SOAP_TYPE_ns1__DeleteTemplateResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteTemplateResponse() { ns1__DeleteTemplateResponse::soap_default(NULL); }
	virtual ~ns1__DeleteTemplateResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteRaccoglitore
#define SOAP_TYPE_ns1__DeleteRaccoglitore (413)
/* ns1:DeleteRaccoglitore */
class SOAP_CMAC ns1__DeleteRaccoglitore : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *ContainerName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 413; } /* = unique id SOAP_TYPE_ns1__DeleteRaccoglitore */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteRaccoglitore() { ns1__DeleteRaccoglitore::soap_default(NULL); }
	virtual ~ns1__DeleteRaccoglitore() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteRaccoglitoreResponse
#define SOAP_TYPE_ns1__DeleteRaccoglitoreResponse (414)
/* ns1:DeleteRaccoglitoreResponse */
class SOAP_CMAC ns1__DeleteRaccoglitoreResponse : public xsd__anyType
{
public:
	ns1__abxRaccoglitoreResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxRaccoglitoreResult */
public:
	virtual int soap_type() const { return 414; } /* = unique id SOAP_TYPE_ns1__DeleteRaccoglitoreResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteRaccoglitoreResponse() { ns1__DeleteRaccoglitoreResponse::soap_default(NULL); }
	virtual ~ns1__DeleteRaccoglitoreResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteFile
#define SOAP_TYPE_ns1__DeleteFile (415)
/* ns1:DeleteFile */
class SOAP_CMAC ns1__DeleteFile : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
	char *fileCode;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 415; } /* = unique id SOAP_TYPE_ns1__DeleteFile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteFile() { ns1__DeleteFile::soap_default(NULL); }
	virtual ~ns1__DeleteFile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteFileResponse
#define SOAP_TYPE_ns1__DeleteFileResponse (416)
/* ns1:DeleteFileResponse */
class SOAP_CMAC ns1__DeleteFileResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 416; } /* = unique id SOAP_TYPE_ns1__DeleteFileResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteFileResponse() { ns1__DeleteFileResponse::soap_default(NULL); }
	virtual ~ns1__DeleteFileResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ModUserSettings
#define SOAP_TYPE_ns1__ModUserSettings (417)
/* ns1:ModUserSettings */
class SOAP_CMAC ns1__ModUserSettings : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	ns1__abxWorkflow *aw;	/* optional element of type ns1:abxWorkflow */
public:
	virtual int soap_type() const { return 417; } /* = unique id SOAP_TYPE_ns1__ModUserSettings */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ModUserSettings() { ns1__ModUserSettings::soap_default(NULL); }
	virtual ~ns1__ModUserSettings() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ModUserSettingsResponse
#define SOAP_TYPE_ns1__ModUserSettingsResponse (418)
/* ns1:ModUserSettingsResponse */
class SOAP_CMAC ns1__ModUserSettingsResponse : public xsd__anyType
{
public:
	ns1__abxWorkflowResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxWorkflowResult */
public:
	virtual int soap_type() const { return 418; } /* = unique id SOAP_TYPE_ns1__ModUserSettingsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ModUserSettingsResponse() { ns1__ModUserSettingsResponse::soap_default(NULL); }
	virtual ~ns1__ModUserSettingsResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InsertLinkContainerToDocument
#define SOAP_TYPE_ns1__InsertLinkContainerToDocument (419)
/* ns1:InsertLinkContainerToDocument */
class SOAP_CMAC ns1__InsertLinkContainerToDocument : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *linkTypeName;	/* optional element of type xsd:string */
	char *instanceNameFrom;	/* optional element of type xsd:string */
	char *dataIdTo;	/* optional element of type xsd:string */
	char *instanceNameTo;	/* optional element of type xsd:string */
	char *note;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 419; } /* = unique id SOAP_TYPE_ns1__InsertLinkContainerToDocument */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InsertLinkContainerToDocument() { ns1__InsertLinkContainerToDocument::soap_default(NULL); }
	virtual ~ns1__InsertLinkContainerToDocument() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InsertLinkContainerToDocumentResponse
#define SOAP_TYPE_ns1__InsertLinkContainerToDocumentResponse (420)
/* ns1:InsertLinkContainerToDocumentResponse */
class SOAP_CMAC ns1__InsertLinkContainerToDocumentResponse : public xsd__anyType
{
public:
	ns1__abxLinkResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxLinkResult */
public:
	virtual int soap_type() const { return 420; } /* = unique id SOAP_TYPE_ns1__InsertLinkContainerToDocumentResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InsertLinkContainerToDocumentResponse() { ns1__InsertLinkContainerToDocumentResponse::soap_default(NULL); }
	virtual ~ns1__InsertLinkContainerToDocumentResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CopyFile
#define SOAP_TYPE_ns1__CopyFile (421)
/* ns1:CopyFile */
class SOAP_CMAC ns1__CopyFile : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *instanceNameSource;	/* optional element of type xsd:string */
	char *dataIdSource;	/* optional element of type xsd:string */
	ns1__abxFile *file;	/* optional element of type ns1:abxFile */
	char *instanceNameDest;	/* optional element of type xsd:string */
	char *dataIdDest;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 421; } /* = unique id SOAP_TYPE_ns1__CopyFile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CopyFile() { ns1__CopyFile::soap_default(NULL); }
	virtual ~ns1__CopyFile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CopyFileResponse
#define SOAP_TYPE_ns1__CopyFileResponse (422)
/* ns1:CopyFileResponse */
class SOAP_CMAC ns1__CopyFileResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 422; } /* = unique id SOAP_TYPE_ns1__CopyFileResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CopyFileResponse() { ns1__CopyFileResponse::soap_default(NULL); }
	virtual ~ns1__CopyFileResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetTree
#define SOAP_TYPE_ns1__GetTree (423)
/* ns1:GetTree */
class SOAP_CMAC ns1__GetTree : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	ns1__abxTreeParam *param;	/* optional element of type ns1:abxTreeParam */
public:
	virtual int soap_type() const { return 423; } /* = unique id SOAP_TYPE_ns1__GetTree */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetTree() { ns1__GetTree::soap_default(NULL); }
	virtual ~ns1__GetTree() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetTreeResponse
#define SOAP_TYPE_ns1__GetTreeResponse (424)
/* ns1:GetTreeResponse */
class SOAP_CMAC ns1__GetTreeResponse : public xsd__anyType
{
public:
	ns1__abxTreeResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxTreeResult */
public:
	virtual int soap_type() const { return 424; } /* = unique id SOAP_TYPE_ns1__GetTreeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetTreeResponse() { ns1__GetTreeResponse::soap_default(NULL); }
	virtual ~ns1__GetTreeResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CanInsertLinkDocumentToDocument
#define SOAP_TYPE_ns1__CanInsertLinkDocumentToDocument (425)
/* ns1:CanInsertLinkDocumentToDocument */
class SOAP_CMAC ns1__CanInsertLinkDocumentToDocument : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *linkTypeName;	/* optional element of type xsd:string */
	char *instanceNameFrom;	/* optional element of type xsd:string */
	char *instanceNameTo;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 425; } /* = unique id SOAP_TYPE_ns1__CanInsertLinkDocumentToDocument */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CanInsertLinkDocumentToDocument() { ns1__CanInsertLinkDocumentToDocument::soap_default(NULL); }
	virtual ~ns1__CanInsertLinkDocumentToDocument() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CanInsertLinkDocumentToDocumentResponse
#define SOAP_TYPE_ns1__CanInsertLinkDocumentToDocumentResponse (426)
/* ns1:CanInsertLinkDocumentToDocumentResponse */
class SOAP_CMAC ns1__CanInsertLinkDocumentToDocumentResponse : public xsd__anyType
{
public:
	ns4__abxCan *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns4:abxCan */
public:
	virtual int soap_type() const { return 426; } /* = unique id SOAP_TYPE_ns1__CanInsertLinkDocumentToDocumentResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CanInsertLinkDocumentToDocumentResponse() { ns1__CanInsertLinkDocumentToDocumentResponse::soap_default(NULL); }
	virtual ~ns1__CanInsertLinkDocumentToDocumentResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetDataUSFileDetail
#define SOAP_TYPE_ns1__GetDataUSFileDetail (427)
/* ns1:GetDataUSFileDetail */
class SOAP_CMAC ns1__GetDataUSFileDetail : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
	char *attachmentId;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 427; } /* = unique id SOAP_TYPE_ns1__GetDataUSFileDetail */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetDataUSFileDetail() { ns1__GetDataUSFileDetail::soap_default(NULL); }
	virtual ~ns1__GetDataUSFileDetail() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetDataUSFileDetailResponse
#define SOAP_TYPE_ns1__GetDataUSFileDetailResponse (428)
/* ns1:GetDataUSFileDetailResponse */
class SOAP_CMAC ns1__GetDataUSFileDetailResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 428; } /* = unique id SOAP_TYPE_ns1__GetDataUSFileDetailResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetDataUSFileDetailResponse() { ns1__GetDataUSFileDetailResponse::soap_default(NULL); }
	virtual ~ns1__GetDataUSFileDetailResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ModUser
#define SOAP_TYPE_ns1__ModUser (429)
/* ns1:ModUser */
class SOAP_CMAC ns1__ModUser : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	ns1__abxUser *user;	/* optional element of type ns1:abxUser */
	char *password;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 429; } /* = unique id SOAP_TYPE_ns1__ModUser */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ModUser() { ns1__ModUser::soap_default(NULL); }
	virtual ~ns1__ModUser() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ModUserResponse
#define SOAP_TYPE_ns1__ModUserResponse (430)
/* ns1:ModUserResponse */
class SOAP_CMAC ns1__ModUserResponse : public xsd__anyType
{
public:
	ns1__abxUserListResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxUserListResult */
public:
	virtual int soap_type() const { return 430; } /* = unique id SOAP_TYPE_ns1__ModUserResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ModUserResponse() { ns1__ModUserResponse::soap_default(NULL); }
	virtual ~ns1__ModUserResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteSchedulerTaskSchedule
#define SOAP_TYPE_ns1__DeleteSchedulerTaskSchedule (431)
/* ns1:DeleteSchedulerTaskSchedule */
class SOAP_CMAC ns1__DeleteSchedulerTaskSchedule : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *scheduleId;	/* optional element of type xsd:string */
	int scheduleType;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 431; } /* = unique id SOAP_TYPE_ns1__DeleteSchedulerTaskSchedule */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteSchedulerTaskSchedule() { ns1__DeleteSchedulerTaskSchedule::soap_default(NULL); }
	virtual ~ns1__DeleteSchedulerTaskSchedule() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteSchedulerTaskScheduleResponse
#define SOAP_TYPE_ns1__DeleteSchedulerTaskScheduleResponse (432)
/* ns1:DeleteSchedulerTaskScheduleResponse */
class SOAP_CMAC ns1__DeleteSchedulerTaskScheduleResponse : public xsd__anyType
{
public:
	ns1__abxSchedulerResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxSchedulerResult */
public:
	virtual int soap_type() const { return 432; } /* = unique id SOAP_TYPE_ns1__DeleteSchedulerTaskScheduleResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteSchedulerTaskScheduleResponse() { ns1__DeleteSchedulerTaskScheduleResponse::soap_default(NULL); }
	virtual ~ns1__DeleteSchedulerTaskScheduleResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AddMarker
#define SOAP_TYPE_ns1__AddMarker (433)
/* ns1:AddMarker */
class SOAP_CMAC ns1__AddMarker : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *marker;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 433; } /* = unique id SOAP_TYPE_ns1__AddMarker */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AddMarker() { ns1__AddMarker::soap_default(NULL); }
	virtual ~ns1__AddMarker() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AddMarkerResponse
#define SOAP_TYPE_ns1__AddMarkerResponse (434)
/* ns1:AddMarkerResponse */
class SOAP_CMAC ns1__AddMarkerResponse : public xsd__anyType
{
public:
	ns1__abxWorkflowResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxWorkflowResult */
public:
	virtual int soap_type() const { return 434; } /* = unique id SOAP_TYPE_ns1__AddMarkerResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AddMarkerResponse() { ns1__AddMarkerResponse::soap_default(NULL); }
	virtual ~ns1__AddMarkerResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetDocumentLinks
#define SOAP_TYPE_ns1__GetDocumentLinks (435)
/* ns1:GetDocumentLinks */
class SOAP_CMAC ns1__GetDocumentLinks : public xsd__anyType
{
public:
	ns1__IDtype *IDtype_USCORESessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
	char *dataId;	/* optional element of type xsd:string */
	char *linkTypeName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 435; } /* = unique id SOAP_TYPE_ns1__GetDocumentLinks */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetDocumentLinks() { ns1__GetDocumentLinks::soap_default(NULL); }
	virtual ~ns1__GetDocumentLinks() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetDocumentLinksResponse
#define SOAP_TYPE_ns1__GetDocumentLinksResponse (436)
/* ns1:GetDocumentLinksResponse */
class SOAP_CMAC ns1__GetDocumentLinksResponse : public xsd__anyType
{
public:
	ns1__abxLinkResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxLinkResult */
public:
	virtual int soap_type() const { return 436; } /* = unique id SOAP_TYPE_ns1__GetDocumentLinksResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetDocumentLinksResponse() { ns1__GetDocumentLinksResponse::soap_default(NULL); }
	virtual ~ns1__GetDocumentLinksResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetInstanceReplicationStatus
#define SOAP_TYPE_ns1__GetInstanceReplicationStatus (437)
/* ns1:GetInstanceReplicationStatus */
class SOAP_CMAC ns1__GetInstanceReplicationStatus : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 437; } /* = unique id SOAP_TYPE_ns1__GetInstanceReplicationStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetInstanceReplicationStatus() { ns1__GetInstanceReplicationStatus::soap_default(NULL); }
	virtual ~ns1__GetInstanceReplicationStatus() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetInstanceReplicationStatusResponse
#define SOAP_TYPE_ns1__GetInstanceReplicationStatusResponse (438)
/* ns1:GetInstanceReplicationStatusResponse */
class SOAP_CMAC ns1__GetInstanceReplicationStatusResponse : public xsd__anyType
{
public:
	ns1__abxReplicationResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxReplicationResult */
public:
	virtual int soap_type() const { return 438; } /* = unique id SOAP_TYPE_ns1__GetInstanceReplicationStatusResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetInstanceReplicationStatusResponse() { ns1__GetInstanceReplicationStatusResponse::soap_default(NULL); }
	virtual ~ns1__GetInstanceReplicationStatusResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Fk_USCOREgetPars
#define SOAP_TYPE_ns1__Fk_USCOREgetPars (439)
/* ns1:Fk_getPars */
class SOAP_CMAC ns1__Fk_USCOREgetPars : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *fieldName;	/* optional element of type xsd:string */
	char *fkName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 439; } /* = unique id SOAP_TYPE_ns1__Fk_USCOREgetPars */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Fk_USCOREgetPars() { ns1__Fk_USCOREgetPars::soap_default(NULL); }
	virtual ~ns1__Fk_USCOREgetPars() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Fk_USCOREgetParsResponse
#define SOAP_TYPE_ns1__Fk_USCOREgetParsResponse (440)
/* ns1:Fk_getParsResponse */
class SOAP_CMAC ns1__Fk_USCOREgetParsResponse : public xsd__anyType
{
public:
	ns1__abxFKResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFKResult */
public:
	virtual int soap_type() const { return 440; } /* = unique id SOAP_TYPE_ns1__Fk_USCOREgetParsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Fk_USCOREgetParsResponse() { ns1__Fk_USCOREgetParsResponse::soap_default(NULL); }
	virtual ~ns1__Fk_USCOREgetParsResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CheckOut_USCOREattachContainer
#define SOAP_TYPE_ns1__CheckOut_USCOREattachContainer (441)
/* ns1:CheckOut_attachContainer */
class SOAP_CMAC ns1__CheckOut_USCOREattachContainer : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *ObjName;	/* optional element of type xsd:string */
	char *Path;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 441; } /* = unique id SOAP_TYPE_ns1__CheckOut_USCOREattachContainer */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CheckOut_USCOREattachContainer() { ns1__CheckOut_USCOREattachContainer::soap_default(NULL); }
	virtual ~ns1__CheckOut_USCOREattachContainer() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CheckOut_USCOREattachContainerResponse
#define SOAP_TYPE_ns1__CheckOut_USCOREattachContainerResponse (442)
/* ns1:CheckOut_attachContainerResponse */
class SOAP_CMAC ns1__CheckOut_USCOREattachContainerResponse : public xsd__anyType
{
public:
	class ns1__abxCheckinResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxCheckinResult */
public:
	virtual int soap_type() const { return 442; } /* = unique id SOAP_TYPE_ns1__CheckOut_USCOREattachContainerResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CheckOut_USCOREattachContainerResponse() { ns1__CheckOut_USCOREattachContainerResponse::soap_default(NULL); }
	virtual ~ns1__CheckOut_USCOREattachContainerResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxCheckinResult
#define SOAP_TYPE_ns1__abxCheckinResult (443)
/* ns1:abxCheckinResult */
class SOAP_CMAC ns1__abxCheckinResult : public xsd__anyType
{
public:
	unsigned int result;	/* required element of type xsd:unsignedInt */
	class ns1__abxCheckinList *list;	/* required element of type ns1:abxCheckinList */
public:
	virtual int soap_type() const { return 443; } /* = unique id SOAP_TYPE_ns1__abxCheckinResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxCheckinResult() { ns1__abxCheckinResult::soap_default(NULL); }
	virtual ~ns1__abxCheckinResult() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxCheckinList
#define SOAP_TYPE_ns1__abxCheckinList (444)
/* ns1:abxCheckinList */
class SOAP_CMAC ns1__abxCheckinList : public xsd__anyType
{
public:
	class ns1__abxCheckin *dataList;	/* required element of type ns1:abxCheckin */
public:
	virtual int soap_type() const { return 444; } /* = unique id SOAP_TYPE_ns1__abxCheckinList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxCheckinList() { ns1__abxCheckinList::soap_default(NULL); }
	virtual ~ns1__abxCheckinList() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxCheckin
#define SOAP_TYPE_ns1__abxCheckin (445)
/* ns1:abxCheckin */
class SOAP_CMAC ns1__abxCheckin : public xsd__anyType
{
public:
	char *path;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 445; } /* = unique id SOAP_TYPE_ns1__abxCheckin */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxCheckin() { ns1__abxCheckin::soap_default(NULL); }
	virtual ~ns1__abxCheckin() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetTranslationByMessageId
#define SOAP_TYPE_ns1__GetTranslationByMessageId (446)
/* ns1:GetTranslationByMessageId */
class SOAP_CMAC ns1__GetTranslationByMessageId : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *exMessageId;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 446; } /* = unique id SOAP_TYPE_ns1__GetTranslationByMessageId */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetTranslationByMessageId() { ns1__GetTranslationByMessageId::soap_default(NULL); }
	virtual ~ns1__GetTranslationByMessageId() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetTranslationByMessageIdResponse
#define SOAP_TYPE_ns1__GetTranslationByMessageIdResponse (447)
/* ns1:GetTranslationByMessageIdResponse */
class SOAP_CMAC ns1__GetTranslationByMessageIdResponse : public xsd__anyType
{
public:
	ns1__abxTranslationResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxTranslationResult */
public:
	virtual int soap_type() const { return 447; } /* = unique id SOAP_TYPE_ns1__GetTranslationByMessageIdResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetTranslationByMessageIdResponse() { ns1__GetTranslationByMessageIdResponse::soap_default(NULL); }
	virtual ~ns1__GetTranslationByMessageIdResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetSDKTaskExcelPreview
#define SOAP_TYPE_ns1__GetSDKTaskExcelPreview (448)
/* ns1:GetSDKTaskExcelPreview */
class SOAP_CMAC ns1__GetSDKTaskExcelPreview : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *taskId;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 448; } /* = unique id SOAP_TYPE_ns1__GetSDKTaskExcelPreview */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetSDKTaskExcelPreview() { ns1__GetSDKTaskExcelPreview::soap_default(NULL); }
	virtual ~ns1__GetSDKTaskExcelPreview() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetSDKTaskExcelPreviewResponse
#define SOAP_TYPE_ns1__GetSDKTaskExcelPreviewResponse (449)
/* ns1:GetSDKTaskExcelPreviewResponse */
class SOAP_CMAC ns1__GetSDKTaskExcelPreviewResponse : public xsd__anyType
{
public:
	ns1__abxSDKResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxSDKResult */
public:
	virtual int soap_type() const { return 449; } /* = unique id SOAP_TYPE_ns1__GetSDKTaskExcelPreviewResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetSDKTaskExcelPreviewResponse() { ns1__GetSDKTaskExcelPreviewResponse::soap_default(NULL); }
	virtual ~ns1__GetSDKTaskExcelPreviewResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CheckIn_USCOREattach
#define SOAP_TYPE_ns1__CheckIn_USCOREattach (450)
/* ns1:CheckIn_attach */
class SOAP_CMAC ns1__CheckIn_USCOREattach : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *InstanceName;	/* optional element of type xsd:string */
	char *Path;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 450; } /* = unique id SOAP_TYPE_ns1__CheckIn_USCOREattach */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CheckIn_USCOREattach() { ns1__CheckIn_USCOREattach::soap_default(NULL); }
	virtual ~ns1__CheckIn_USCOREattach() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CheckIn_USCOREattachResponse
#define SOAP_TYPE_ns1__CheckIn_USCOREattachResponse (451)
/* ns1:CheckIn_attachResponse */
class SOAP_CMAC ns1__CheckIn_USCOREattachResponse : public xsd__anyType
{
public:
	ns1__abxCheckinResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxCheckinResult */
public:
	virtual int soap_type() const { return 451; } /* = unique id SOAP_TYPE_ns1__CheckIn_USCOREattachResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CheckIn_USCOREattachResponse() { ns1__CheckIn_USCOREattachResponse::soap_default(NULL); }
	virtual ~ns1__CheckIn_USCOREattachResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SetTmpWFUploadPath
#define SOAP_TYPE_ns1__SetTmpWFUploadPath (452)
/* ns1:SetTmpWFUploadPath */
class SOAP_CMAC ns1__SetTmpWFUploadPath : public xsd__anyType
{
public:
	char *path;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 452; } /* = unique id SOAP_TYPE_ns1__SetTmpWFUploadPath */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SetTmpWFUploadPath() { ns1__SetTmpWFUploadPath::soap_default(NULL); }
	virtual ~ns1__SetTmpWFUploadPath() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SetTmpWFUploadPathResponse
#define SOAP_TYPE_ns1__SetTmpWFUploadPathResponse (453)
/* ns1:SetTmpWFUploadPathResponse */
class SOAP_CMAC ns1__SetTmpWFUploadPathResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 453; } /* = unique id SOAP_TYPE_ns1__SetTmpWFUploadPathResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SetTmpWFUploadPathResponse() { ns1__SetTmpWFUploadPathResponse::soap_default(NULL); }
	virtual ~ns1__SetTmpWFUploadPathResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ModifyData
#define SOAP_TYPE_ns1__ModifyData (454)
/* ns1:ModifyData */
class SOAP_CMAC ns1__ModifyData : public xsd__anyType
{
public:
	ns1__IDtype *IDtype_USCORESessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
	char *dataId;	/* optional element of type xsd:string */
	ns1__abxDataList *inputData;	/* optional element of type ns1:abxDataList */
	ns1__abxProtocolUse *protocolUseData;	/* optional element of type ns1:abxProtocolUse */
	char *abxSecurityId;	/* optional element of type xsd:string */
	char *masterId;	/* optional element of type xsd:string */
	char *note;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 454; } /* = unique id SOAP_TYPE_ns1__ModifyData */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ModifyData() { ns1__ModifyData::soap_default(NULL); }
	virtual ~ns1__ModifyData() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ModifyDataResponse
#define SOAP_TYPE_ns1__ModifyDataResponse (455)
/* ns1:ModifyDataResponse */
class SOAP_CMAC ns1__ModifyDataResponse : public xsd__anyType
{
public:
	ns1__abxDataResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxDataResult */
public:
	virtual int soap_type() const { return 455; } /* = unique id SOAP_TYPE_ns1__ModifyDataResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ModifyDataResponse() { ns1__ModifyDataResponse::soap_default(NULL); }
	virtual ~ns1__ModifyDataResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetDownloadDetailByCont
#define SOAP_TYPE_ns1__GetDownloadDetailByCont (456)
/* ns1:GetDownloadDetailByCont */
class SOAP_CMAC ns1__GetDownloadDetailByCont : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
public:
	virtual int soap_type() const { return 456; } /* = unique id SOAP_TYPE_ns1__GetDownloadDetailByCont */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetDownloadDetailByCont() { ns1__GetDownloadDetailByCont::soap_default(NULL); }
	virtual ~ns1__GetDownloadDetailByCont() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetDownloadDetailByContResponse
#define SOAP_TYPE_ns1__GetDownloadDetailByContResponse (457)
/* ns1:GetDownloadDetailByContResponse */
class SOAP_CMAC ns1__GetDownloadDetailByContResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 457; } /* = unique id SOAP_TYPE_ns1__GetDownloadDetailByContResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetDownloadDetailByContResponse() { ns1__GetDownloadDetailByContResponse::soap_default(NULL); }
	virtual ~ns1__GetDownloadDetailByContResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Fk_USCOREgetParsAllFk
#define SOAP_TYPE_ns1__Fk_USCOREgetParsAllFk (458)
/* ns1:Fk_getParsAllFk */
class SOAP_CMAC ns1__Fk_USCOREgetParsAllFk : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *fieldName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 458; } /* = unique id SOAP_TYPE_ns1__Fk_USCOREgetParsAllFk */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Fk_USCOREgetParsAllFk() { ns1__Fk_USCOREgetParsAllFk::soap_default(NULL); }
	virtual ~ns1__Fk_USCOREgetParsAllFk() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Fk_USCOREgetParsAllFkResponse
#define SOAP_TYPE_ns1__Fk_USCOREgetParsAllFkResponse (459)
/* ns1:Fk_getParsAllFkResponse */
class SOAP_CMAC ns1__Fk_USCOREgetParsAllFkResponse : public xsd__anyType
{
public:
	ns1__abxFKResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFKResult */
public:
	virtual int soap_type() const { return 459; } /* = unique id SOAP_TYPE_ns1__Fk_USCOREgetParsAllFkResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Fk_USCOREgetParsAllFkResponse() { ns1__Fk_USCOREgetParsAllFkResponse::soap_default(NULL); }
	virtual ~ns1__Fk_USCOREgetParsAllFkResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetLinksToDocument
#define SOAP_TYPE_ns1__GetLinksToDocument (460)
/* ns1:GetLinksToDocument */
class SOAP_CMAC ns1__GetLinksToDocument : public xsd__anyType
{
public:
	ns1__IDtype *IDtype_USCORESessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
	char *dataId;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 460; } /* = unique id SOAP_TYPE_ns1__GetLinksToDocument */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetLinksToDocument() { ns1__GetLinksToDocument::soap_default(NULL); }
	virtual ~ns1__GetLinksToDocument() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetLinksToDocumentResponse
#define SOAP_TYPE_ns1__GetLinksToDocumentResponse (461)
/* ns1:GetLinksToDocumentResponse */
class SOAP_CMAC ns1__GetLinksToDocumentResponse : public xsd__anyType
{
public:
	ns1__abxLinkResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxLinkResult */
public:
	virtual int soap_type() const { return 461; } /* = unique id SOAP_TYPE_ns1__GetLinksToDocumentResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetLinksToDocumentResponse() { ns1__GetLinksToDocumentResponse::soap_default(NULL); }
	virtual ~ns1__GetLinksToDocumentResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UploadEndFileContainer
#define SOAP_TYPE_ns1__UploadEndFileContainer (462)
/* ns1:UploadEndFileContainer */
class SOAP_CMAC ns1__UploadEndFileContainer : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
	char *objName;	/* optional element of type xsd:string */
	ns1__abxFileList *dataListInput;	/* optional element of type ns1:abxFileList */
	char *docTemplateName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 462; } /* = unique id SOAP_TYPE_ns1__UploadEndFileContainer */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UploadEndFileContainer() { ns1__UploadEndFileContainer::soap_default(NULL); }
	virtual ~ns1__UploadEndFileContainer() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UploadEndFileContainerResponse
#define SOAP_TYPE_ns1__UploadEndFileContainerResponse (463)
/* ns1:UploadEndFileContainerResponse */
class SOAP_CMAC ns1__UploadEndFileContainerResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 463; } /* = unique id SOAP_TYPE_ns1__UploadEndFileContainerResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UploadEndFileContainerResponse() { ns1__UploadEndFileContainerResponse::soap_default(NULL); }
	virtual ~ns1__UploadEndFileContainerResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetDownloadDetailByDataId
#define SOAP_TYPE_ns1__GetDownloadDetailByDataId (464)
/* ns1:GetDownloadDetailByDataId */
class SOAP_CMAC ns1__GetDownloadDetailByDataId : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
	char *dataId;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 464; } /* = unique id SOAP_TYPE_ns1__GetDownloadDetailByDataId */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetDownloadDetailByDataId() { ns1__GetDownloadDetailByDataId::soap_default(NULL); }
	virtual ~ns1__GetDownloadDetailByDataId() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetDownloadDetailByDataIdResponse
#define SOAP_TYPE_ns1__GetDownloadDetailByDataIdResponse (465)
/* ns1:GetDownloadDetailByDataIdResponse */
class SOAP_CMAC ns1__GetDownloadDetailByDataIdResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 465; } /* = unique id SOAP_TYPE_ns1__GetDownloadDetailByDataIdResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetDownloadDetailByDataIdResponse() { ns1__GetDownloadDetailByDataIdResponse::soap_default(NULL); }
	virtual ~ns1__GetDownloadDetailByDataIdResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetArchiBoxInDomain
#define SOAP_TYPE_ns1__GetArchiBoxInDomain (466)
/* ns1:GetArchiBoxInDomain */
class SOAP_CMAC ns1__GetArchiBoxInDomain : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
public:
	virtual int soap_type() const { return 466; } /* = unique id SOAP_TYPE_ns1__GetArchiBoxInDomain */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetArchiBoxInDomain() { ns1__GetArchiBoxInDomain::soap_default(NULL); }
	virtual ~ns1__GetArchiBoxInDomain() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetArchiBoxInDomainResponse
#define SOAP_TYPE_ns1__GetArchiBoxInDomainResponse (467)
/* ns1:GetArchiBoxInDomainResponse */
class SOAP_CMAC ns1__GetArchiBoxInDomainResponse : public xsd__anyType
{
public:
	ns1__abxArchiBoxDomainResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxArchiBoxDomainResult */
public:
	virtual int soap_type() const { return 467; } /* = unique id SOAP_TYPE_ns1__GetArchiBoxInDomainResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetArchiBoxInDomainResponse() { ns1__GetArchiBoxInDomainResponse::soap_default(NULL); }
	virtual ~ns1__GetArchiBoxInDomainResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetDataWAById
#define SOAP_TYPE_ns1__GetDataWAById (468)
/* ns1:GetDataWAById */
class SOAP_CMAC ns1__GetDataWAById : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
	char *annotazioneId;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 468; } /* = unique id SOAP_TYPE_ns1__GetDataWAById */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetDataWAById() { ns1__GetDataWAById::soap_default(NULL); }
	virtual ~ns1__GetDataWAById() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetDataWAByIdResponse
#define SOAP_TYPE_ns1__GetDataWAByIdResponse (469)
/* ns1:GetDataWAByIdResponse */
class SOAP_CMAC ns1__GetDataWAByIdResponse : public xsd__anyType
{
public:
	ns1__abxDataResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxDataResult */
public:
	virtual int soap_type() const { return 469; } /* = unique id SOAP_TYPE_ns1__GetDataWAByIdResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetDataWAByIdResponse() { ns1__GetDataWAByIdResponse::soap_default(NULL); }
	virtual ~ns1__GetDataWAByIdResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Fk_USCOREWS_USCOREinsert
#define SOAP_TYPE_ns1__Fk_USCOREWS_USCOREinsert (470)
/* ns1:Fk_WS_insert */
class SOAP_CMAC ns1__Fk_USCOREWS_USCOREinsert : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *fieldName;	/* optional element of type xsd:string */
	char *fkName;	/* optional element of type xsd:string */
	char *wsdlUrl;	/* optional element of type xsd:string */
	char *user;	/* optional element of type xsd:string */
	char *pwd;	/* optional element of type xsd:string */
	bool optionGetCache;	/* required element of type xsd:boolean */
	bool optionSetDesc;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 470; } /* = unique id SOAP_TYPE_ns1__Fk_USCOREWS_USCOREinsert */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Fk_USCOREWS_USCOREinsert() { ns1__Fk_USCOREWS_USCOREinsert::soap_default(NULL); }
	virtual ~ns1__Fk_USCOREWS_USCOREinsert() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Fk_USCOREWS_USCOREinsertResponse
#define SOAP_TYPE_ns1__Fk_USCOREWS_USCOREinsertResponse (471)
/* ns1:Fk_WS_insertResponse */
class SOAP_CMAC ns1__Fk_USCOREWS_USCOREinsertResponse : public xsd__anyType
{
public:
	ns1__abxFKResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFKResult */
public:
	virtual int soap_type() const { return 471; } /* = unique id SOAP_TYPE_ns1__Fk_USCOREWS_USCOREinsertResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Fk_USCOREWS_USCOREinsertResponse() { ns1__Fk_USCOREWS_USCOREinsertResponse::soap_default(NULL); }
	virtual ~ns1__Fk_USCOREWS_USCOREinsertResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CanDeleteData
#define SOAP_TYPE_ns1__CanDeleteData (472)
/* ns1:CanDeleteData */
class SOAP_CMAC ns1__CanDeleteData : public xsd__anyType
{
public:
	ns1__IDtype *IDtype_USCORESessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
	char *dataId;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 472; } /* = unique id SOAP_TYPE_ns1__CanDeleteData */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CanDeleteData() { ns1__CanDeleteData::soap_default(NULL); }
	virtual ~ns1__CanDeleteData() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CanDeleteDataResponse
#define SOAP_TYPE_ns1__CanDeleteDataResponse (473)
/* ns1:CanDeleteDataResponse */
class SOAP_CMAC ns1__CanDeleteDataResponse : public xsd__anyType
{
public:
	ns4__abxCan *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns4:abxCan */
public:
	virtual int soap_type() const { return 473; } /* = unique id SOAP_TYPE_ns1__CanDeleteDataResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CanDeleteDataResponse() { ns1__CanDeleteDataResponse::soap_default(NULL); }
	virtual ~ns1__CanDeleteDataResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Fk_USCOREgetRemoteViewList
#define SOAP_TYPE_ns1__Fk_USCOREgetRemoteViewList (474)
/* ns1:Fk_getRemoteViewList */
class SOAP_CMAC ns1__Fk_USCOREgetRemoteViewList : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *host;	/* optional element of type xsd:string */
	char *user;	/* optional element of type xsd:string */
	char *pwd;	/* optional element of type xsd:string */
	char *dbType;	/* optional element of type xsd:string */
	char *databaseName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 474; } /* = unique id SOAP_TYPE_ns1__Fk_USCOREgetRemoteViewList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Fk_USCOREgetRemoteViewList() { ns1__Fk_USCOREgetRemoteViewList::soap_default(NULL); }
	virtual ~ns1__Fk_USCOREgetRemoteViewList() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Fk_USCOREgetRemoteViewListResponse
#define SOAP_TYPE_ns1__Fk_USCOREgetRemoteViewListResponse (475)
/* ns1:Fk_getRemoteViewListResponse */
class SOAP_CMAC ns1__Fk_USCOREgetRemoteViewListResponse : public xsd__anyType
{
public:
	ns1__abxFKResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFKResult */
public:
	virtual int soap_type() const { return 475; } /* = unique id SOAP_TYPE_ns1__Fk_USCOREgetRemoteViewListResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Fk_USCOREgetRemoteViewListResponse() { ns1__Fk_USCOREgetRemoteViewListResponse::soap_default(NULL); }
	virtual ~ns1__Fk_USCOREgetRemoteViewListResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetDataByIdForSecurity
#define SOAP_TYPE_ns1__GetDataByIdForSecurity (476)
/* ns1:GetDataByIdForSecurity */
class SOAP_CMAC ns1__GetDataByIdForSecurity : public xsd__anyType
{
public:
	ns1__IDtype *IDtype_USCORESessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
	char *dataId;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 476; } /* = unique id SOAP_TYPE_ns1__GetDataByIdForSecurity */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetDataByIdForSecurity() { ns1__GetDataByIdForSecurity::soap_default(NULL); }
	virtual ~ns1__GetDataByIdForSecurity() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetDataByIdForSecurityResponse
#define SOAP_TYPE_ns1__GetDataByIdForSecurityResponse (477)
/* ns1:GetDataByIdForSecurityResponse */
class SOAP_CMAC ns1__GetDataByIdForSecurityResponse : public xsd__anyType
{
public:
	ns1__abxDataResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxDataResult */
public:
	virtual int soap_type() const { return 477; } /* = unique id SOAP_TYPE_ns1__GetDataByIdForSecurityResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetDataByIdForSecurityResponse() { ns1__GetDataByIdForSecurityResponse::soap_default(NULL); }
	virtual ~ns1__GetDataByIdForSecurityResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ModifyUserConfig
#define SOAP_TYPE_ns1__ModifyUserConfig (478)
/* ns1:ModifyUserConfig */
class SOAP_CMAC ns1__ModifyUserConfig : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *username;	/* optional element of type xsd:string */
	ns1__abxUser *configList;	/* optional element of type ns1:abxUser */
public:
	virtual int soap_type() const { return 478; } /* = unique id SOAP_TYPE_ns1__ModifyUserConfig */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ModifyUserConfig() { ns1__ModifyUserConfig::soap_default(NULL); }
	virtual ~ns1__ModifyUserConfig() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ModifyUserConfigResponse
#define SOAP_TYPE_ns1__ModifyUserConfigResponse (479)
/* ns1:ModifyUserConfigResponse */
class SOAP_CMAC ns1__ModifyUserConfigResponse : public xsd__anyType
{
public:
	ns1__abxUserListResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxUserListResult */
public:
	virtual int soap_type() const { return 479; } /* = unique id SOAP_TYPE_ns1__ModifyUserConfigResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ModifyUserConfigResponse() { ns1__ModifyUserConfigResponse::soap_default(NULL); }
	virtual ~ns1__ModifyUserConfigResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VerifyExpression
#define SOAP_TYPE_ns1__VerifyExpression (480)
/* ns1:VerifyExpression */
class SOAP_CMAC ns1__VerifyExpression : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	ns1__abxExpression *expr;	/* optional element of type ns1:abxExpression */
public:
	virtual int soap_type() const { return 480; } /* = unique id SOAP_TYPE_ns1__VerifyExpression */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VerifyExpression() { ns1__VerifyExpression::soap_default(NULL); }
	virtual ~ns1__VerifyExpression() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VerifyExpressionResponse
#define SOAP_TYPE_ns1__VerifyExpressionResponse (481)
/* ns1:VerifyExpressionResponse */
class SOAP_CMAC ns1__VerifyExpressionResponse : public xsd__anyType
{
public:
	ns1__abxExpressionResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxExpressionResult */
public:
	virtual int soap_type() const { return 481; } /* = unique id SOAP_TYPE_ns1__VerifyExpressionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VerifyExpressionResponse() { ns1__VerifyExpressionResponse::soap_default(NULL); }
	virtual ~ns1__VerifyExpressionResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteProtocol
#define SOAP_TYPE_ns1__DeleteProtocol (482)
/* ns1:DeleteProtocol */
class SOAP_CMAC ns1__DeleteProtocol : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	ns2__abxProtocol *protocolData;	/* optional element of type ns2:abxProtocol */
public:
	virtual int soap_type() const { return 482; } /* = unique id SOAP_TYPE_ns1__DeleteProtocol */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteProtocol() { ns1__DeleteProtocol::soap_default(NULL); }
	virtual ~ns1__DeleteProtocol() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteProtocolResponse
#define SOAP_TYPE_ns1__DeleteProtocolResponse (483)
/* ns1:DeleteProtocolResponse */
class SOAP_CMAC ns1__DeleteProtocolResponse : public xsd__anyType
{
public:
	ns2__abxProtocolResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns2:abxProtocolResult */
public:
	virtual int soap_type() const { return 483; } /* = unique id SOAP_TYPE_ns1__DeleteProtocolResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteProtocolResponse() { ns1__DeleteProtocolResponse::soap_default(NULL); }
	virtual ~ns1__DeleteProtocolResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DelSign
#define SOAP_TYPE_ns1__DelSign (484)
/* ns1:DelSign */
class SOAP_CMAC ns1__DelSign : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	ns1__abxWorkflow *aw;	/* optional element of type ns1:abxWorkflow */
public:
	virtual int soap_type() const { return 484; } /* = unique id SOAP_TYPE_ns1__DelSign */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DelSign() { ns1__DelSign::soap_default(NULL); }
	virtual ~ns1__DelSign() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DelSignResponse
#define SOAP_TYPE_ns1__DelSignResponse (485)
/* ns1:DelSignResponse */
class SOAP_CMAC ns1__DelSignResponse : public xsd__anyType
{
public:
	ns1__abxWorkflowResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxWorkflowResult */
public:
	virtual int soap_type() const { return 485; } /* = unique id SOAP_TYPE_ns1__DelSignResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DelSignResponse() { ns1__DelSignResponse::soap_default(NULL); }
	virtual ~ns1__DelSignResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteFilter
#define SOAP_TYPE_ns1__DeleteFilter (486)
/* ns1:DeleteFilter */
class SOAP_CMAC ns1__DeleteFilter : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	ns1__AbxFilterList *filters;	/* optional element of type ns1:AbxFilterList */
public:
	virtual int soap_type() const { return 486; } /* = unique id SOAP_TYPE_ns1__DeleteFilter */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteFilter() { ns1__DeleteFilter::soap_default(NULL); }
	virtual ~ns1__DeleteFilter() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteFilterResponse
#define SOAP_TYPE_ns1__DeleteFilterResponse (487)
/* ns1:DeleteFilterResponse */
class SOAP_CMAC ns1__DeleteFilterResponse : public xsd__anyType
{
public:
	ns1__AbxFilterResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:AbxFilterResult */
public:
	virtual int soap_type() const { return 487; } /* = unique id SOAP_TYPE_ns1__DeleteFilterResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteFilterResponse() { ns1__DeleteFilterResponse::soap_default(NULL); }
	virtual ~ns1__DeleteFilterResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CreateRaccoglitore
#define SOAP_TYPE_ns1__CreateRaccoglitore (488)
/* ns1:CreateRaccoglitore */
class SOAP_CMAC ns1__CreateRaccoglitore : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	ns1__abxTemplate *Template2Update;	/* optional element of type ns1:abxTemplate */
	ns1__abxContainer *Container2Update;	/* optional element of type ns1:abxContainer */
	ns3__abxDynamicorgRuleList *DynorgParam;	/* optional element of type ns3:abxDynamicorgRuleList */
	char *abxSecurityId;	/* optional element of type xsd:string */
	ns1__abxExpression *expr;	/* optional element of type ns1:abxExpression */
	ns1__abxReplicationList *replicationList;	/* optional element of type ns1:abxReplicationList */
public:
	virtual int soap_type() const { return 488; } /* = unique id SOAP_TYPE_ns1__CreateRaccoglitore */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CreateRaccoglitore() { ns1__CreateRaccoglitore::soap_default(NULL); }
	virtual ~ns1__CreateRaccoglitore() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CreateRaccoglitoreResponse
#define SOAP_TYPE_ns1__CreateRaccoglitoreResponse (489)
/* ns1:CreateRaccoglitoreResponse */
class SOAP_CMAC ns1__CreateRaccoglitoreResponse : public xsd__anyType
{
public:
	ns1__abxRaccoglitoreResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxRaccoglitoreResult */
public:
	virtual int soap_type() const { return 489; } /* = unique id SOAP_TYPE_ns1__CreateRaccoglitoreResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CreateRaccoglitoreResponse() { ns1__CreateRaccoglitoreResponse::soap_default(NULL); }
	virtual ~ns1__CreateRaccoglitoreResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CanInsertLinkContainerToContainer
#define SOAP_TYPE_ns1__CanInsertLinkContainerToContainer (490)
/* ns1:CanInsertLinkContainerToContainer */
class SOAP_CMAC ns1__CanInsertLinkContainerToContainer : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *instanceNameFrom;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 490; } /* = unique id SOAP_TYPE_ns1__CanInsertLinkContainerToContainer */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CanInsertLinkContainerToContainer() { ns1__CanInsertLinkContainerToContainer::soap_default(NULL); }
	virtual ~ns1__CanInsertLinkContainerToContainer() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CanInsertLinkContainerToContainerResponse
#define SOAP_TYPE_ns1__CanInsertLinkContainerToContainerResponse (491)
/* ns1:CanInsertLinkContainerToContainerResponse */
class SOAP_CMAC ns1__CanInsertLinkContainerToContainerResponse : public xsd__anyType
{
public:
	ns4__abxCan *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns4:abxCan */
public:
	virtual int soap_type() const { return 491; } /* = unique id SOAP_TYPE_ns1__CanInsertLinkContainerToContainerResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CanInsertLinkContainerToContainerResponse() { ns1__CanInsertLinkContainerToContainerResponse::soap_default(NULL); }
	virtual ~ns1__CanInsertLinkContainerToContainerResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UploadEndFileWA
#define SOAP_TYPE_ns1__UploadEndFileWA (492)
/* ns1:UploadEndFileWA */
class SOAP_CMAC ns1__UploadEndFileWA : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
	char *annotazioneId;	/* optional element of type xsd:string */
	char *objName;	/* optional element of type xsd:string */
	ns1__abxFileList *dataListInput;	/* optional element of type ns1:abxFileList */
	char *codePreviousVersion;	/* optional element of type xsd:string */
	char *docTemplateName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 492; } /* = unique id SOAP_TYPE_ns1__UploadEndFileWA */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UploadEndFileWA() { ns1__UploadEndFileWA::soap_default(NULL); }
	virtual ~ns1__UploadEndFileWA() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UploadEndFileWAResponse
#define SOAP_TYPE_ns1__UploadEndFileWAResponse (493)
/* ns1:UploadEndFileWAResponse */
class SOAP_CMAC ns1__UploadEndFileWAResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 493; } /* = unique id SOAP_TYPE_ns1__UploadEndFileWAResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UploadEndFileWAResponse() { ns1__UploadEndFileWAResponse::soap_default(NULL); }
	virtual ~ns1__UploadEndFileWAResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__canCreateRaccoglitore_parentDataID
#define SOAP_TYPE__ns1__canCreateRaccoglitore_parentDataID (1183)
/* ns1:canCreateRaccoglitore-parentDataID */
class SOAP_CMAC _ns1__canCreateRaccoglitore_parentDataID
{
public:
	char *container_USCOREInstanceName;	/* required element of type xsd:string */
	char *hexDataID;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1183; } /* = unique id SOAP_TYPE__ns1__canCreateRaccoglitore_parentDataID */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__canCreateRaccoglitore_parentDataID() { _ns1__canCreateRaccoglitore_parentDataID::soap_default(NULL); }
	virtual ~_ns1__canCreateRaccoglitore_parentDataID() { }
};
#endif

#ifndef SOAP_TYPE_ns1__canCreateRaccoglitore
#define SOAP_TYPE_ns1__canCreateRaccoglitore (494)
/* ns1:canCreateRaccoglitore */
class SOAP_CMAC ns1__canCreateRaccoglitore : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *ContainerParentName;	/* optional element of type xsd:string */
	_ns1__canCreateRaccoglitore_parentDataID *parentDataID;	/* optional element of type ns1:canCreateRaccoglitore-parentDataID */
public:
	virtual int soap_type() const { return 494; } /* = unique id SOAP_TYPE_ns1__canCreateRaccoglitore */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__canCreateRaccoglitore() { ns1__canCreateRaccoglitore::soap_default(NULL); }
	virtual ~ns1__canCreateRaccoglitore() { }
};
#endif

#ifndef SOAP_TYPE_ns1__canCreateRaccoglitoreResponse
#define SOAP_TYPE_ns1__canCreateRaccoglitoreResponse (495)
/* ns1:canCreateRaccoglitoreResponse */
class SOAP_CMAC ns1__canCreateRaccoglitoreResponse : public xsd__anyType
{
public:
	ns4__abxCan *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns4:abxCan */
public:
	virtual int soap_type() const { return 495; } /* = unique id SOAP_TYPE_ns1__canCreateRaccoglitoreResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__canCreateRaccoglitoreResponse() { ns1__canCreateRaccoglitoreResponse::soap_default(NULL); }
	virtual ~ns1__canCreateRaccoglitoreResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CanModifyLinkContainerToContainer
#define SOAP_TYPE_ns1__CanModifyLinkContainerToContainer (496)
/* ns1:CanModifyLinkContainerToContainer */
class SOAP_CMAC ns1__CanModifyLinkContainerToContainer : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *linkTypeName;	/* optional element of type xsd:string */
	char *instanceNameFrom;	/* optional element of type xsd:string */
	char *linkId;	/* optional element of type xsd:string */
	char *instanceNameTo;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 496; } /* = unique id SOAP_TYPE_ns1__CanModifyLinkContainerToContainer */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CanModifyLinkContainerToContainer() { ns1__CanModifyLinkContainerToContainer::soap_default(NULL); }
	virtual ~ns1__CanModifyLinkContainerToContainer() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CanModifyLinkContainerToContainerResponse
#define SOAP_TYPE_ns1__CanModifyLinkContainerToContainerResponse (497)
/* ns1:CanModifyLinkContainerToContainerResponse */
class SOAP_CMAC ns1__CanModifyLinkContainerToContainerResponse : public xsd__anyType
{
public:
	ns4__abxCan *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns4:abxCan */
public:
	virtual int soap_type() const { return 497; } /* = unique id SOAP_TYPE_ns1__CanModifyLinkContainerToContainerResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CanModifyLinkContainerToContainerResponse() { ns1__CanModifyLinkContainerToContainerResponse::soap_default(NULL); }
	virtual ~ns1__CanModifyLinkContainerToContainerResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetSDKWatchFolderDirectories
#define SOAP_TYPE_ns1__GetSDKWatchFolderDirectories (498)
/* ns1:GetSDKWatchFolderDirectories */
class SOAP_CMAC ns1__GetSDKWatchFolderDirectories : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *serverURL;	/* optional element of type xsd:string */
	char *serverRoot;	/* optional element of type xsd:string */
	char *serverType;	/* optional element of type xsd:string */
	char *username;	/* optional element of type xsd:string */
	char *password;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 498; } /* = unique id SOAP_TYPE_ns1__GetSDKWatchFolderDirectories */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetSDKWatchFolderDirectories() { ns1__GetSDKWatchFolderDirectories::soap_default(NULL); }
	virtual ~ns1__GetSDKWatchFolderDirectories() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetSDKWatchFolderDirectoriesResponse
#define SOAP_TYPE_ns1__GetSDKWatchFolderDirectoriesResponse (499)
/* ns1:GetSDKWatchFolderDirectoriesResponse */
class SOAP_CMAC ns1__GetSDKWatchFolderDirectoriesResponse : public xsd__anyType
{
public:
	ns1__abxSDKResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxSDKResult */
public:
	virtual int soap_type() const { return 499; } /* = unique id SOAP_TYPE_ns1__GetSDKWatchFolderDirectoriesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetSDKWatchFolderDirectoriesResponse() { ns1__GetSDKWatchFolderDirectoriesResponse::soap_default(NULL); }
	virtual ~ns1__GetSDKWatchFolderDirectoriesResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetQueryParam
#define SOAP_TYPE_ns1__GetQueryParam (500)
/* ns1:GetQueryParam */
class SOAP_CMAC ns1__GetQueryParam : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	ns1__abxOption4Query *option4query;	/* optional element of type ns1:abxOption4Query */
public:
	virtual int soap_type() const { return 500; } /* = unique id SOAP_TYPE_ns1__GetQueryParam */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetQueryParam() { ns1__GetQueryParam::soap_default(NULL); }
	virtual ~ns1__GetQueryParam() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetQueryParamResponse
#define SOAP_TYPE_ns1__GetQueryParamResponse (501)
/* ns1:GetQueryParamResponse */
class SOAP_CMAC ns1__GetQueryParamResponse : public xsd__anyType
{
public:
	class ns1__abxRetOption4QueryResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxRetOption4QueryResult */
public:
	virtual int soap_type() const { return 501; } /* = unique id SOAP_TYPE_ns1__GetQueryParamResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetQueryParamResponse() { ns1__GetQueryParamResponse::soap_default(NULL); }
	virtual ~ns1__GetQueryParamResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxRetOption4QueryResult
#define SOAP_TYPE_ns1__abxRetOption4QueryResult (502)
/* ns1:abxRetOption4QueryResult */
class SOAP_CMAC ns1__abxRetOption4QueryResult : public xsd__anyType
{
public:
	unsigned int result;	/* required element of type xsd:unsignedInt */
	class ns1__abxQFieldList *allFields;	/* required element of type ns1:abxQFieldList */
	class ns1__abxQobjectList *allFieldsByObject;	/* required element of type ns1:abxQobjectList */
	class ns1__abxQtemplateList *allFieldsByTemplate;	/* required element of type ns1:abxQtemplateList */
	ns1__abxQFieldList *commonFields;	/* required element of type ns1:abxQFieldList */
	ns1__abxOption4Query *option4Query;	/* required element of type ns1:abxOption4Query */
public:
	virtual int soap_type() const { return 502; } /* = unique id SOAP_TYPE_ns1__abxRetOption4QueryResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxRetOption4QueryResult() { ns1__abxRetOption4QueryResult::soap_default(NULL); }
	virtual ~ns1__abxRetOption4QueryResult() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxQFieldList
#define SOAP_TYPE_ns1__abxQFieldList (503)
/* ns1:abxQFieldList */
class SOAP_CMAC ns1__abxQFieldList : public xsd__anyType
{
public:
	int __sizelist;	/* sequence of elements <list> */
	ns1__abxQField **list;	/* required element of type ns1:abxQField */
public:
	virtual int soap_type() const { return 503; } /* = unique id SOAP_TYPE_ns1__abxQFieldList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxQFieldList() { ns1__abxQFieldList::soap_default(NULL); }
	virtual ~ns1__abxQFieldList() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxQobjectList
#define SOAP_TYPE_ns1__abxQobjectList (504)
/* ns1:abxQobjectList */
class SOAP_CMAC ns1__abxQobjectList : public xsd__anyType
{
public:
	int __sizelist;	/* sequence of elements <list> */
	class ns1__abxQobject **list;	/* required element of type ns1:abxQobject */
public:
	virtual int soap_type() const { return 504; } /* = unique id SOAP_TYPE_ns1__abxQobjectList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxQobjectList() { ns1__abxQobjectList::soap_default(NULL); }
	virtual ~ns1__abxQobjectList() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxQobject
#define SOAP_TYPE_ns1__abxQobject (505)
/* ns1:abxQobject */
class SOAP_CMAC ns1__abxQobject : public xsd__anyType
{
public:
	char *ObjName;	/* required element of type xsd:string */
	ns1__abxQFieldList *fields;	/* required element of type ns1:abxQFieldList */
public:
	virtual int soap_type() const { return 505; } /* = unique id SOAP_TYPE_ns1__abxQobject */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxQobject() { ns1__abxQobject::soap_default(NULL); }
	virtual ~ns1__abxQobject() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxQtemplateList
#define SOAP_TYPE_ns1__abxQtemplateList (506)
/* ns1:abxQtemplateList */
class SOAP_CMAC ns1__abxQtemplateList : public xsd__anyType
{
public:
	int __sizelist;	/* sequence of elements <list> */
	class ns1__abxQtemplate **list;	/* required element of type ns1:abxQtemplate */
public:
	virtual int soap_type() const { return 506; } /* = unique id SOAP_TYPE_ns1__abxQtemplateList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxQtemplateList() { ns1__abxQtemplateList::soap_default(NULL); }
	virtual ~ns1__abxQtemplateList() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxQtemplate
#define SOAP_TYPE_ns1__abxQtemplate (507)
/* ns1:abxQtemplate */
class SOAP_CMAC ns1__abxQtemplate : public xsd__anyType
{
public:
	char *templateName;	/* required element of type xsd:string */
	ns1__abxQFieldList *fields;	/* required element of type ns1:abxQFieldList */
public:
	virtual int soap_type() const { return 507; } /* = unique id SOAP_TYPE_ns1__abxQtemplate */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxQtemplate() { ns1__abxQtemplate::soap_default(NULL); }
	virtual ~ns1__abxQtemplate() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetArchSostRules
#define SOAP_TYPE_ns1__GetArchSostRules (508)
/* ns1:GetArchSostRules */
class SOAP_CMAC ns1__GetArchSostRules : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
public:
	virtual int soap_type() const { return 508; } /* = unique id SOAP_TYPE_ns1__GetArchSostRules */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetArchSostRules() { ns1__GetArchSostRules::soap_default(NULL); }
	virtual ~ns1__GetArchSostRules() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetArchSostRulesResponse
#define SOAP_TYPE_ns1__GetArchSostRulesResponse (509)
/* ns1:GetArchSostRulesResponse */
class SOAP_CMAC ns1__GetArchSostRulesResponse : public xsd__anyType
{
public:
	class ns1__abxArchSostResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxArchSostResult */
public:
	virtual int soap_type() const { return 509; } /* = unique id SOAP_TYPE_ns1__GetArchSostRulesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetArchSostRulesResponse() { ns1__GetArchSostRulesResponse::soap_default(NULL); }
	virtual ~ns1__GetArchSostRulesResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxArchSostResult
#define SOAP_TYPE_ns1__abxArchSostResult (510)
/* ns1:abxArchSostResult */
class SOAP_CMAC ns1__abxArchSostResult : public xsd__anyType
{
public:
	unsigned int result;	/* required element of type xsd:unsignedInt */
	class ns1__abxArchSostRuleList *list;	/* required element of type ns1:abxArchSostRuleList */
public:
	virtual int soap_type() const { return 510; } /* = unique id SOAP_TYPE_ns1__abxArchSostResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxArchSostResult() { ns1__abxArchSostResult::soap_default(NULL); }
	virtual ~ns1__abxArchSostResult() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxArchSostRuleList
#define SOAP_TYPE_ns1__abxArchSostRuleList (511)
/* ns1:abxArchSostRuleList */
class SOAP_CMAC ns1__abxArchSostRuleList : public xsd__anyType
{
public:
	int __sizedataList;	/* sequence of elements <dataList> */
	class ns1__abxArchSostRule **dataList;	/* required element of type ns1:abxArchSostRule */
public:
	virtual int soap_type() const { return 511; } /* = unique id SOAP_TYPE_ns1__abxArchSostRuleList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxArchSostRuleList() { ns1__abxArchSostRuleList::soap_default(NULL); }
	virtual ~ns1__abxArchSostRuleList() { }
};
#endif

#ifndef SOAP_TYPE__ns1__abxArchSostRule_abxArchSostRuleFilters
#define SOAP_TYPE__ns1__abxArchSostRule_abxArchSostRuleFilters (1198)
/* ns1:abxArchSostRule-abxArchSostRuleFilters */
class SOAP_CMAC _ns1__abxArchSostRule_abxArchSostRuleFilters
{
public:
	char *filterId;	/* required element of type xsd:string */
	char *ruleId;	/* required element of type xsd:string */
	char *fieldName;	/* required element of type xsd:string */
	char *protocolID;	/* required element of type xsd:string */
	char *protocolDateFrom;	/* required element of type xsd:string */
	char *protocolDateTo;	/* required element of type xsd:string */
	char *protocolNumFrom;	/* required element of type xsd:string */
	char *protocolNumTo;	/* required element of type xsd:string */
	char *fromValue;	/* required element of type xsd:string */
	char *toValue;	/* required element of type xsd:string */
	int shiftFromValue;	/* required element of type xsd:int */
	int shiftToValue;	/* required element of type xsd:int */
	bool replaceDate;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 1198; } /* = unique id SOAP_TYPE__ns1__abxArchSostRule_abxArchSostRuleFilters */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__abxArchSostRule_abxArchSostRuleFilters() { _ns1__abxArchSostRule_abxArchSostRuleFilters::soap_default(NULL); }
	virtual ~_ns1__abxArchSostRule_abxArchSostRuleFilters() { }
};
#endif

#ifndef SOAP_TYPE__ns1__abxArchSostRule_abxArchSostRuleMap
#define SOAP_TYPE__ns1__abxArchSostRule_abxArchSostRuleMap (1200)
/* ns1:abxArchSostRule-abxArchSostRuleMap */
class SOAP_CMAC _ns1__abxArchSostRule_abxArchSostRuleMap
{
public:
	char *mapId;	/* required element of type xsd:string */
	char *ruleId;	/* required element of type xsd:string */
	char *fieldName;	/* required element of type xsd:string */
	bool isProtocol;	/* required element of type xsd:boolean */
	char *metadataClasseDocumentaleName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1200; } /* = unique id SOAP_TYPE__ns1__abxArchSostRule_abxArchSostRuleMap */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__abxArchSostRule_abxArchSostRuleMap() { _ns1__abxArchSostRule_abxArchSostRuleMap::soap_default(NULL); }
	virtual ~_ns1__abxArchSostRule_abxArchSostRuleMap() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxArchSostRule
#define SOAP_TYPE_ns1__abxArchSostRule (512)
/* ns1:abxArchSostRule */
class SOAP_CMAC ns1__abxArchSostRule : public xsd__anyType
{
public:
	int __sizeabxArchSostRuleFilters;	/* sequence of elements <abxArchSostRuleFilters> */
	_ns1__abxArchSostRule_abxArchSostRuleFilters *abxArchSostRuleFilters;	/* required element of type ns1:abxArchSostRule-abxArchSostRuleFilters */
	int __sizeabxArchSostRuleMap;	/* sequence of elements <abxArchSostRuleMap> */
	_ns1__abxArchSostRule_abxArchSostRuleMap *abxArchSostRuleMap;	/* required element of type ns1:abxArchSostRule-abxArchSostRuleMap */
	char *id;	/* required element of type xsd:string */
	char *name;	/* required element of type xsd:string */
	char *instanceName;	/* required element of type xsd:string */
	char *classeDocumentaleName;	/* required element of type xsd:string */
	bool getSignedFile;	/* required element of type xsd:boolean */
	bool zipFile;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 512; } /* = unique id SOAP_TYPE_ns1__abxArchSostRule */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxArchSostRule() { ns1__abxArchSostRule::soap_default(NULL); }
	virtual ~ns1__abxArchSostRule() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetSDKVariables
#define SOAP_TYPE_ns1__GetSDKVariables (513)
/* ns1:GetSDKVariables */
class SOAP_CMAC ns1__GetSDKVariables : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
public:
	virtual int soap_type() const { return 513; } /* = unique id SOAP_TYPE_ns1__GetSDKVariables */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetSDKVariables() { ns1__GetSDKVariables::soap_default(NULL); }
	virtual ~ns1__GetSDKVariables() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetSDKVariablesResponse
#define SOAP_TYPE_ns1__GetSDKVariablesResponse (514)
/* ns1:GetSDKVariablesResponse */
class SOAP_CMAC ns1__GetSDKVariablesResponse : public xsd__anyType
{
public:
	ns1__abxSDKResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxSDKResult */
public:
	virtual int soap_type() const { return 514; } /* = unique id SOAP_TYPE_ns1__GetSDKVariablesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetSDKVariablesResponse() { ns1__GetSDKVariablesResponse::soap_default(NULL); }
	virtual ~ns1__GetSDKVariablesResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DownloadFileWAByFileUniqueCode
#define SOAP_TYPE_ns1__DownloadFileWAByFileUniqueCode (515)
/* ns1:DownloadFileWAByFileUniqueCode */
class SOAP_CMAC ns1__DownloadFileWAByFileUniqueCode : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
	char *fileUniqueCode;	/* optional element of type xsd:string */
	char *dChunk;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 515; } /* = unique id SOAP_TYPE_ns1__DownloadFileWAByFileUniqueCode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DownloadFileWAByFileUniqueCode() { ns1__DownloadFileWAByFileUniqueCode::soap_default(NULL); }
	virtual ~ns1__DownloadFileWAByFileUniqueCode() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DownloadFileWAByFileUniqueCodeResponse
#define SOAP_TYPE_ns1__DownloadFileWAByFileUniqueCodeResponse (516)
/* ns1:DownloadFileWAByFileUniqueCodeResponse */
class SOAP_CMAC ns1__DownloadFileWAByFileUniqueCodeResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 516; } /* = unique id SOAP_TYPE_ns1__DownloadFileWAByFileUniqueCodeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DownloadFileWAByFileUniqueCodeResponse() { ns1__DownloadFileWAByFileUniqueCodeResponse::soap_default(NULL); }
	virtual ~ns1__DownloadFileWAByFileUniqueCodeResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DownloadEndFileWA
#define SOAP_TYPE_ns1__DownloadEndFileWA (517)
/* ns1:DownloadEndFileWA */
class SOAP_CMAC ns1__DownloadEndFileWA : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *fileCode;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 517; } /* = unique id SOAP_TYPE_ns1__DownloadEndFileWA */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DownloadEndFileWA() { ns1__DownloadEndFileWA::soap_default(NULL); }
	virtual ~ns1__DownloadEndFileWA() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DownloadEndFileWAResponse
#define SOAP_TYPE_ns1__DownloadEndFileWAResponse (518)
/* ns1:DownloadEndFileWAResponse */
class SOAP_CMAC ns1__DownloadEndFileWAResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 518; } /* = unique id SOAP_TYPE_ns1__DownloadEndFileWAResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DownloadEndFileWAResponse() { ns1__DownloadEndFileWAResponse::soap_default(NULL); }
	virtual ~ns1__DownloadEndFileWAResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteClasseDocumentale
#define SOAP_TYPE_ns1__DeleteClasseDocumentale (519)
/* ns1:DeleteClasseDocumentale */
class SOAP_CMAC ns1__DeleteClasseDocumentale : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *ClasseDocumentaleName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 519; } /* = unique id SOAP_TYPE_ns1__DeleteClasseDocumentale */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteClasseDocumentale() { ns1__DeleteClasseDocumentale::soap_default(NULL); }
	virtual ~ns1__DeleteClasseDocumentale() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteClasseDocumentaleResponse
#define SOAP_TYPE_ns1__DeleteClasseDocumentaleResponse (520)
/* ns1:DeleteClasseDocumentaleResponse */
class SOAP_CMAC ns1__DeleteClasseDocumentaleResponse : public xsd__anyType
{
public:
	class ns1__abxClasseDocumentaleResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxClasseDocumentaleResult */
public:
	virtual int soap_type() const { return 520; } /* = unique id SOAP_TYPE_ns1__DeleteClasseDocumentaleResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteClasseDocumentaleResponse() { ns1__DeleteClasseDocumentaleResponse::soap_default(NULL); }
	virtual ~ns1__DeleteClasseDocumentaleResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxClasseDocumentaleResult
#define SOAP_TYPE_ns1__abxClasseDocumentaleResult (521)
/* ns1:abxClasseDocumentaleResult */
class SOAP_CMAC ns1__abxClasseDocumentaleResult : public xsd__anyType
{
public:
	unsigned int result;	/* required element of type xsd:unsignedInt */
	class ns1__abxClasseDocumentaleList *list;	/* required element of type ns1:abxClasseDocumentaleList */
public:
	virtual int soap_type() const { return 521; } /* = unique id SOAP_TYPE_ns1__abxClasseDocumentaleResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxClasseDocumentaleResult() { ns1__abxClasseDocumentaleResult::soap_default(NULL); }
	virtual ~ns1__abxClasseDocumentaleResult() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxClasseDocumentaleList
#define SOAP_TYPE_ns1__abxClasseDocumentaleList (522)
/* ns1:abxClasseDocumentaleList */
class SOAP_CMAC ns1__abxClasseDocumentaleList : public xsd__anyType
{
public:
	int __sizedataList;	/* sequence of elements <dataList> */
	class ns1__abxClasseDocumentale **dataList;	/* required element of type ns1:abxClasseDocumentale */
public:
	virtual int soap_type() const { return 522; } /* = unique id SOAP_TYPE_ns1__abxClasseDocumentaleList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxClasseDocumentaleList() { ns1__abxClasseDocumentaleList::soap_default(NULL); }
	virtual ~ns1__abxClasseDocumentaleList() { }
};
#endif

#ifndef SOAP_TYPE__ns1__abxClasseDocumentale_Metadata
#define SOAP_TYPE__ns1__abxClasseDocumentale_Metadata (1206)
/* ns1:abxClasseDocumentale-Metadata */
class SOAP_CMAC _ns1__abxClasseDocumentale_Metadata
{
public:
	char *name;	/* required element of type xsd:string */
	char *type;	/* required element of type xsd:string */
	LONG64 index;	/* required element of type xsd:long */
	bool optional;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 1206; } /* = unique id SOAP_TYPE__ns1__abxClasseDocumentale_Metadata */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__abxClasseDocumentale_Metadata() { _ns1__abxClasseDocumentale_Metadata::soap_default(NULL); }
	virtual ~_ns1__abxClasseDocumentale_Metadata() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxClasseDocumentale
#define SOAP_TYPE_ns1__abxClasseDocumentale (523)
/* ns1:abxClasseDocumentale */
class SOAP_CMAC ns1__abxClasseDocumentale : public xsd__anyType
{
public:
	int __sizeMetadata;	/* sequence of elements <Metadata> */
	_ns1__abxClasseDocumentale_Metadata *Metadata;	/* required element of type ns1:abxClasseDocumentale-Metadata */
	char *name;	/* required element of type xsd:string */
	char *company;	/* required element of type xsd:string */
	LONG64 preserveMaxAge;	/* required element of type xsd:long */
	LONG64 preserveNumDays;	/* required element of type xsd:long */
	bool automaticallySigned;	/* required element of type xsd:boolean */
	bool automaticallyTimestamped;	/* required element of type xsd:boolean */
	bool makeISO;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 523; } /* = unique id SOAP_TYPE_ns1__abxClasseDocumentale */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxClasseDocumentale() { ns1__abxClasseDocumentale::soap_default(NULL); }
	virtual ~ns1__abxClasseDocumentale() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CanDeleteFile
#define SOAP_TYPE_ns1__CanDeleteFile (524)
/* ns1:CanDeleteFile */
class SOAP_CMAC ns1__CanDeleteFile : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
	char *objName;	/* optional element of type xsd:string */
	char *fileCode;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 524; } /* = unique id SOAP_TYPE_ns1__CanDeleteFile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CanDeleteFile() { ns1__CanDeleteFile::soap_default(NULL); }
	virtual ~ns1__CanDeleteFile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CanDeleteFileResponse
#define SOAP_TYPE_ns1__CanDeleteFileResponse (525)
/* ns1:CanDeleteFileResponse */
class SOAP_CMAC ns1__CanDeleteFileResponse : public xsd__anyType
{
public:
	ns4__abxCan *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns4:abxCan */
public:
	virtual int soap_type() const { return 525; } /* = unique id SOAP_TYPE_ns1__CanDeleteFileResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CanDeleteFileResponse() { ns1__CanDeleteFileResponse::soap_default(NULL); }
	virtual ~ns1__CanDeleteFileResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__EndPermissionSettings
#define SOAP_TYPE_ns1__EndPermissionSettings (526)
/* ns1:EndPermissionSettings */
class SOAP_CMAC ns1__EndPermissionSettings : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	ns1__abxPermission *permissionToSet;	/* optional element of type ns1:abxPermission */
public:
	virtual int soap_type() const { return 526; } /* = unique id SOAP_TYPE_ns1__EndPermissionSettings */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__EndPermissionSettings() { ns1__EndPermissionSettings::soap_default(NULL); }
	virtual ~ns1__EndPermissionSettings() { }
};
#endif

#ifndef SOAP_TYPE_ns1__EndPermissionSettingsResponse
#define SOAP_TYPE_ns1__EndPermissionSettingsResponse (527)
/* ns1:EndPermissionSettingsResponse */
class SOAP_CMAC ns1__EndPermissionSettingsResponse : public xsd__anyType
{
public:
	class ns1__abxPermissionResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxPermissionResult */
public:
	virtual int soap_type() const { return 527; } /* = unique id SOAP_TYPE_ns1__EndPermissionSettingsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__EndPermissionSettingsResponse() { ns1__EndPermissionSettingsResponse::soap_default(NULL); }
	virtual ~ns1__EndPermissionSettingsResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxPermissionResult
#define SOAP_TYPE_ns1__abxPermissionResult (528)
/* ns1:abxPermissionResult */
class SOAP_CMAC ns1__abxPermissionResult : public xsd__anyType
{
public:
	unsigned int result;	/* required element of type xsd:unsignedInt */
	class ns1__abxPermissionElenco *list;	/* required element of type ns1:abxPermissionElenco */
public:
	virtual int soap_type() const { return 528; } /* = unique id SOAP_TYPE_ns1__abxPermissionResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxPermissionResult() { ns1__abxPermissionResult::soap_default(NULL); }
	virtual ~ns1__abxPermissionResult() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxPermissionElenco
#define SOAP_TYPE_ns1__abxPermissionElenco (529)
/* ns1:abxPermissionElenco */
class SOAP_CMAC ns1__abxPermissionElenco : public xsd__anyType
{
public:
	int __sizelista;	/* sequence of elements <lista> */
	ns1__abxPermission **lista;	/* required element of type ns1:abxPermission */
public:
	virtual int soap_type() const { return 529; } /* = unique id SOAP_TYPE_ns1__abxPermissionElenco */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxPermissionElenco() { ns1__abxPermissionElenco::soap_default(NULL); }
	virtual ~ns1__abxPermissionElenco() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InsertUserInGroup
#define SOAP_TYPE_ns1__InsertUserInGroup (530)
/* ns1:InsertUserInGroup */
class SOAP_CMAC ns1__InsertUserInGroup : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *username;	/* optional element of type xsd:string */
	char *groupName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 530; } /* = unique id SOAP_TYPE_ns1__InsertUserInGroup */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InsertUserInGroup() { ns1__InsertUserInGroup::soap_default(NULL); }
	virtual ~ns1__InsertUserInGroup() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InsertUserInGroupResponse
#define SOAP_TYPE_ns1__InsertUserInGroupResponse (531)
/* ns1:InsertUserInGroupResponse */
class SOAP_CMAC ns1__InsertUserInGroupResponse : public xsd__anyType
{
public:
	ns1__abxUserListResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxUserListResult */
public:
	virtual int soap_type() const { return 531; } /* = unique id SOAP_TYPE_ns1__InsertUserInGroupResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InsertUserInGroupResponse() { ns1__InsertUserInGroupResponse::soap_default(NULL); }
	virtual ~ns1__InsertUserInGroupResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__canCreateContainer_parentDataID
#define SOAP_TYPE__ns1__canCreateContainer_parentDataID (1211)
/* ns1:canCreateContainer-parentDataID */
class SOAP_CMAC _ns1__canCreateContainer_parentDataID
{
public:
	char *container_USCOREInstanceName;	/* required element of type xsd:string */
	char *hexDataID;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1211; } /* = unique id SOAP_TYPE__ns1__canCreateContainer_parentDataID */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__canCreateContainer_parentDataID() { _ns1__canCreateContainer_parentDataID::soap_default(NULL); }
	virtual ~_ns1__canCreateContainer_parentDataID() { }
};
#endif

#ifndef SOAP_TYPE_ns1__canCreateContainer
#define SOAP_TYPE_ns1__canCreateContainer (532)
/* ns1:canCreateContainer */
class SOAP_CMAC ns1__canCreateContainer : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *ContainerParentName;	/* optional element of type xsd:string */
	_ns1__canCreateContainer_parentDataID *parentDataID;	/* optional element of type ns1:canCreateContainer-parentDataID */
public:
	virtual int soap_type() const { return 532; } /* = unique id SOAP_TYPE_ns1__canCreateContainer */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__canCreateContainer() { ns1__canCreateContainer::soap_default(NULL); }
	virtual ~ns1__canCreateContainer() { }
};
#endif

#ifndef SOAP_TYPE_ns1__canCreateContainerResponse
#define SOAP_TYPE_ns1__canCreateContainerResponse (533)
/* ns1:canCreateContainerResponse */
class SOAP_CMAC ns1__canCreateContainerResponse : public xsd__anyType
{
public:
	ns4__abxCan *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns4:abxCan */
public:
	virtual int soap_type() const { return 533; } /* = unique id SOAP_TYPE_ns1__canCreateContainerResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__canCreateContainerResponse() { ns1__canCreateContainerResponse::soap_default(NULL); }
	virtual ~ns1__canCreateContainerResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetDownloadDetailByFilecode
#define SOAP_TYPE_ns1__GetDownloadDetailByFilecode (534)
/* ns1:GetDownloadDetailByFilecode */
class SOAP_CMAC ns1__GetDownloadDetailByFilecode : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *fileCode;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 534; } /* = unique id SOAP_TYPE_ns1__GetDownloadDetailByFilecode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetDownloadDetailByFilecode() { ns1__GetDownloadDetailByFilecode::soap_default(NULL); }
	virtual ~ns1__GetDownloadDetailByFilecode() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetDownloadDetailByFilecodeResponse
#define SOAP_TYPE_ns1__GetDownloadDetailByFilecodeResponse (535)
/* ns1:GetDownloadDetailByFilecodeResponse */
class SOAP_CMAC ns1__GetDownloadDetailByFilecodeResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 535; } /* = unique id SOAP_TYPE_ns1__GetDownloadDetailByFilecodeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetDownloadDetailByFilecodeResponse() { ns1__GetDownloadDetailByFilecodeResponse::soap_default(NULL); }
	virtual ~ns1__GetDownloadDetailByFilecodeResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetAllFilter
#define SOAP_TYPE_ns1__GetAllFilter (536)
/* ns1:GetAllFilter */
class SOAP_CMAC ns1__GetAllFilter : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
public:
	virtual int soap_type() const { return 536; } /* = unique id SOAP_TYPE_ns1__GetAllFilter */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetAllFilter() { ns1__GetAllFilter::soap_default(NULL); }
	virtual ~ns1__GetAllFilter() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetAllFilterResponse
#define SOAP_TYPE_ns1__GetAllFilterResponse (537)
/* ns1:GetAllFilterResponse */
class SOAP_CMAC ns1__GetAllFilterResponse : public xsd__anyType
{
public:
	ns1__AbxFilterResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:AbxFilterResult */
public:
	virtual int soap_type() const { return 537; } /* = unique id SOAP_TYPE_ns1__GetAllFilterResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetAllFilterResponse() { ns1__GetAllFilterResponse::soap_default(NULL); }
	virtual ~ns1__GetAllFilterResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Fk_USCOREgetAllRecordByIndex
#define SOAP_TYPE_ns1__Fk_USCOREgetAllRecordByIndex (538)
/* ns1:Fk_getAllRecordByIndex */
class SOAP_CMAC ns1__Fk_USCOREgetAllRecordByIndex : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	ns1__abxFK *fk;	/* optional element of type ns1:abxFK */
	int numTotRecord;	/* required element of type xsd:int */
	bool directionDesc;	/* required element of type xsd:boolean */
	char *InstanceName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 538; } /* = unique id SOAP_TYPE_ns1__Fk_USCOREgetAllRecordByIndex */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Fk_USCOREgetAllRecordByIndex() { ns1__Fk_USCOREgetAllRecordByIndex::soap_default(NULL); }
	virtual ~ns1__Fk_USCOREgetAllRecordByIndex() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Fk_USCOREgetAllRecordByIndexResponse
#define SOAP_TYPE_ns1__Fk_USCOREgetAllRecordByIndexResponse (539)
/* ns1:Fk_getAllRecordByIndexResponse */
class SOAP_CMAC ns1__Fk_USCOREgetAllRecordByIndexResponse : public xsd__anyType
{
public:
	ns1__abxFKResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFKResult */
public:
	virtual int soap_type() const { return 539; } /* = unique id SOAP_TYPE_ns1__Fk_USCOREgetAllRecordByIndexResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Fk_USCOREgetAllRecordByIndexResponse() { ns1__Fk_USCOREgetAllRecordByIndexResponse::soap_default(NULL); }
	virtual ~ns1__Fk_USCOREgetAllRecordByIndexResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InsertClasseDocumentale
#define SOAP_TYPE_ns1__InsertClasseDocumentale (540)
/* ns1:InsertClasseDocumentale */
class SOAP_CMAC ns1__InsertClasseDocumentale : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	ns1__abxClasseDocumentale *classeDocumentale;	/* optional element of type ns1:abxClasseDocumentale */
public:
	virtual int soap_type() const { return 540; } /* = unique id SOAP_TYPE_ns1__InsertClasseDocumentale */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InsertClasseDocumentale() { ns1__InsertClasseDocumentale::soap_default(NULL); }
	virtual ~ns1__InsertClasseDocumentale() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InsertClasseDocumentaleResponse
#define SOAP_TYPE_ns1__InsertClasseDocumentaleResponse (541)
/* ns1:InsertClasseDocumentaleResponse */
class SOAP_CMAC ns1__InsertClasseDocumentaleResponse : public xsd__anyType
{
public:
	ns1__abxClasseDocumentaleResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxClasseDocumentaleResult */
public:
	virtual int soap_type() const { return 541; } /* = unique id SOAP_TYPE_ns1__InsertClasseDocumentaleResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InsertClasseDocumentaleResponse() { ns1__InsertClasseDocumentaleResponse::soap_default(NULL); }
	virtual ~ns1__InsertClasseDocumentaleResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CheckOut_USCOREdocument
#define SOAP_TYPE_ns1__CheckOut_USCOREdocument (542)
/* ns1:CheckOut_document */
class SOAP_CMAC ns1__CheckOut_USCOREdocument : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *InstanceName;	/* optional element of type xsd:string */
	char *Path;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 542; } /* = unique id SOAP_TYPE_ns1__CheckOut_USCOREdocument */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CheckOut_USCOREdocument() { ns1__CheckOut_USCOREdocument::soap_default(NULL); }
	virtual ~ns1__CheckOut_USCOREdocument() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CheckOut_USCOREdocumentResponse
#define SOAP_TYPE_ns1__CheckOut_USCOREdocumentResponse (543)
/* ns1:CheckOut_documentResponse */
class SOAP_CMAC ns1__CheckOut_USCOREdocumentResponse : public xsd__anyType
{
public:
	ns1__abxCheckinResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxCheckinResult */
public:
	virtual int soap_type() const { return 543; } /* = unique id SOAP_TYPE_ns1__CheckOut_USCOREdocumentResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CheckOut_USCOREdocumentResponse() { ns1__CheckOut_USCOREdocumentResponse::soap_default(NULL); }
	virtual ~ns1__CheckOut_USCOREdocumentResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DownloadGetNext
#define SOAP_TYPE_ns1__DownloadGetNext (544)
/* ns1:DownloadGetNext */
class SOAP_CMAC ns1__DownloadGetNext : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *fileCode;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 544; } /* = unique id SOAP_TYPE_ns1__DownloadGetNext */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DownloadGetNext() { ns1__DownloadGetNext::soap_default(NULL); }
	virtual ~ns1__DownloadGetNext() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DownloadGetNextResponse
#define SOAP_TYPE_ns1__DownloadGetNextResponse (545)
/* ns1:DownloadGetNextResponse */
class SOAP_CMAC ns1__DownloadGetNextResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 545; } /* = unique id SOAP_TYPE_ns1__DownloadGetNextResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DownloadGetNextResponse() { ns1__DownloadGetNextResponse::soap_default(NULL); }
	virtual ~ns1__DownloadGetNextResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SetTmpUSDownloadPath
#define SOAP_TYPE_ns1__SetTmpUSDownloadPath (546)
/* ns1:SetTmpUSDownloadPath */
class SOAP_CMAC ns1__SetTmpUSDownloadPath : public xsd__anyType
{
public:
	char *path;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 546; } /* = unique id SOAP_TYPE_ns1__SetTmpUSDownloadPath */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SetTmpUSDownloadPath() { ns1__SetTmpUSDownloadPath::soap_default(NULL); }
	virtual ~ns1__SetTmpUSDownloadPath() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SetTmpUSDownloadPathResponse
#define SOAP_TYPE_ns1__SetTmpUSDownloadPathResponse (547)
/* ns1:SetTmpUSDownloadPathResponse */
class SOAP_CMAC ns1__SetTmpUSDownloadPathResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 547; } /* = unique id SOAP_TYPE_ns1__SetTmpUSDownloadPathResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SetTmpUSDownloadPathResponse() { ns1__SetTmpUSDownloadPathResponse::soap_default(NULL); }
	virtual ~ns1__SetTmpUSDownloadPathResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__canCreateTemplate
#define SOAP_TYPE_ns1__canCreateTemplate (548)
/* ns1:canCreateTemplate */
class SOAP_CMAC ns1__canCreateTemplate : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
public:
	virtual int soap_type() const { return 548; } /* = unique id SOAP_TYPE_ns1__canCreateTemplate */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__canCreateTemplate() { ns1__canCreateTemplate::soap_default(NULL); }
	virtual ~ns1__canCreateTemplate() { }
};
#endif

#ifndef SOAP_TYPE_ns1__canCreateTemplateResponse
#define SOAP_TYPE_ns1__canCreateTemplateResponse (549)
/* ns1:canCreateTemplateResponse */
class SOAP_CMAC ns1__canCreateTemplateResponse : public xsd__anyType
{
public:
	ns4__abxCan *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns4:abxCan */
public:
	virtual int soap_type() const { return 549; } /* = unique id SOAP_TYPE_ns1__canCreateTemplateResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__canCreateTemplateResponse() { ns1__canCreateTemplateResponse::soap_default(NULL); }
	virtual ~ns1__canCreateTemplateResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CanDeleteFileContainer
#define SOAP_TYPE_ns1__CanDeleteFileContainer (550)
/* ns1:CanDeleteFileContainer */
class SOAP_CMAC ns1__CanDeleteFileContainer : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
	char *objName;	/* optional element of type xsd:string */
	char *fileCode;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 550; } /* = unique id SOAP_TYPE_ns1__CanDeleteFileContainer */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CanDeleteFileContainer() { ns1__CanDeleteFileContainer::soap_default(NULL); }
	virtual ~ns1__CanDeleteFileContainer() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CanDeleteFileContainerResponse
#define SOAP_TYPE_ns1__CanDeleteFileContainerResponse (551)
/* ns1:CanDeleteFileContainerResponse */
class SOAP_CMAC ns1__CanDeleteFileContainerResponse : public xsd__anyType
{
public:
	ns4__abxCan *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns4:abxCan */
public:
	virtual int soap_type() const { return 551; } /* = unique id SOAP_TYPE_ns1__CanDeleteFileContainerResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CanDeleteFileContainerResponse() { ns1__CanDeleteFileContainerResponse::soap_default(NULL); }
	virtual ~ns1__CanDeleteFileContainerResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__QueryHeader
#define SOAP_TYPE_ns1__QueryHeader (552)
/* ns1:QueryHeader */
class SOAP_CMAC ns1__QueryHeader : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	ns1__abxQexpression *option4query;	/* optional element of type ns1:abxQexpression */
public:
	virtual int soap_type() const { return 552; } /* = unique id SOAP_TYPE_ns1__QueryHeader */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__QueryHeader() { ns1__QueryHeader::soap_default(NULL); }
	virtual ~ns1__QueryHeader() { }
};
#endif

#ifndef SOAP_TYPE_ns1__QueryHeaderResponse
#define SOAP_TYPE_ns1__QueryHeaderResponse (553)
/* ns1:QueryHeaderResponse */
class SOAP_CMAC ns1__QueryHeaderResponse : public xsd__anyType
{
public:
	ns1__abxRetQueryResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxRetQueryResult */
public:
	virtual int soap_type() const { return 553; } /* = unique id SOAP_TYPE_ns1__QueryHeaderResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__QueryHeaderResponse() { ns1__QueryHeaderResponse::soap_default(NULL); }
	virtual ~ns1__QueryHeaderResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetProtocolList
#define SOAP_TYPE_ns1__GetProtocolList (554)
/* ns1:GetProtocolList */
class SOAP_CMAC ns1__GetProtocolList : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
public:
	virtual int soap_type() const { return 554; } /* = unique id SOAP_TYPE_ns1__GetProtocolList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetProtocolList() { ns1__GetProtocolList::soap_default(NULL); }
	virtual ~ns1__GetProtocolList() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetProtocolListResponse
#define SOAP_TYPE_ns1__GetProtocolListResponse (555)
/* ns1:GetProtocolListResponse */
class SOAP_CMAC ns1__GetProtocolListResponse : public xsd__anyType
{
public:
	ns2__abxProtocolResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns2:abxProtocolResult */
public:
	virtual int soap_type() const { return 555; } /* = unique id SOAP_TYPE_ns1__GetProtocolListResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetProtocolListResponse() { ns1__GetProtocolListResponse::soap_default(NULL); }
	virtual ~ns1__GetProtocolListResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetFieldsPropertiesFromTemplate
#define SOAP_TYPE_ns1__GetFieldsPropertiesFromTemplate (556)
/* ns1:GetFieldsPropertiesFromTemplate */
class SOAP_CMAC ns1__GetFieldsPropertiesFromTemplate : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *TemplateName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 556; } /* = unique id SOAP_TYPE_ns1__GetFieldsPropertiesFromTemplate */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetFieldsPropertiesFromTemplate() { ns1__GetFieldsPropertiesFromTemplate::soap_default(NULL); }
	virtual ~ns1__GetFieldsPropertiesFromTemplate() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetFieldsPropertiesFromTemplateResponse
#define SOAP_TYPE_ns1__GetFieldsPropertiesFromTemplateResponse (557)
/* ns1:GetFieldsPropertiesFromTemplateResponse */
class SOAP_CMAC ns1__GetFieldsPropertiesFromTemplateResponse : public xsd__anyType
{
public:
	ns1__abxFieldResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFieldResult */
public:
	virtual int soap_type() const { return 557; } /* = unique id SOAP_TYPE_ns1__GetFieldsPropertiesFromTemplateResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetFieldsPropertiesFromTemplateResponse() { ns1__GetFieldsPropertiesFromTemplateResponse::soap_default(NULL); }
	virtual ~ns1__GetFieldsPropertiesFromTemplateResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CheckOut_USCOREattach
#define SOAP_TYPE_ns1__CheckOut_USCOREattach (558)
/* ns1:CheckOut_attach */
class SOAP_CMAC ns1__CheckOut_USCOREattach : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *InstanceName;	/* optional element of type xsd:string */
	char *Path;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 558; } /* = unique id SOAP_TYPE_ns1__CheckOut_USCOREattach */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CheckOut_USCOREattach() { ns1__CheckOut_USCOREattach::soap_default(NULL); }
	virtual ~ns1__CheckOut_USCOREattach() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CheckOut_USCOREattachResponse
#define SOAP_TYPE_ns1__CheckOut_USCOREattachResponse (559)
/* ns1:CheckOut_attachResponse */
class SOAP_CMAC ns1__CheckOut_USCOREattachResponse : public xsd__anyType
{
public:
	ns1__abxCheckinResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxCheckinResult */
public:
	virtual int soap_type() const { return 559; } /* = unique id SOAP_TYPE_ns1__CheckOut_USCOREattachResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CheckOut_USCOREattachResponse() { ns1__CheckOut_USCOREattachResponse::soap_default(NULL); }
	virtual ~ns1__CheckOut_USCOREattachResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteDataWA
#define SOAP_TYPE_ns1__DeleteDataWA (560)
/* ns1:DeleteDataWA */
class SOAP_CMAC ns1__DeleteDataWA : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
	char *annotazioneId;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 560; } /* = unique id SOAP_TYPE_ns1__DeleteDataWA */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteDataWA() { ns1__DeleteDataWA::soap_default(NULL); }
	virtual ~ns1__DeleteDataWA() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteDataWAResponse
#define SOAP_TYPE_ns1__DeleteDataWAResponse (561)
/* ns1:DeleteDataWAResponse */
class SOAP_CMAC ns1__DeleteDataWAResponse : public xsd__anyType
{
public:
	ns1__abxDataResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxDataResult */
public:
	virtual int soap_type() const { return 561; } /* = unique id SOAP_TYPE_ns1__DeleteDataWAResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteDataWAResponse() { ns1__DeleteDataWAResponse::soap_default(NULL); }
	virtual ~ns1__DeleteDataWAResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteArchSostRule
#define SOAP_TYPE_ns1__DeleteArchSostRule (562)
/* ns1:DeleteArchSostRule */
class SOAP_CMAC ns1__DeleteArchSostRule : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *ruleId;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 562; } /* = unique id SOAP_TYPE_ns1__DeleteArchSostRule */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteArchSostRule() { ns1__DeleteArchSostRule::soap_default(NULL); }
	virtual ~ns1__DeleteArchSostRule() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteArchSostRuleResponse
#define SOAP_TYPE_ns1__DeleteArchSostRuleResponse (563)
/* ns1:DeleteArchSostRuleResponse */
class SOAP_CMAC ns1__DeleteArchSostRuleResponse : public xsd__anyType
{
public:
	ns1__abxArchSostResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxArchSostResult */
public:
	virtual int soap_type() const { return 563; } /* = unique id SOAP_TYPE_ns1__DeleteArchSostRuleResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteArchSostRuleResponse() { ns1__DeleteArchSostRuleResponse::soap_default(NULL); }
	virtual ~ns1__DeleteArchSostRuleResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetMethod
#define SOAP_TYPE_ns1__GetMethod (564)
/* ns1:GetMethod */
class SOAP_CMAC ns1__GetMethod : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
public:
	virtual int soap_type() const { return 564; } /* = unique id SOAP_TYPE_ns1__GetMethod */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetMethod() { ns1__GetMethod::soap_default(NULL); }
	virtual ~ns1__GetMethod() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetMethodResponse
#define SOAP_TYPE_ns1__GetMethodResponse (565)
/* ns1:GetMethodResponse */
class SOAP_CMAC ns1__GetMethodResponse : public xsd__anyType
{
public:
	class ns1__abxGmResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxGmResult */
public:
	virtual int soap_type() const { return 565; } /* = unique id SOAP_TYPE_ns1__GetMethodResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetMethodResponse() { ns1__GetMethodResponse::soap_default(NULL); }
	virtual ~ns1__GetMethodResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxGmResult
#define SOAP_TYPE_ns1__abxGmResult (566)
/* ns1:abxGmResult */
class SOAP_CMAC ns1__abxGmResult : public xsd__anyType
{
public:
	unsigned int result;	/* required element of type xsd:unsignedInt */
	class ns1__abxMethodDef *method;	/* required element of type ns1:abxMethodDef */
public:
	virtual int soap_type() const { return 566; } /* = unique id SOAP_TYPE_ns1__abxGmResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxGmResult() { ns1__abxGmResult::soap_default(NULL); }
	virtual ~ns1__abxGmResult() { }
};
#endif

#ifndef SOAP_TYPE__ns1__abxMethodDef_elmethod
#define SOAP_TYPE__ns1__abxMethodDef_elmethod (1215)
/* ns1:abxMethodDef-elmethod */
class SOAP_CMAC _ns1__abxMethodDef_elmethod
{
public:
	char *methodName;	/* required element of type xsd:string */
	char *description;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1215; } /* = unique id SOAP_TYPE__ns1__abxMethodDef_elmethod */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__abxMethodDef_elmethod() { _ns1__abxMethodDef_elmethod::soap_default(NULL); }
	virtual ~_ns1__abxMethodDef_elmethod() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxMethodDef
#define SOAP_TYPE_ns1__abxMethodDef (567)
/* ns1:abxMethodDef */
class SOAP_CMAC ns1__abxMethodDef : public xsd__anyType
{
public:
	int __sizeelmethod;	/* sequence of elements <elmethod> */
	_ns1__abxMethodDef_elmethod *elmethod;	/* required element of type ns1:abxMethodDef-elmethod */
	xsd__anyType *xxx;	/* required element of type xsd:anyType */
public:
	virtual int soap_type() const { return 567; } /* = unique id SOAP_TYPE_ns1__abxMethodDef */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxMethodDef() { ns1__abxMethodDef::soap_default(NULL); }
	virtual ~ns1__abxMethodDef() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CanAddNewDate
#define SOAP_TYPE_ns1__CanAddNewDate (568)
/* ns1:CanAddNewDate */
class SOAP_CMAC ns1__CanAddNewDate : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	ns2__abxProtocol *protocolData;	/* optional element of type ns2:abxProtocol */
public:
	virtual int soap_type() const { return 568; } /* = unique id SOAP_TYPE_ns1__CanAddNewDate */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CanAddNewDate() { ns1__CanAddNewDate::soap_default(NULL); }
	virtual ~ns1__CanAddNewDate() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CanAddNewDateResponse
#define SOAP_TYPE_ns1__CanAddNewDateResponse (569)
/* ns1:CanAddNewDateResponse */
class SOAP_CMAC ns1__CanAddNewDateResponse : public xsd__anyType
{
public:
	ns4__abxCan *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns4:abxCan */
public:
	virtual int soap_type() const { return 569; } /* = unique id SOAP_TYPE_ns1__CanAddNewDateResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CanAddNewDateResponse() { ns1__CanAddNewDateResponse::soap_default(NULL); }
	virtual ~ns1__CanAddNewDateResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ModifySDKTask
#define SOAP_TYPE_ns1__ModifySDKTask (570)
/* ns1:ModifySDKTask */
class SOAP_CMAC ns1__ModifySDKTask : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	ns1__abxSDKTask *sdkTask;	/* optional element of type ns1:abxSDKTask */
public:
	virtual int soap_type() const { return 570; } /* = unique id SOAP_TYPE_ns1__ModifySDKTask */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ModifySDKTask() { ns1__ModifySDKTask::soap_default(NULL); }
	virtual ~ns1__ModifySDKTask() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ModifySDKTaskResponse
#define SOAP_TYPE_ns1__ModifySDKTaskResponse (571)
/* ns1:ModifySDKTaskResponse */
class SOAP_CMAC ns1__ModifySDKTaskResponse : public xsd__anyType
{
public:
	ns1__abxSDKResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxSDKResult */
public:
	virtual int soap_type() const { return 571; } /* = unique id SOAP_TYPE_ns1__ModifySDKTaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ModifySDKTaskResponse() { ns1__ModifySDKTaskResponse::soap_default(NULL); }
	virtual ~ns1__ModifySDKTaskResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetArchiBoxInDomainByMatricola
#define SOAP_TYPE_ns1__GetArchiBoxInDomainByMatricola (572)
/* ns1:GetArchiBoxInDomainByMatricola */
class SOAP_CMAC ns1__GetArchiBoxInDomainByMatricola : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *matricola;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 572; } /* = unique id SOAP_TYPE_ns1__GetArchiBoxInDomainByMatricola */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetArchiBoxInDomainByMatricola() { ns1__GetArchiBoxInDomainByMatricola::soap_default(NULL); }
	virtual ~ns1__GetArchiBoxInDomainByMatricola() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetArchiBoxInDomainByMatricolaResponse
#define SOAP_TYPE_ns1__GetArchiBoxInDomainByMatricolaResponse (573)
/* ns1:GetArchiBoxInDomainByMatricolaResponse */
class SOAP_CMAC ns1__GetArchiBoxInDomainByMatricolaResponse : public xsd__anyType
{
public:
	ns1__abxArchiBoxDomainResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxArchiBoxDomainResult */
public:
	virtual int soap_type() const { return 573; } /* = unique id SOAP_TYPE_ns1__GetArchiBoxInDomainByMatricolaResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetArchiBoxInDomainByMatricolaResponse() { ns1__GetArchiBoxInDomainByMatricolaResponse::soap_default(NULL); }
	virtual ~ns1__GetArchiBoxInDomainByMatricolaResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InsertTranslationCode
#define SOAP_TYPE_ns1__InsertTranslationCode (574)
/* ns1:InsertTranslationCode */
class SOAP_CMAC ns1__InsertTranslationCode : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	ns1__abxTranslation *transLang;	/* optional element of type ns1:abxTranslation */
	char *exLabelCode;	/* optional element of type xsd:string */
	char *exArchiboxSourceSuffix;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 574; } /* = unique id SOAP_TYPE_ns1__InsertTranslationCode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InsertTranslationCode() { ns1__InsertTranslationCode::soap_default(NULL); }
	virtual ~ns1__InsertTranslationCode() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InsertTranslationCodeResponse
#define SOAP_TYPE_ns1__InsertTranslationCodeResponse (575)
/* ns1:InsertTranslationCodeResponse */
class SOAP_CMAC ns1__InsertTranslationCodeResponse : public xsd__anyType
{
public:
	ns1__abxTranslationResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxTranslationResult */
public:
	virtual int soap_type() const { return 575; } /* = unique id SOAP_TYPE_ns1__InsertTranslationCodeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InsertTranslationCodeResponse() { ns1__InsertTranslationCodeResponse::soap_default(NULL); }
	virtual ~ns1__InsertTranslationCodeResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetGroupList
#define SOAP_TYPE_ns1__GetGroupList (576)
/* ns1:GetGroupList */
class SOAP_CMAC ns1__GetGroupList : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	ns1__abxGroup *groupField;	/* optional element of type ns1:abxGroup */
public:
	virtual int soap_type() const { return 576; } /* = unique id SOAP_TYPE_ns1__GetGroupList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetGroupList() { ns1__GetGroupList::soap_default(NULL); }
	virtual ~ns1__GetGroupList() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetGroupListResponse
#define SOAP_TYPE_ns1__GetGroupListResponse (577)
/* ns1:GetGroupListResponse */
class SOAP_CMAC ns1__GetGroupListResponse : public xsd__anyType
{
public:
	ns1__abxGroupResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxGroupResult */
public:
	virtual int soap_type() const { return 577; } /* = unique id SOAP_TYPE_ns1__GetGroupListResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetGroupListResponse() { ns1__GetGroupListResponse::soap_default(NULL); }
	virtual ~ns1__GetGroupListResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Fk_USCOREgetAllRecordByIndexDesc
#define SOAP_TYPE_ns1__Fk_USCOREgetAllRecordByIndexDesc (578)
/* ns1:Fk_getAllRecordByIndexDesc */
class SOAP_CMAC ns1__Fk_USCOREgetAllRecordByIndexDesc : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	ns1__abxFK *fkp;	/* optional element of type ns1:abxFK */
	int numTotRecord;	/* required element of type xsd:int */
	char *orderBy;	/* optional element of type xsd:string */
	bool directionDesc;	/* required element of type xsd:boolean */
	char *InstanceName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 578; } /* = unique id SOAP_TYPE_ns1__Fk_USCOREgetAllRecordByIndexDesc */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Fk_USCOREgetAllRecordByIndexDesc() { ns1__Fk_USCOREgetAllRecordByIndexDesc::soap_default(NULL); }
	virtual ~ns1__Fk_USCOREgetAllRecordByIndexDesc() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Fk_USCOREgetAllRecordByIndexDescResponse
#define SOAP_TYPE_ns1__Fk_USCOREgetAllRecordByIndexDescResponse (579)
/* ns1:Fk_getAllRecordByIndexDescResponse */
class SOAP_CMAC ns1__Fk_USCOREgetAllRecordByIndexDescResponse : public xsd__anyType
{
public:
	ns1__abxFKResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFKResult */
public:
	virtual int soap_type() const { return 579; } /* = unique id SOAP_TYPE_ns1__Fk_USCOREgetAllRecordByIndexDescResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Fk_USCOREgetAllRecordByIndexDescResponse() { ns1__Fk_USCOREgetAllRecordByIndexDescResponse::soap_default(NULL); }
	virtual ~ns1__Fk_USCOREgetAllRecordByIndexDescResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CanModifyData
#define SOAP_TYPE_ns1__CanModifyData (580)
/* ns1:CanModifyData */
class SOAP_CMAC ns1__CanModifyData : public xsd__anyType
{
public:
	ns1__IDtype *IDtype_USCORESessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
	char *dataId;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 580; } /* = unique id SOAP_TYPE_ns1__CanModifyData */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CanModifyData() { ns1__CanModifyData::soap_default(NULL); }
	virtual ~ns1__CanModifyData() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CanModifyDataResponse
#define SOAP_TYPE_ns1__CanModifyDataResponse (581)
/* ns1:CanModifyDataResponse */
class SOAP_CMAC ns1__CanModifyDataResponse : public xsd__anyType
{
public:
	ns4__abxCan *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns4:abxCan */
public:
	virtual int soap_type() const { return 581; } /* = unique id SOAP_TYPE_ns1__CanModifyDataResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CanModifyDataResponse() { ns1__CanModifyDataResponse::soap_default(NULL); }
	virtual ~ns1__CanModifyDataResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CanAddDigitalSignature
#define SOAP_TYPE_ns1__CanAddDigitalSignature (582)
/* ns1:CanAddDigitalSignature */
class SOAP_CMAC ns1__CanAddDigitalSignature : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
	ns1__abxFileList *dataListInput;	/* optional element of type ns1:abxFileList */
public:
	virtual int soap_type() const { return 582; } /* = unique id SOAP_TYPE_ns1__CanAddDigitalSignature */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CanAddDigitalSignature() { ns1__CanAddDigitalSignature::soap_default(NULL); }
	virtual ~ns1__CanAddDigitalSignature() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CanAddDigitalSignatureResponse
#define SOAP_TYPE_ns1__CanAddDigitalSignatureResponse (583)
/* ns1:CanAddDigitalSignatureResponse */
class SOAP_CMAC ns1__CanAddDigitalSignatureResponse : public xsd__anyType
{
public:
	ns4__abxCan *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns4:abxCan */
public:
	virtual int soap_type() const { return 583; } /* = unique id SOAP_TYPE_ns1__CanAddDigitalSignatureResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CanAddDigitalSignatureResponse() { ns1__CanAddDigitalSignatureResponse::soap_default(NULL); }
	virtual ~ns1__CanAddDigitalSignatureResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Query
#define SOAP_TYPE_ns1__Query (584)
/* ns1:Query */
class SOAP_CMAC ns1__Query : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	ns1__abxQexpression *option4query;	/* optional element of type ns1:abxQexpression */
public:
	virtual int soap_type() const { return 584; } /* = unique id SOAP_TYPE_ns1__Query */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Query() { ns1__Query::soap_default(NULL); }
	virtual ~ns1__Query() { }
};
#endif

#ifndef SOAP_TYPE_ns1__QueryResponse
#define SOAP_TYPE_ns1__QueryResponse (585)
/* ns1:QueryResponse */
class SOAP_CMAC ns1__QueryResponse : public xsd__anyType
{
public:
	ns1__abxRetQueryResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxRetQueryResult */
public:
	virtual int soap_type() const { return 585; } /* = unique id SOAP_TYPE_ns1__QueryResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__QueryResponse() { ns1__QueryResponse::soap_default(NULL); }
	virtual ~ns1__QueryResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetInstanceId
#define SOAP_TYPE_ns1__GetInstanceId (586)
/* ns1:GetInstanceId */
class SOAP_CMAC ns1__GetInstanceId : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *InstanceName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 586; } /* = unique id SOAP_TYPE_ns1__GetInstanceId */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetInstanceId() { ns1__GetInstanceId::soap_default(NULL); }
	virtual ~ns1__GetInstanceId() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetInstanceIdResponse
#define SOAP_TYPE_ns1__GetInstanceIdResponse (587)
/* ns1:GetInstanceIdResponse */
class SOAP_CMAC ns1__GetInstanceIdResponse : public xsd__anyType
{
public:
	class ns1__abxGiiResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxGiiResult */
public:
	virtual int soap_type() const { return 587; } /* = unique id SOAP_TYPE_ns1__GetInstanceIdResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetInstanceIdResponse() { ns1__GetInstanceIdResponse::soap_default(NULL); }
	virtual ~ns1__GetInstanceIdResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxGiiResult
#define SOAP_TYPE_ns1__abxGiiResult (588)
/* ns1:abxGiiResult */
class SOAP_CMAC ns1__abxGiiResult : public xsd__anyType
{
public:
	unsigned int result;	/* required element of type xsd:unsignedInt */
	char *hexId;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 588; } /* = unique id SOAP_TYPE_ns1__abxGiiResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxGiiResult() { ns1__abxGiiResult::soap_default(NULL); }
	virtual ~ns1__abxGiiResult() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InsertArchSostRule
#define SOAP_TYPE_ns1__InsertArchSostRule (589)
/* ns1:InsertArchSostRule */
class SOAP_CMAC ns1__InsertArchSostRule : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	ns1__abxArchSostRule *archSostRule;	/* optional element of type ns1:abxArchSostRule */
public:
	virtual int soap_type() const { return 589; } /* = unique id SOAP_TYPE_ns1__InsertArchSostRule */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InsertArchSostRule() { ns1__InsertArchSostRule::soap_default(NULL); }
	virtual ~ns1__InsertArchSostRule() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InsertArchSostRuleResponse
#define SOAP_TYPE_ns1__InsertArchSostRuleResponse (590)
/* ns1:InsertArchSostRuleResponse */
class SOAP_CMAC ns1__InsertArchSostRuleResponse : public xsd__anyType
{
public:
	ns1__abxArchSostResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxArchSostResult */
public:
	virtual int soap_type() const { return 590; } /* = unique id SOAP_TYPE_ns1__InsertArchSostRuleResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InsertArchSostRuleResponse() { ns1__InsertArchSostRuleResponse::soap_default(NULL); }
	virtual ~ns1__InsertArchSostRuleResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Combo_USCOREinsert
#define SOAP_TYPE_ns1__Combo_USCOREinsert (591)
/* ns1:Combo_insert */
class SOAP_CMAC ns1__Combo_USCOREinsert : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *fieldName;	/* optional element of type xsd:string */
	ns1__abxCombo *recordsArray;	/* optional element of type ns1:abxCombo */
public:
	virtual int soap_type() const { return 591; } /* = unique id SOAP_TYPE_ns1__Combo_USCOREinsert */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Combo_USCOREinsert() { ns1__Combo_USCOREinsert::soap_default(NULL); }
	virtual ~ns1__Combo_USCOREinsert() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Combo_USCOREinsertResponse
#define SOAP_TYPE_ns1__Combo_USCOREinsertResponse (592)
/* ns1:Combo_insertResponse */
class SOAP_CMAC ns1__Combo_USCOREinsertResponse : public xsd__anyType
{
public:
	class ns1__abxComboResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxComboResult */
public:
	virtual int soap_type() const { return 592; } /* = unique id SOAP_TYPE_ns1__Combo_USCOREinsertResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Combo_USCOREinsertResponse() { ns1__Combo_USCOREinsertResponse::soap_default(NULL); }
	virtual ~ns1__Combo_USCOREinsertResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxComboResult
#define SOAP_TYPE_ns1__abxComboResult (593)
/* ns1:abxComboResult */
class SOAP_CMAC ns1__abxComboResult : public xsd__anyType
{
public:
	unsigned int result;	/* required element of type xsd:unsignedInt */
	class ns1__abxComboList *list;	/* required element of type ns1:abxComboList */
public:
	virtual int soap_type() const { return 593; } /* = unique id SOAP_TYPE_ns1__abxComboResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxComboResult() { ns1__abxComboResult::soap_default(NULL); }
	virtual ~ns1__abxComboResult() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxComboList
#define SOAP_TYPE_ns1__abxComboList (594)
/* ns1:abxComboList */
class SOAP_CMAC ns1__abxComboList : public xsd__anyType
{
public:
	int __sizecombo;	/* sequence of elements <combo> */
	ns1__abxCombo **combo;	/* required element of type ns1:abxCombo */
public:
	virtual int soap_type() const { return 594; } /* = unique id SOAP_TYPE_ns1__abxComboList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxComboList() { ns1__abxComboList::soap_default(NULL); }
	virtual ~ns1__abxComboList() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ExtractSDKPDFTemplateTextByArea
#define SOAP_TYPE_ns1__ExtractSDKPDFTemplateTextByArea (595)
/* ns1:ExtractSDKPDFTemplateTextByArea */
class SOAP_CMAC ns1__ExtractSDKPDFTemplateTextByArea : public xsd__anyType
{
public:
	ns1__IDtype *sessionId;	/* optional element of type ns1:IDtype */
	char *idTask;	/* optional element of type xsd:string */
	int x;	/* required element of type xsd:int */
	int y;	/* required element of type xsd:int */
	int width;	/* required element of type xsd:int */
	int height;	/* required element of type xsd:int */
	int page;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 595; } /* = unique id SOAP_TYPE_ns1__ExtractSDKPDFTemplateTextByArea */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ExtractSDKPDFTemplateTextByArea() { ns1__ExtractSDKPDFTemplateTextByArea::soap_default(NULL); }
	virtual ~ns1__ExtractSDKPDFTemplateTextByArea() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ExtractSDKPDFTemplateTextByAreaResponse
#define SOAP_TYPE_ns1__ExtractSDKPDFTemplateTextByAreaResponse (596)
/* ns1:ExtractSDKPDFTemplateTextByAreaResponse */
class SOAP_CMAC ns1__ExtractSDKPDFTemplateTextByAreaResponse : public xsd__anyType
{
public:
	ns1__abxSDKResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxSDKResult */
public:
	virtual int soap_type() const { return 596; } /* = unique id SOAP_TYPE_ns1__ExtractSDKPDFTemplateTextByAreaResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ExtractSDKPDFTemplateTextByAreaResponse() { ns1__ExtractSDKPDFTemplateTextByAreaResponse::soap_default(NULL); }
	virtual ~ns1__ExtractSDKPDFTemplateTextByAreaResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetDefaultObjActList
#define SOAP_TYPE_ns1__GetDefaultObjActList (597)
/* ns1:GetDefaultObjActList */
class SOAP_CMAC ns1__GetDefaultObjActList : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
public:
	virtual int soap_type() const { return 597; } /* = unique id SOAP_TYPE_ns1__GetDefaultObjActList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetDefaultObjActList() { ns1__GetDefaultObjActList::soap_default(NULL); }
	virtual ~ns1__GetDefaultObjActList() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetDefaultObjActListResponse
#define SOAP_TYPE_ns1__GetDefaultObjActListResponse (598)
/* ns1:GetDefaultObjActListResponse */
class SOAP_CMAC ns1__GetDefaultObjActListResponse : public xsd__anyType
{
public:
	ns1__abxPermissionResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxPermissionResult */
public:
	virtual int soap_type() const { return 598; } /* = unique id SOAP_TYPE_ns1__GetDefaultObjActListResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetDefaultObjActListResponse() { ns1__GetDefaultObjActListResponse::soap_default(NULL); }
	virtual ~ns1__GetDefaultObjActListResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetAdjacentArchiBox
#define SOAP_TYPE_ns1__GetAdjacentArchiBox (599)
/* ns1:GetAdjacentArchiBox */
class SOAP_CMAC ns1__GetAdjacentArchiBox : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
public:
	virtual int soap_type() const { return 599; } /* = unique id SOAP_TYPE_ns1__GetAdjacentArchiBox */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetAdjacentArchiBox() { ns1__GetAdjacentArchiBox::soap_default(NULL); }
	virtual ~ns1__GetAdjacentArchiBox() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetAdjacentArchiBoxResponse
#define SOAP_TYPE_ns1__GetAdjacentArchiBoxResponse (600)
/* ns1:GetAdjacentArchiBoxResponse */
class SOAP_CMAC ns1__GetAdjacentArchiBoxResponse : public xsd__anyType
{
public:
	ns1__abxReplicationResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxReplicationResult */
public:
	virtual int soap_type() const { return 600; } /* = unique id SOAP_TYPE_ns1__GetAdjacentArchiBoxResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetAdjacentArchiBoxResponse() { ns1__GetAdjacentArchiBoxResponse::soap_default(NULL); }
	virtual ~ns1__GetAdjacentArchiBoxResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteSDKTask
#define SOAP_TYPE_ns1__DeleteSDKTask (601)
/* ns1:DeleteSDKTask */
class SOAP_CMAC ns1__DeleteSDKTask : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *taskId;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 601; } /* = unique id SOAP_TYPE_ns1__DeleteSDKTask */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteSDKTask() { ns1__DeleteSDKTask::soap_default(NULL); }
	virtual ~ns1__DeleteSDKTask() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteSDKTaskResponse
#define SOAP_TYPE_ns1__DeleteSDKTaskResponse (602)
/* ns1:DeleteSDKTaskResponse */
class SOAP_CMAC ns1__DeleteSDKTaskResponse : public xsd__anyType
{
public:
	ns1__abxSDKResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxSDKResult */
public:
	virtual int soap_type() const { return 602; } /* = unique id SOAP_TYPE_ns1__DeleteSDKTaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteSDKTaskResponse() { ns1__DeleteSDKTaskResponse::soap_default(NULL); }
	virtual ~ns1__DeleteSDKTaskResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DownloadTPEndFile
#define SOAP_TYPE_ns1__DownloadTPEndFile (603)
/* ns1:DownloadTPEndFile */
class SOAP_CMAC ns1__DownloadTPEndFile : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *fileCode;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 603; } /* = unique id SOAP_TYPE_ns1__DownloadTPEndFile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DownloadTPEndFile() { ns1__DownloadTPEndFile::soap_default(NULL); }
	virtual ~ns1__DownloadTPEndFile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DownloadTPEndFileResponse
#define SOAP_TYPE_ns1__DownloadTPEndFileResponse (604)
/* ns1:DownloadTPEndFileResponse */
class SOAP_CMAC ns1__DownloadTPEndFileResponse : public xsd__anyType
{
public:
	ns1__abxFileTpResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileTpResult */
public:
	virtual int soap_type() const { return 604; } /* = unique id SOAP_TYPE_ns1__DownloadTPEndFileResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DownloadTPEndFileResponse() { ns1__DownloadTPEndFileResponse::soap_default(NULL); }
	virtual ~ns1__DownloadTPEndFileResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetUploadDetailByContId
#define SOAP_TYPE_ns1__GetUploadDetailByContId (605)
/* ns1:GetUploadDetailByContId */
class SOAP_CMAC ns1__GetUploadDetailByContId : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 605; } /* = unique id SOAP_TYPE_ns1__GetUploadDetailByContId */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetUploadDetailByContId() { ns1__GetUploadDetailByContId::soap_default(NULL); }
	virtual ~ns1__GetUploadDetailByContId() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetUploadDetailByContIdResponse
#define SOAP_TYPE_ns1__GetUploadDetailByContIdResponse (606)
/* ns1:GetUploadDetailByContIdResponse */
class SOAP_CMAC ns1__GetUploadDetailByContIdResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 606; } /* = unique id SOAP_TYPE_ns1__GetUploadDetailByContIdResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetUploadDetailByContIdResponse() { ns1__GetUploadDetailByContIdResponse::soap_default(NULL); }
	virtual ~ns1__GetUploadDetailByContIdResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetLinksToDocumentFiltered
#define SOAP_TYPE_ns1__GetLinksToDocumentFiltered (607)
/* ns1:GetLinksToDocumentFiltered */
class SOAP_CMAC ns1__GetLinksToDocumentFiltered : public xsd__anyType
{
public:
	ns1__IDtype *IDtype_USCORESessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
	char *dataId;	/* optional element of type xsd:string */
	char *linkType;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 607; } /* = unique id SOAP_TYPE_ns1__GetLinksToDocumentFiltered */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetLinksToDocumentFiltered() { ns1__GetLinksToDocumentFiltered::soap_default(NULL); }
	virtual ~ns1__GetLinksToDocumentFiltered() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetLinksToDocumentFilteredResponse
#define SOAP_TYPE_ns1__GetLinksToDocumentFilteredResponse (608)
/* ns1:GetLinksToDocumentFilteredResponse */
class SOAP_CMAC ns1__GetLinksToDocumentFilteredResponse : public xsd__anyType
{
public:
	ns1__abxLinkResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxLinkResult */
public:
	virtual int soap_type() const { return 608; } /* = unique id SOAP_TYPE_ns1__GetLinksToDocumentFilteredResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetLinksToDocumentFilteredResponse() { ns1__GetLinksToDocumentFilteredResponse::soap_default(NULL); }
	virtual ~ns1__GetLinksToDocumentFilteredResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Fk_USCOREgetRemoteDatabaseList
#define SOAP_TYPE_ns1__Fk_USCOREgetRemoteDatabaseList (609)
/* ns1:Fk_getRemoteDatabaseList */
class SOAP_CMAC ns1__Fk_USCOREgetRemoteDatabaseList : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *host;	/* optional element of type xsd:string */
	char *user;	/* optional element of type xsd:string */
	char *pwd;	/* optional element of type xsd:string */
	char *dbType;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 609; } /* = unique id SOAP_TYPE_ns1__Fk_USCOREgetRemoteDatabaseList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Fk_USCOREgetRemoteDatabaseList() { ns1__Fk_USCOREgetRemoteDatabaseList::soap_default(NULL); }
	virtual ~ns1__Fk_USCOREgetRemoteDatabaseList() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Fk_USCOREgetRemoteDatabaseListResponse
#define SOAP_TYPE_ns1__Fk_USCOREgetRemoteDatabaseListResponse (610)
/* ns1:Fk_getRemoteDatabaseListResponse */
class SOAP_CMAC ns1__Fk_USCOREgetRemoteDatabaseListResponse : public xsd__anyType
{
public:
	ns1__abxFKResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFKResult */
public:
	virtual int soap_type() const { return 610; } /* = unique id SOAP_TYPE_ns1__Fk_USCOREgetRemoteDatabaseListResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Fk_USCOREgetRemoteDatabaseListResponse() { ns1__Fk_USCOREgetRemoteDatabaseListResponse::soap_default(NULL); }
	virtual ~ns1__Fk_USCOREgetRemoteDatabaseListResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetDataFileListForSecurity
#define SOAP_TYPE_ns1__GetDataFileListForSecurity (611)
/* ns1:GetDataFileListForSecurity */
class SOAP_CMAC ns1__GetDataFileListForSecurity : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
	char *dataId;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 611; } /* = unique id SOAP_TYPE_ns1__GetDataFileListForSecurity */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetDataFileListForSecurity() { ns1__GetDataFileListForSecurity::soap_default(NULL); }
	virtual ~ns1__GetDataFileListForSecurity() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetDataFileListForSecurityResponse
#define SOAP_TYPE_ns1__GetDataFileListForSecurityResponse (612)
/* ns1:GetDataFileListForSecurityResponse */
class SOAP_CMAC ns1__GetDataFileListForSecurityResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 612; } /* = unique id SOAP_TYPE_ns1__GetDataFileListForSecurityResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetDataFileListForSecurityResponse() { ns1__GetDataFileListForSecurityResponse::soap_default(NULL); }
	virtual ~ns1__GetDataFileListForSecurityResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetUploadDetailByData
#define SOAP_TYPE_ns1__GetUploadDetailByData (613)
/* ns1:GetUploadDetailByData */
class SOAP_CMAC ns1__GetUploadDetailByData : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 613; } /* = unique id SOAP_TYPE_ns1__GetUploadDetailByData */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetUploadDetailByData() { ns1__GetUploadDetailByData::soap_default(NULL); }
	virtual ~ns1__GetUploadDetailByData() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetUploadDetailByDataResponse
#define SOAP_TYPE_ns1__GetUploadDetailByDataResponse (614)
/* ns1:GetUploadDetailByDataResponse */
class SOAP_CMAC ns1__GetUploadDetailByDataResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 614; } /* = unique id SOAP_TYPE_ns1__GetUploadDetailByDataResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetUploadDetailByDataResponse() { ns1__GetUploadDetailByDataResponse::soap_default(NULL); }
	virtual ~ns1__GetUploadDetailByDataResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DownloadGetChunkWA
#define SOAP_TYPE_ns1__DownloadGetChunkWA (615)
/* ns1:DownloadGetChunkWA */
class SOAP_CMAC ns1__DownloadGetChunkWA : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *fileCode;	/* optional element of type xsd:string */
	char *dimChunk;	/* optional element of type xsd:string */
	char *offset;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 615; } /* = unique id SOAP_TYPE_ns1__DownloadGetChunkWA */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DownloadGetChunkWA() { ns1__DownloadGetChunkWA::soap_default(NULL); }
	virtual ~ns1__DownloadGetChunkWA() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DownloadGetChunkWAResponse
#define SOAP_TYPE_ns1__DownloadGetChunkWAResponse (616)
/* ns1:DownloadGetChunkWAResponse */
class SOAP_CMAC ns1__DownloadGetChunkWAResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 616; } /* = unique id SOAP_TYPE_ns1__DownloadGetChunkWAResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DownloadGetChunkWAResponse() { ns1__DownloadGetChunkWAResponse::soap_default(NULL); }
	virtual ~ns1__DownloadGetChunkWAResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InsertUSFile
#define SOAP_TYPE_ns1__InsertUSFile (617)
/* ns1:InsertUSFile */
class SOAP_CMAC ns1__InsertUSFile : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	ns1__abxFileList *dataListInput;	/* optional element of type ns1:abxFileList */
public:
	virtual int soap_type() const { return 617; } /* = unique id SOAP_TYPE_ns1__InsertUSFile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InsertUSFile() { ns1__InsertUSFile::soap_default(NULL); }
	virtual ~ns1__InsertUSFile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InsertUSFileResponse
#define SOAP_TYPE_ns1__InsertUSFileResponse (618)
/* ns1:InsertUSFileResponse */
class SOAP_CMAC ns1__InsertUSFileResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 618; } /* = unique id SOAP_TYPE_ns1__InsertUSFileResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InsertUSFileResponse() { ns1__InsertUSFileResponse::soap_default(NULL); }
	virtual ~ns1__InsertUSFileResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InsertProtocol
#define SOAP_TYPE_ns1__InsertProtocol (619)
/* ns1:InsertProtocol */
class SOAP_CMAC ns1__InsertProtocol : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	ns2__abxProtocol *protocolData;	/* optional element of type ns2:abxProtocol */
public:
	virtual int soap_type() const { return 619; } /* = unique id SOAP_TYPE_ns1__InsertProtocol */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InsertProtocol() { ns1__InsertProtocol::soap_default(NULL); }
	virtual ~ns1__InsertProtocol() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InsertProtocolResponse
#define SOAP_TYPE_ns1__InsertProtocolResponse (620)
/* ns1:InsertProtocolResponse */
class SOAP_CMAC ns1__InsertProtocolResponse : public xsd__anyType
{
public:
	ns2__abxProtocolResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns2:abxProtocolResult */
public:
	virtual int soap_type() const { return 620; } /* = unique id SOAP_TYPE_ns1__InsertProtocolResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InsertProtocolResponse() { ns1__InsertProtocolResponse::soap_default(NULL); }
	virtual ~ns1__InsertProtocolResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DownloadFilePreview
#define SOAP_TYPE_ns1__DownloadFilePreview (621)
/* ns1:DownloadFilePreview */
class SOAP_CMAC ns1__DownloadFilePreview : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
	char *dataAttachmentId;	/* optional element of type xsd:string */
	char *dChunk;	/* optional element of type xsd:string */
	int *previewType;	/* optional element of type xsd:int */
public:
	virtual int soap_type() const { return 621; } /* = unique id SOAP_TYPE_ns1__DownloadFilePreview */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DownloadFilePreview() { ns1__DownloadFilePreview::soap_default(NULL); }
	virtual ~ns1__DownloadFilePreview() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DownloadFilePreviewResponse
#define SOAP_TYPE_ns1__DownloadFilePreviewResponse (622)
/* ns1:DownloadFilePreviewResponse */
class SOAP_CMAC ns1__DownloadFilePreviewResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 622; } /* = unique id SOAP_TYPE_ns1__DownloadFilePreviewResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DownloadFilePreviewResponse() { ns1__DownloadFilePreviewResponse::soap_default(NULL); }
	virtual ~ns1__DownloadFilePreviewResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AddFileToSyncByArcCue
#define SOAP_TYPE_ns1__AddFileToSyncByArcCue (623)
/* ns1:AddFileToSyncByArcCue */
class SOAP_CMAC ns1__AddFileToSyncByArcCue : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
	char *fileCode;	/* optional element of type xsd:string */
	char *fromArchiboxId;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 623; } /* = unique id SOAP_TYPE_ns1__AddFileToSyncByArcCue */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AddFileToSyncByArcCue() { ns1__AddFileToSyncByArcCue::soap_default(NULL); }
	virtual ~ns1__AddFileToSyncByArcCue() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AddFileToSyncByArcCueResponse
#define SOAP_TYPE_ns1__AddFileToSyncByArcCueResponse (624)
/* ns1:AddFileToSyncByArcCueResponse */
class SOAP_CMAC ns1__AddFileToSyncByArcCueResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 624; } /* = unique id SOAP_TYPE_ns1__AddFileToSyncByArcCueResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AddFileToSyncByArcCueResponse() { ns1__AddFileToSyncByArcCueResponse::soap_default(NULL); }
	virtual ~ns1__AddFileToSyncByArcCueResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AddLogSDK
#define SOAP_TYPE_ns1__AddLogSDK (625)
/* ns1:AddLogSDK */
class SOAP_CMAC ns1__AddLogSDK : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	LONG64 eventTypeCode;	/* required element of type xsd:long */
	LONG64 levelInfoCode;	/* required element of type xsd:long */
	LONG64 messageCode;	/* required element of type xsd:long */
	char *description;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 625; } /* = unique id SOAP_TYPE_ns1__AddLogSDK */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AddLogSDK() { ns1__AddLogSDK::soap_default(NULL); }
	virtual ~ns1__AddLogSDK() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AddLogSDKResponse
#define SOAP_TYPE_ns1__AddLogSDKResponse (626)
/* ns1:AddLogSDKResponse */
class SOAP_CMAC ns1__AddLogSDKResponse : public xsd__anyType
{
public:
	ns1__abxLogResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxLogResult */
public:
	virtual int soap_type() const { return 626; } /* = unique id SOAP_TYPE_ns1__AddLogSDKResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AddLogSDKResponse() { ns1__AddLogSDKResponse::soap_default(NULL); }
	virtual ~ns1__AddLogSDKResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DigitalSign
#define SOAP_TYPE_ns1__DigitalSign (627)
/* ns1:DigitalSign */
class SOAP_CMAC ns1__DigitalSign : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
	int __sizedataIds;	/* sequence of elements <dataIds> */
	char **dataIds;	/* optional element of type xsd:string */
	int __sizefileCodes;	/* sequence of elements <fileCodes> */
	char **fileCodes;	/* optional element of type xsd:string */
	char *signUsername;	/* optional element of type xsd:string */
	char *signPassword;	/* optional element of type xsd:string */
	int *signType;	/* optional element of type xsd:int */
public:
	virtual int soap_type() const { return 627; } /* = unique id SOAP_TYPE_ns1__DigitalSign */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DigitalSign() { ns1__DigitalSign::soap_default(NULL); }
	virtual ~ns1__DigitalSign() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DigitalSignResponse
#define SOAP_TYPE_ns1__DigitalSignResponse (628)
/* ns1:DigitalSignResponse */
class SOAP_CMAC ns1__DigitalSignResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 628; } /* = unique id SOAP_TYPE_ns1__DigitalSignResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DigitalSignResponse() { ns1__DigitalSignResponse::soap_default(NULL); }
	virtual ~ns1__DigitalSignResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetUploadDetailByCont
#define SOAP_TYPE_ns1__GetUploadDetailByCont (629)
/* ns1:GetUploadDetailByCont */
class SOAP_CMAC ns1__GetUploadDetailByCont : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
public:
	virtual int soap_type() const { return 629; } /* = unique id SOAP_TYPE_ns1__GetUploadDetailByCont */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetUploadDetailByCont() { ns1__GetUploadDetailByCont::soap_default(NULL); }
	virtual ~ns1__GetUploadDetailByCont() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetUploadDetailByContResponse
#define SOAP_TYPE_ns1__GetUploadDetailByContResponse (630)
/* ns1:GetUploadDetailByContResponse */
class SOAP_CMAC ns1__GetUploadDetailByContResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 630; } /* = unique id SOAP_TYPE_ns1__GetUploadDetailByContResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetUploadDetailByContResponse() { ns1__GetUploadDetailByContResponse::soap_default(NULL); }
	virtual ~ns1__GetUploadDetailByContResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetFieldProperties
#define SOAP_TYPE_ns1__GetFieldProperties (631)
/* ns1:GetFieldProperties */
class SOAP_CMAC ns1__GetFieldProperties : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *FieldName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 631; } /* = unique id SOAP_TYPE_ns1__GetFieldProperties */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetFieldProperties() { ns1__GetFieldProperties::soap_default(NULL); }
	virtual ~ns1__GetFieldProperties() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetFieldPropertiesResponse
#define SOAP_TYPE_ns1__GetFieldPropertiesResponse (632)
/* ns1:GetFieldPropertiesResponse */
class SOAP_CMAC ns1__GetFieldPropertiesResponse : public xsd__anyType
{
public:
	ns1__abxFieldResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFieldResult */
public:
	virtual int soap_type() const { return 632; } /* = unique id SOAP_TYPE_ns1__GetFieldPropertiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetFieldPropertiesResponse() { ns1__GetFieldPropertiesResponse::soap_default(NULL); }
	virtual ~ns1__GetFieldPropertiesResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DelExpression
#define SOAP_TYPE_ns1__DelExpression (633)
/* ns1:DelExpression */
class SOAP_CMAC ns1__DelExpression : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	ns1__abxExpression *expr;	/* optional element of type ns1:abxExpression */
public:
	virtual int soap_type() const { return 633; } /* = unique id SOAP_TYPE_ns1__DelExpression */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DelExpression() { ns1__DelExpression::soap_default(NULL); }
	virtual ~ns1__DelExpression() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DelExpressionResponse
#define SOAP_TYPE_ns1__DelExpressionResponse (634)
/* ns1:DelExpressionResponse */
class SOAP_CMAC ns1__DelExpressionResponse : public xsd__anyType
{
public:
	ns1__abxExpressionResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxExpressionResult */
public:
	virtual int soap_type() const { return 634; } /* = unique id SOAP_TYPE_ns1__DelExpressionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DelExpressionResponse() { ns1__DelExpressionResponse::soap_default(NULL); }
	virtual ~ns1__DelExpressionResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SetTmpUploadPath
#define SOAP_TYPE_ns1__SetTmpUploadPath (635)
/* ns1:SetTmpUploadPath */
class SOAP_CMAC ns1__SetTmpUploadPath : public xsd__anyType
{
public:
	char *path;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 635; } /* = unique id SOAP_TYPE_ns1__SetTmpUploadPath */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SetTmpUploadPath() { ns1__SetTmpUploadPath::soap_default(NULL); }
	virtual ~ns1__SetTmpUploadPath() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SetTmpUploadPathResponse
#define SOAP_TYPE_ns1__SetTmpUploadPathResponse (636)
/* ns1:SetTmpUploadPathResponse */
class SOAP_CMAC ns1__SetTmpUploadPathResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 636; } /* = unique id SOAP_TYPE_ns1__SetTmpUploadPathResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SetTmpUploadPathResponse() { ns1__SetTmpUploadPathResponse::soap_default(NULL); }
	virtual ~ns1__SetTmpUploadPathResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CanEditProtocol
#define SOAP_TYPE_ns1__CanEditProtocol (637)
/* ns1:CanEditProtocol */
class SOAP_CMAC ns1__CanEditProtocol : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *protocolId;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 637; } /* = unique id SOAP_TYPE_ns1__CanEditProtocol */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CanEditProtocol() { ns1__CanEditProtocol::soap_default(NULL); }
	virtual ~ns1__CanEditProtocol() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CanEditProtocolResponse
#define SOAP_TYPE_ns1__CanEditProtocolResponse (638)
/* ns1:CanEditProtocolResponse */
class SOAP_CMAC ns1__CanEditProtocolResponse : public xsd__anyType
{
public:
	ns4__abxCan *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns4:abxCan */
public:
	virtual int soap_type() const { return 638; } /* = unique id SOAP_TYPE_ns1__CanEditProtocolResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CanEditProtocolResponse() { ns1__CanEditProtocolResponse::soap_default(NULL); }
	virtual ~ns1__CanEditProtocolResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetUserList
#define SOAP_TYPE_ns1__GetUserList (639)
/* ns1:GetUserList */
class SOAP_CMAC ns1__GetUserList : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	ns1__abxUser *userField;	/* optional element of type ns1:abxUser */
public:
	virtual int soap_type() const { return 639; } /* = unique id SOAP_TYPE_ns1__GetUserList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetUserList() { ns1__GetUserList::soap_default(NULL); }
	virtual ~ns1__GetUserList() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetUserListResponse
#define SOAP_TYPE_ns1__GetUserListResponse (640)
/* ns1:GetUserListResponse */
class SOAP_CMAC ns1__GetUserListResponse : public xsd__anyType
{
public:
	ns1__abxUserListResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxUserListResult */
public:
	virtual int soap_type() const { return 640; } /* = unique id SOAP_TYPE_ns1__GetUserListResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetUserListResponse() { ns1__GetUserListResponse::soap_default(NULL); }
	virtual ~ns1__GetUserListResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteUSFileByCode
#define SOAP_TYPE_ns1__DeleteUSFileByCode (641)
/* ns1:DeleteUSFileByCode */
class SOAP_CMAC ns1__DeleteUSFileByCode : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *fileCode;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 641; } /* = unique id SOAP_TYPE_ns1__DeleteUSFileByCode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteUSFileByCode() { ns1__DeleteUSFileByCode::soap_default(NULL); }
	virtual ~ns1__DeleteUSFileByCode() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteUSFileByCodeResponse
#define SOAP_TYPE_ns1__DeleteUSFileByCodeResponse (642)
/* ns1:DeleteUSFileByCodeResponse */
class SOAP_CMAC ns1__DeleteUSFileByCodeResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 642; } /* = unique id SOAP_TYPE_ns1__DeleteUSFileByCodeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteUSFileByCodeResponse() { ns1__DeleteUSFileByCodeResponse::soap_default(NULL); }
	virtual ~ns1__DeleteUSFileByCodeResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UploadTPSendChunk
#define SOAP_TYPE_ns1__UploadTPSendChunk (643)
/* ns1:UploadTPSendChunk */
class SOAP_CMAC ns1__UploadTPSendChunk : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *fileCode;	/* optional element of type xsd:string */
	xsd__base64Binary *chunk;	/* optional element of type xsd:base64Binary */
public:
	virtual int soap_type() const { return 643; } /* = unique id SOAP_TYPE_ns1__UploadTPSendChunk */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UploadTPSendChunk() { ns1__UploadTPSendChunk::soap_default(NULL); }
	virtual ~ns1__UploadTPSendChunk() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UploadTPSendChunkResponse
#define SOAP_TYPE_ns1__UploadTPSendChunkResponse (644)
/* ns1:UploadTPSendChunkResponse */
class SOAP_CMAC ns1__UploadTPSendChunkResponse : public xsd__anyType
{
public:
	ns1__abxFileTpResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileTpResult */
public:
	virtual int soap_type() const { return 644; } /* = unique id SOAP_TYPE_ns1__UploadTPSendChunkResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UploadTPSendChunkResponse() { ns1__UploadTPSendChunkResponse::soap_default(NULL); }
	virtual ~ns1__UploadTPSendChunkResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DownloadFileContainer
#define SOAP_TYPE_ns1__DownloadFileContainer (645)
/* ns1:DownloadFileContainer */
class SOAP_CMAC ns1__DownloadFileContainer : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *containerAttachmentId;	/* optional element of type xsd:string */
	char *dChunk;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 645; } /* = unique id SOAP_TYPE_ns1__DownloadFileContainer */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DownloadFileContainer() { ns1__DownloadFileContainer::soap_default(NULL); }
	virtual ~ns1__DownloadFileContainer() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DownloadFileContainerResponse
#define SOAP_TYPE_ns1__DownloadFileContainerResponse (646)
/* ns1:DownloadFileContainerResponse */
class SOAP_CMAC ns1__DownloadFileContainerResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 646; } /* = unique id SOAP_TYPE_ns1__DownloadFileContainerResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DownloadFileContainerResponse() { ns1__DownloadFileContainerResponse::soap_default(NULL); }
	virtual ~ns1__DownloadFileContainerResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SetTmpTPDownloadPath
#define SOAP_TYPE_ns1__SetTmpTPDownloadPath (647)
/* ns1:SetTmpTPDownloadPath */
class SOAP_CMAC ns1__SetTmpTPDownloadPath : public xsd__anyType
{
public:
	char *path;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 647; } /* = unique id SOAP_TYPE_ns1__SetTmpTPDownloadPath */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SetTmpTPDownloadPath() { ns1__SetTmpTPDownloadPath::soap_default(NULL); }
	virtual ~ns1__SetTmpTPDownloadPath() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SetTmpTPDownloadPathResponse
#define SOAP_TYPE_ns1__SetTmpTPDownloadPathResponse (648)
/* ns1:SetTmpTPDownloadPathResponse */
class SOAP_CMAC ns1__SetTmpTPDownloadPathResponse : public xsd__anyType
{
public:
	ns1__abxFileTpResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileTpResult */
public:
	virtual int soap_type() const { return 648; } /* = unique id SOAP_TYPE_ns1__SetTmpTPDownloadPathResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SetTmpTPDownloadPathResponse() { ns1__SetTmpTPDownloadPathResponse::soap_default(NULL); }
	virtual ~ns1__SetTmpTPDownloadPathResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteUSFileById
#define SOAP_TYPE_ns1__DeleteUSFileById (649)
/* ns1:DeleteUSFileById */
class SOAP_CMAC ns1__DeleteUSFileById : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *fileId;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 649; } /* = unique id SOAP_TYPE_ns1__DeleteUSFileById */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteUSFileById() { ns1__DeleteUSFileById::soap_default(NULL); }
	virtual ~ns1__DeleteUSFileById() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteUSFileByIdResponse
#define SOAP_TYPE_ns1__DeleteUSFileByIdResponse (650)
/* ns1:DeleteUSFileByIdResponse */
class SOAP_CMAC ns1__DeleteUSFileByIdResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 650; } /* = unique id SOAP_TYPE_ns1__DeleteUSFileByIdResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteUSFileByIdResponse() { ns1__DeleteUSFileByIdResponse::soap_default(NULL); }
	virtual ~ns1__DeleteUSFileByIdResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteTranslationByCode
#define SOAP_TYPE_ns1__DeleteTranslationByCode (651)
/* ns1:DeleteTranslationByCode */
class SOAP_CMAC ns1__DeleteTranslationByCode : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *messageId;	/* optional element of type xsd:string */
	char *exLabelCode;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 651; } /* = unique id SOAP_TYPE_ns1__DeleteTranslationByCode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteTranslationByCode() { ns1__DeleteTranslationByCode::soap_default(NULL); }
	virtual ~ns1__DeleteTranslationByCode() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteTranslationByCodeResponse
#define SOAP_TYPE_ns1__DeleteTranslationByCodeResponse (652)
/* ns1:DeleteTranslationByCodeResponse */
class SOAP_CMAC ns1__DeleteTranslationByCodeResponse : public xsd__anyType
{
public:
	ns1__abxTranslationResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxTranslationResult */
public:
	virtual int soap_type() const { return 652; } /* = unique id SOAP_TYPE_ns1__DeleteTranslationByCodeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteTranslationByCodeResponse() { ns1__DeleteTranslationByCodeResponse::soap_default(NULL); }
	virtual ~ns1__DeleteTranslationByCodeResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InsertFilter
#define SOAP_TYPE_ns1__InsertFilter (653)
/* ns1:InsertFilter */
class SOAP_CMAC ns1__InsertFilter : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	ns1__AbxFilter *filter;	/* optional element of type ns1:AbxFilter */
public:
	virtual int soap_type() const { return 653; } /* = unique id SOAP_TYPE_ns1__InsertFilter */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InsertFilter() { ns1__InsertFilter::soap_default(NULL); }
	virtual ~ns1__InsertFilter() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InsertFilterResponse
#define SOAP_TYPE_ns1__InsertFilterResponse (654)
/* ns1:InsertFilterResponse */
class SOAP_CMAC ns1__InsertFilterResponse : public xsd__anyType
{
public:
	ns1__AbxFilterResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:AbxFilterResult */
public:
	virtual int soap_type() const { return 654; } /* = unique id SOAP_TYPE_ns1__InsertFilterResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InsertFilterResponse() { ns1__InsertFilterResponse::soap_default(NULL); }
	virtual ~ns1__InsertFilterResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetDataFileList
#define SOAP_TYPE_ns1__GetDataFileList (655)
/* ns1:GetDataFileList */
class SOAP_CMAC ns1__GetDataFileList : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
	char *dataId;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 655; } /* = unique id SOAP_TYPE_ns1__GetDataFileList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetDataFileList() { ns1__GetDataFileList::soap_default(NULL); }
	virtual ~ns1__GetDataFileList() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetDataFileListResponse
#define SOAP_TYPE_ns1__GetDataFileListResponse (656)
/* ns1:GetDataFileListResponse */
class SOAP_CMAC ns1__GetDataFileListResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 656; } /* = unique id SOAP_TYPE_ns1__GetDataFileListResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetDataFileListResponse() { ns1__GetDataFileListResponse::soap_default(NULL); }
	virtual ~ns1__GetDataFileListResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetDataTPFileList
#define SOAP_TYPE_ns1__GetDataTPFileList (657)
/* ns1:GetDataTPFileList */
class SOAP_CMAC ns1__GetDataTPFileList : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
public:
	virtual int soap_type() const { return 657; } /* = unique id SOAP_TYPE_ns1__GetDataTPFileList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetDataTPFileList() { ns1__GetDataTPFileList::soap_default(NULL); }
	virtual ~ns1__GetDataTPFileList() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetDataTPFileListResponse
#define SOAP_TYPE_ns1__GetDataTPFileListResponse (658)
/* ns1:GetDataTPFileListResponse */
class SOAP_CMAC ns1__GetDataTPFileListResponse : public xsd__anyType
{
public:
	ns1__abxFileTpResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileTpResult */
public:
	virtual int soap_type() const { return 658; } /* = unique id SOAP_TYPE_ns1__GetDataTPFileListResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetDataTPFileListResponse() { ns1__GetDataTPFileListResponse::soap_default(NULL); }
	virtual ~ns1__GetDataTPFileListResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetRootId
#define SOAP_TYPE_ns1__GetRootId (659)
/* ns1:GetRootId */
class SOAP_CMAC ns1__GetRootId : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
public:
	virtual int soap_type() const { return 659; } /* = unique id SOAP_TYPE_ns1__GetRootId */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetRootId() { ns1__GetRootId::soap_default(NULL); }
	virtual ~ns1__GetRootId() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetRootIdResponse
#define SOAP_TYPE_ns1__GetRootIdResponse (660)
/* ns1:GetRootIdResponse */
class SOAP_CMAC ns1__GetRootIdResponse : public xsd__anyType
{
public:
	ns1__abxGiiResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxGiiResult */
public:
	virtual int soap_type() const { return 660; } /* = unique id SOAP_TYPE_ns1__GetRootIdResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetRootIdResponse() { ns1__GetRootIdResponse::soap_default(NULL); }
	virtual ~ns1__GetRootIdResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetTranslationByLabelCode
#define SOAP_TYPE_ns1__GetTranslationByLabelCode (661)
/* ns1:GetTranslationByLabelCode */
class SOAP_CMAC ns1__GetTranslationByLabelCode : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *exLabelCode;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 661; } /* = unique id SOAP_TYPE_ns1__GetTranslationByLabelCode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetTranslationByLabelCode() { ns1__GetTranslationByLabelCode::soap_default(NULL); }
	virtual ~ns1__GetTranslationByLabelCode() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetTranslationByLabelCodeResponse
#define SOAP_TYPE_ns1__GetTranslationByLabelCodeResponse (662)
/* ns1:GetTranslationByLabelCodeResponse */
class SOAP_CMAC ns1__GetTranslationByLabelCodeResponse : public xsd__anyType
{
public:
	ns1__abxTranslationResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxTranslationResult */
public:
	virtual int soap_type() const { return 662; } /* = unique id SOAP_TYPE_ns1__GetTranslationByLabelCodeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetTranslationByLabelCodeResponse() { ns1__GetTranslationByLabelCodeResponse::soap_default(NULL); }
	virtual ~ns1__GetTranslationByLabelCodeResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetSchedulerTasksToRun
#define SOAP_TYPE_ns1__GetSchedulerTasksToRun (663)
/* ns1:GetSchedulerTasksToRun */
class SOAP_CMAC ns1__GetSchedulerTasksToRun : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
public:
	virtual int soap_type() const { return 663; } /* = unique id SOAP_TYPE_ns1__GetSchedulerTasksToRun */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetSchedulerTasksToRun() { ns1__GetSchedulerTasksToRun::soap_default(NULL); }
	virtual ~ns1__GetSchedulerTasksToRun() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetSchedulerTasksToRunResponse
#define SOAP_TYPE_ns1__GetSchedulerTasksToRunResponse (664)
/* ns1:GetSchedulerTasksToRunResponse */
class SOAP_CMAC ns1__GetSchedulerTasksToRunResponse : public xsd__anyType
{
public:
	ns1__abxSchedulerResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxSchedulerResult */
public:
	virtual int soap_type() const { return 664; } /* = unique id SOAP_TYPE_ns1__GetSchedulerTasksToRunResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetSchedulerTasksToRunResponse() { ns1__GetSchedulerTasksToRunResponse::soap_default(NULL); }
	virtual ~ns1__GetSchedulerTasksToRunResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DownloadFileByFileUniqueCode
#define SOAP_TYPE_ns1__DownloadFileByFileUniqueCode (665)
/* ns1:DownloadFileByFileUniqueCode */
class SOAP_CMAC ns1__DownloadFileByFileUniqueCode : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
	char *fileUniqueCode;	/* optional element of type xsd:string */
	char *dChunk;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 665; } /* = unique id SOAP_TYPE_ns1__DownloadFileByFileUniqueCode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DownloadFileByFileUniqueCode() { ns1__DownloadFileByFileUniqueCode::soap_default(NULL); }
	virtual ~ns1__DownloadFileByFileUniqueCode() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DownloadFileByFileUniqueCodeResponse
#define SOAP_TYPE_ns1__DownloadFileByFileUniqueCodeResponse (666)
/* ns1:DownloadFileByFileUniqueCodeResponse */
class SOAP_CMAC ns1__DownloadFileByFileUniqueCodeResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 666; } /* = unique id SOAP_TYPE_ns1__DownloadFileByFileUniqueCodeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DownloadFileByFileUniqueCodeResponse() { ns1__DownloadFileByFileUniqueCodeResponse::soap_default(NULL); }
	virtual ~ns1__DownloadFileByFileUniqueCodeResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ModifyRaccoglitore
#define SOAP_TYPE_ns1__ModifyRaccoglitore (667)
/* ns1:ModifyRaccoglitore */
class SOAP_CMAC ns1__ModifyRaccoglitore : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	ns1__abxTemplate *Template2Update;	/* optional element of type ns1:abxTemplate */
	ns1__abxContainer *Container2Update;	/* optional element of type ns1:abxContainer */
	ns3__abxDynamicorgRuleList *DynorgParam;	/* optional element of type ns3:abxDynamicorgRuleList */
	char *abxSecurityId;	/* optional element of type xsd:string */
	ns1__abxExpression *expr;	/* optional element of type ns1:abxExpression */
	ns1__abxReplicationList *replicationList;	/* optional element of type ns1:abxReplicationList */
public:
	virtual int soap_type() const { return 667; } /* = unique id SOAP_TYPE_ns1__ModifyRaccoglitore */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ModifyRaccoglitore() { ns1__ModifyRaccoglitore::soap_default(NULL); }
	virtual ~ns1__ModifyRaccoglitore() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ModifyRaccoglitoreResponse
#define SOAP_TYPE_ns1__ModifyRaccoglitoreResponse (668)
/* ns1:ModifyRaccoglitoreResponse */
class SOAP_CMAC ns1__ModifyRaccoglitoreResponse : public xsd__anyType
{
public:
	ns1__abxRaccoglitoreResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxRaccoglitoreResult */
public:
	virtual int soap_type() const { return 668; } /* = unique id SOAP_TYPE_ns1__ModifyRaccoglitoreResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ModifyRaccoglitoreResponse() { ns1__ModifyRaccoglitoreResponse::soap_default(NULL); }
	virtual ~ns1__ModifyRaccoglitoreResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SetTmpUSUploadPath
#define SOAP_TYPE_ns1__SetTmpUSUploadPath (669)
/* ns1:SetTmpUSUploadPath */
class SOAP_CMAC ns1__SetTmpUSUploadPath : public xsd__anyType
{
public:
	char *path;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 669; } /* = unique id SOAP_TYPE_ns1__SetTmpUSUploadPath */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SetTmpUSUploadPath() { ns1__SetTmpUSUploadPath::soap_default(NULL); }
	virtual ~ns1__SetTmpUSUploadPath() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SetTmpUSUploadPathResponse
#define SOAP_TYPE_ns1__SetTmpUSUploadPathResponse (670)
/* ns1:SetTmpUSUploadPathResponse */
class SOAP_CMAC ns1__SetTmpUSUploadPathResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 670; } /* = unique id SOAP_TYPE_ns1__SetTmpUSUploadPathResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SetTmpUSUploadPathResponse() { ns1__SetTmpUSUploadPathResponse::soap_default(NULL); }
	virtual ~ns1__SetTmpUSUploadPathResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Fk_USCOREDB_USCOREmodify
#define SOAP_TYPE_ns1__Fk_USCOREDB_USCOREmodify (671)
/* ns1:Fk_DB_modify */
class SOAP_CMAC ns1__Fk_USCOREDB_USCOREmodify : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *fieldName;	/* optional element of type xsd:string */
	ns1__abxFK *fk;	/* optional element of type ns1:abxFK */
	bool optionGetCache;	/* required element of type xsd:boolean */
	bool optionSetDesc;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 671; } /* = unique id SOAP_TYPE_ns1__Fk_USCOREDB_USCOREmodify */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Fk_USCOREDB_USCOREmodify() { ns1__Fk_USCOREDB_USCOREmodify::soap_default(NULL); }
	virtual ~ns1__Fk_USCOREDB_USCOREmodify() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Fk_USCOREDB_USCOREmodifyResponse
#define SOAP_TYPE_ns1__Fk_USCOREDB_USCOREmodifyResponse (672)
/* ns1:Fk_DB_modifyResponse */
class SOAP_CMAC ns1__Fk_USCOREDB_USCOREmodifyResponse : public xsd__anyType
{
public:
	ns1__abxFKResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFKResult */
public:
	virtual int soap_type() const { return 672; } /* = unique id SOAP_TYPE_ns1__Fk_USCOREDB_USCOREmodifyResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Fk_USCOREDB_USCOREmodifyResponse() { ns1__Fk_USCOREDB_USCOREmodifyResponse::soap_default(NULL); }
	virtual ~ns1__Fk_USCOREDB_USCOREmodifyResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UploadWFEndFile
#define SOAP_TYPE_ns1__UploadWFEndFile (673)
/* ns1:UploadWFEndFile */
class SOAP_CMAC ns1__UploadWFEndFile : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
	char *objName;	/* optional element of type xsd:string */
	ns1__abxFileList *dataListInput;	/* optional element of type ns1:abxFileList */
	char *codePrevioWFVersion;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 673; } /* = unique id SOAP_TYPE_ns1__UploadWFEndFile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UploadWFEndFile() { ns1__UploadWFEndFile::soap_default(NULL); }
	virtual ~ns1__UploadWFEndFile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UploadWFEndFileResponse
#define SOAP_TYPE_ns1__UploadWFEndFileResponse (674)
/* ns1:UploadWFEndFileResponse */
class SOAP_CMAC ns1__UploadWFEndFileResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 674; } /* = unique id SOAP_TYPE_ns1__UploadWFEndFileResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UploadWFEndFileResponse() { ns1__UploadWFEndFileResponse::soap_default(NULL); }
	virtual ~ns1__UploadWFEndFileResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetDataFileListContainer
#define SOAP_TYPE_ns1__GetDataFileListContainer (675)
/* ns1:GetDataFileListContainer */
class SOAP_CMAC ns1__GetDataFileListContainer : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 675; } /* = unique id SOAP_TYPE_ns1__GetDataFileListContainer */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetDataFileListContainer() { ns1__GetDataFileListContainer::soap_default(NULL); }
	virtual ~ns1__GetDataFileListContainer() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetDataFileListContainerResponse
#define SOAP_TYPE_ns1__GetDataFileListContainerResponse (676)
/* ns1:GetDataFileListContainerResponse */
class SOAP_CMAC ns1__GetDataFileListContainerResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 676; } /* = unique id SOAP_TYPE_ns1__GetDataFileListContainerResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetDataFileListContainerResponse() { ns1__GetDataFileListContainerResponse::soap_default(NULL); }
	virtual ~ns1__GetDataFileListContainerResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ModSign
#define SOAP_TYPE_ns1__ModSign (677)
/* ns1:ModSign */
class SOAP_CMAC ns1__ModSign : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	ns1__abxWorkflow *aw;	/* optional element of type ns1:abxWorkflow */
public:
	virtual int soap_type() const { return 677; } /* = unique id SOAP_TYPE_ns1__ModSign */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ModSign() { ns1__ModSign::soap_default(NULL); }
	virtual ~ns1__ModSign() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ModSignResponse
#define SOAP_TYPE_ns1__ModSignResponse (678)
/* ns1:ModSignResponse */
class SOAP_CMAC ns1__ModSignResponse : public xsd__anyType
{
public:
	ns1__abxWorkflowResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxWorkflowResult */
public:
	virtual int soap_type() const { return 678; } /* = unique id SOAP_TYPE_ns1__ModSignResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ModSignResponse() { ns1__ModSignResponse::soap_default(NULL); }
	virtual ~ns1__ModSignResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Combo_USCOREgetAll
#define SOAP_TYPE_ns1__Combo_USCOREgetAll (679)
/* ns1:Combo_getAll */
class SOAP_CMAC ns1__Combo_USCOREgetAll : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *fieldName;	/* optional element of type xsd:string */
	char *InstanceName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 679; } /* = unique id SOAP_TYPE_ns1__Combo_USCOREgetAll */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Combo_USCOREgetAll() { ns1__Combo_USCOREgetAll::soap_default(NULL); }
	virtual ~ns1__Combo_USCOREgetAll() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Combo_USCOREgetAllResponse
#define SOAP_TYPE_ns1__Combo_USCOREgetAllResponse (680)
/* ns1:Combo_getAllResponse */
class SOAP_CMAC ns1__Combo_USCOREgetAllResponse : public xsd__anyType
{
public:
	ns1__abxComboResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxComboResult */
public:
	virtual int soap_type() const { return 680; } /* = unique id SOAP_TYPE_ns1__Combo_USCOREgetAllResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Combo_USCOREgetAllResponse() { ns1__Combo_USCOREgetAllResponse::soap_default(NULL); }
	virtual ~ns1__Combo_USCOREgetAllResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DownloadGetChunk
#define SOAP_TYPE_ns1__DownloadGetChunk (681)
/* ns1:DownloadGetChunk */
class SOAP_CMAC ns1__DownloadGetChunk : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *fileCode;	/* optional element of type xsd:string */
	char *dimChunk;	/* optional element of type xsd:string */
	char *offset;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 681; } /* = unique id SOAP_TYPE_ns1__DownloadGetChunk */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DownloadGetChunk() { ns1__DownloadGetChunk::soap_default(NULL); }
	virtual ~ns1__DownloadGetChunk() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DownloadGetChunkResponse
#define SOAP_TYPE_ns1__DownloadGetChunkResponse (682)
/* ns1:DownloadGetChunkResponse */
class SOAP_CMAC ns1__DownloadGetChunkResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 682; } /* = unique id SOAP_TYPE_ns1__DownloadGetChunkResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DownloadGetChunkResponse() { ns1__DownloadGetChunkResponse::soap_default(NULL); }
	virtual ~ns1__DownloadGetChunkResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ModifyGroup
#define SOAP_TYPE_ns1__ModifyGroup (683)
/* ns1:ModifyGroup */
class SOAP_CMAC ns1__ModifyGroup : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	ns1__abxGroup *group;	/* optional element of type ns1:abxGroup */
public:
	virtual int soap_type() const { return 683; } /* = unique id SOAP_TYPE_ns1__ModifyGroup */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ModifyGroup() { ns1__ModifyGroup::soap_default(NULL); }
	virtual ~ns1__ModifyGroup() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ModifyGroupResponse
#define SOAP_TYPE_ns1__ModifyGroupResponse (684)
/* ns1:ModifyGroupResponse */
class SOAP_CMAC ns1__ModifyGroupResponse : public xsd__anyType
{
public:
	ns1__abxGroupResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxGroupResult */
public:
	virtual int soap_type() const { return 684; } /* = unique id SOAP_TYPE_ns1__ModifyGroupResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ModifyGroupResponse() { ns1__ModifyGroupResponse::soap_default(NULL); }
	virtual ~ns1__ModifyGroupResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InsertUserConfig
#define SOAP_TYPE_ns1__InsertUserConfig (685)
/* ns1:InsertUserConfig */
class SOAP_CMAC ns1__InsertUserConfig : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *username;	/* optional element of type xsd:string */
	ns1__abxUser *configList;	/* optional element of type ns1:abxUser */
public:
	virtual int soap_type() const { return 685; } /* = unique id SOAP_TYPE_ns1__InsertUserConfig */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InsertUserConfig() { ns1__InsertUserConfig::soap_default(NULL); }
	virtual ~ns1__InsertUserConfig() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InsertUserConfigResponse
#define SOAP_TYPE_ns1__InsertUserConfigResponse (686)
/* ns1:InsertUserConfigResponse */
class SOAP_CMAC ns1__InsertUserConfigResponse : public xsd__anyType
{
public:
	ns1__abxUserListResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxUserListResult */
public:
	virtual int soap_type() const { return 686; } /* = unique id SOAP_TYPE_ns1__InsertUserConfigResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InsertUserConfigResponse() { ns1__InsertUserConfigResponse::soap_default(NULL); }
	virtual ~ns1__InsertUserConfigResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetProtocolByName
#define SOAP_TYPE_ns1__GetProtocolByName (687)
/* ns1:GetProtocolByName */
class SOAP_CMAC ns1__GetProtocolByName : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *protocolName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 687; } /* = unique id SOAP_TYPE_ns1__GetProtocolByName */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetProtocolByName() { ns1__GetProtocolByName::soap_default(NULL); }
	virtual ~ns1__GetProtocolByName() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetProtocolByNameResponse
#define SOAP_TYPE_ns1__GetProtocolByNameResponse (688)
/* ns1:GetProtocolByNameResponse */
class SOAP_CMAC ns1__GetProtocolByNameResponse : public xsd__anyType
{
public:
	ns2__abxProtocolResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns2:abxProtocolResult */
public:
	virtual int soap_type() const { return 688; } /* = unique id SOAP_TYPE_ns1__GetProtocolByNameResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetProtocolByNameResponse() { ns1__GetProtocolByNameResponse::soap_default(NULL); }
	virtual ~ns1__GetProtocolByNameResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__canModifyContainer
#define SOAP_TYPE_ns1__canModifyContainer (689)
/* ns1:canModifyContainer */
class SOAP_CMAC ns1__canModifyContainer : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *ContainerName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 689; } /* = unique id SOAP_TYPE_ns1__canModifyContainer */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__canModifyContainer() { ns1__canModifyContainer::soap_default(NULL); }
	virtual ~ns1__canModifyContainer() { }
};
#endif

#ifndef SOAP_TYPE_ns1__canModifyContainerResponse
#define SOAP_TYPE_ns1__canModifyContainerResponse (690)
/* ns1:canModifyContainerResponse */
class SOAP_CMAC ns1__canModifyContainerResponse : public xsd__anyType
{
public:
	ns4__abxCan *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns4:abxCan */
public:
	virtual int soap_type() const { return 690; } /* = unique id SOAP_TYPE_ns1__canModifyContainerResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__canModifyContainerResponse() { ns1__canModifyContainerResponse::soap_default(NULL); }
	virtual ~ns1__canModifyContainerResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InsertTranslationDecimalCode
#define SOAP_TYPE_ns1__InsertTranslationDecimalCode (691)
/* ns1:InsertTranslationDecimalCode */
class SOAP_CMAC ns1__InsertTranslationDecimalCode : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	ns1__abxTranslation *transLang;	/* optional element of type ns1:abxTranslation */
	char *decimalLabelCode;	/* optional element of type xsd:string */
	char *exArchiboxSourceSuffix;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 691; } /* = unique id SOAP_TYPE_ns1__InsertTranslationDecimalCode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InsertTranslationDecimalCode() { ns1__InsertTranslationDecimalCode::soap_default(NULL); }
	virtual ~ns1__InsertTranslationDecimalCode() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InsertTranslationDecimalCodeResponse
#define SOAP_TYPE_ns1__InsertTranslationDecimalCodeResponse (692)
/* ns1:InsertTranslationDecimalCodeResponse */
class SOAP_CMAC ns1__InsertTranslationDecimalCodeResponse : public xsd__anyType
{
public:
	ns1__abxTranslationResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxTranslationResult */
public:
	virtual int soap_type() const { return 692; } /* = unique id SOAP_TYPE_ns1__InsertTranslationDecimalCodeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InsertTranslationDecimalCodeResponse() { ns1__InsertTranslationDecimalCodeResponse::soap_default(NULL); }
	virtual ~ns1__InsertTranslationDecimalCodeResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetTranslationBySourceSuffix
#define SOAP_TYPE_ns1__GetTranslationBySourceSuffix (693)
/* ns1:GetTranslationBySourceSuffix */
class SOAP_CMAC ns1__GetTranslationBySourceSuffix : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *exSourceSuffix;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 693; } /* = unique id SOAP_TYPE_ns1__GetTranslationBySourceSuffix */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetTranslationBySourceSuffix() { ns1__GetTranslationBySourceSuffix::soap_default(NULL); }
	virtual ~ns1__GetTranslationBySourceSuffix() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetTranslationBySourceSuffixResponse
#define SOAP_TYPE_ns1__GetTranslationBySourceSuffixResponse (694)
/* ns1:GetTranslationBySourceSuffixResponse */
class SOAP_CMAC ns1__GetTranslationBySourceSuffixResponse : public xsd__anyType
{
public:
	ns1__abxTranslationResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxTranslationResult */
public:
	virtual int soap_type() const { return 694; } /* = unique id SOAP_TYPE_ns1__GetTranslationBySourceSuffixResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetTranslationBySourceSuffixResponse() { ns1__GetTranslationBySourceSuffixResponse::soap_default(NULL); }
	virtual ~ns1__GetTranslationBySourceSuffixResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetDynorgList
#define SOAP_TYPE_ns1__GetDynorgList (695)
/* ns1:GetDynorgList */
class SOAP_CMAC ns1__GetDynorgList : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
public:
	virtual int soap_type() const { return 695; } /* = unique id SOAP_TYPE_ns1__GetDynorgList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetDynorgList() { ns1__GetDynorgList::soap_default(NULL); }
	virtual ~ns1__GetDynorgList() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetDynorgListResponse
#define SOAP_TYPE_ns1__GetDynorgListResponse (696)
/* ns1:GetDynorgListResponse */
class SOAP_CMAC ns1__GetDynorgListResponse : public xsd__anyType
{
public:
	ns3__abxDynamicRuleResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns3:abxDynamicRuleResult */
public:
	virtual int soap_type() const { return 696; } /* = unique id SOAP_TYPE_ns1__GetDynorgListResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetDynorgListResponse() { ns1__GetDynorgListResponse::soap_default(NULL); }
	virtual ~ns1__GetDynorgListResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Fk_USCOREDB_USCOREdelete
#define SOAP_TYPE_ns1__Fk_USCOREDB_USCOREdelete (697)
/* ns1:Fk_DB_delete */
class SOAP_CMAC ns1__Fk_USCOREDB_USCOREdelete : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *fieldName;	/* optional element of type xsd:string */
	ns1__abxFK *fk;	/* optional element of type ns1:abxFK */
public:
	virtual int soap_type() const { return 697; } /* = unique id SOAP_TYPE_ns1__Fk_USCOREDB_USCOREdelete */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Fk_USCOREDB_USCOREdelete() { ns1__Fk_USCOREDB_USCOREdelete::soap_default(NULL); }
	virtual ~ns1__Fk_USCOREDB_USCOREdelete() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Fk_USCOREDB_USCOREdeleteResponse
#define SOAP_TYPE_ns1__Fk_USCOREDB_USCOREdeleteResponse (698)
/* ns1:Fk_DB_deleteResponse */
class SOAP_CMAC ns1__Fk_USCOREDB_USCOREdeleteResponse : public xsd__anyType
{
public:
	ns1__abxFKResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFKResult */
public:
	virtual int soap_type() const { return 698; } /* = unique id SOAP_TYPE_ns1__Fk_USCOREDB_USCOREdeleteResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Fk_USCOREDB_USCOREdeleteResponse() { ns1__Fk_USCOREDB_USCOREdeleteResponse::soap_default(NULL); }
	virtual ~ns1__Fk_USCOREDB_USCOREdeleteResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UploadTPEndFile
#define SOAP_TYPE_ns1__UploadTPEndFile (699)
/* ns1:UploadTPEndFile */
class SOAP_CMAC ns1__UploadTPEndFile : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	ns1__abxFileTpList *dataListInput;	/* optional element of type ns1:abxFileTpList */
	char *codePreviousVersion;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 699; } /* = unique id SOAP_TYPE_ns1__UploadTPEndFile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UploadTPEndFile() { ns1__UploadTPEndFile::soap_default(NULL); }
	virtual ~ns1__UploadTPEndFile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UploadTPEndFileResponse
#define SOAP_TYPE_ns1__UploadTPEndFileResponse (700)
/* ns1:UploadTPEndFileResponse */
class SOAP_CMAC ns1__UploadTPEndFileResponse : public xsd__anyType
{
public:
	ns1__abxFileTpResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileTpResult */
public:
	virtual int soap_type() const { return 700; } /* = unique id SOAP_TYPE_ns1__UploadTPEndFileResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UploadTPEndFileResponse() { ns1__UploadTPEndFileResponse::soap_default(NULL); }
	virtual ~ns1__UploadTPEndFileResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AddUserSettings
#define SOAP_TYPE_ns1__AddUserSettings (701)
/* ns1:AddUserSettings */
class SOAP_CMAC ns1__AddUserSettings : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	ns1__abxWorkflow *aw;	/* optional element of type ns1:abxWorkflow */
public:
	virtual int soap_type() const { return 701; } /* = unique id SOAP_TYPE_ns1__AddUserSettings */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AddUserSettings() { ns1__AddUserSettings::soap_default(NULL); }
	virtual ~ns1__AddUserSettings() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AddUserSettingsResponse
#define SOAP_TYPE_ns1__AddUserSettingsResponse (702)
/* ns1:AddUserSettingsResponse */
class SOAP_CMAC ns1__AddUserSettingsResponse : public xsd__anyType
{
public:
	ns1__abxWorkflowResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxWorkflowResult */
public:
	virtual int soap_type() const { return 702; } /* = unique id SOAP_TYPE_ns1__AddUserSettingsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AddUserSettingsResponse() { ns1__AddUserSettingsResponse::soap_default(NULL); }
	virtual ~ns1__AddUserSettingsResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetUploadDetailByDataId
#define SOAP_TYPE_ns1__GetUploadDetailByDataId (703)
/* ns1:GetUploadDetailByDataId */
class SOAP_CMAC ns1__GetUploadDetailByDataId : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
	char *dataId;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 703; } /* = unique id SOAP_TYPE_ns1__GetUploadDetailByDataId */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetUploadDetailByDataId() { ns1__GetUploadDetailByDataId::soap_default(NULL); }
	virtual ~ns1__GetUploadDetailByDataId() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetUploadDetailByDataIdResponse
#define SOAP_TYPE_ns1__GetUploadDetailByDataIdResponse (704)
/* ns1:GetUploadDetailByDataIdResponse */
class SOAP_CMAC ns1__GetUploadDetailByDataIdResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 704; } /* = unique id SOAP_TYPE_ns1__GetUploadDetailByDataIdResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetUploadDetailByDataIdResponse() { ns1__GetUploadDetailByDataIdResponse::soap_default(NULL); }
	virtual ~ns1__GetUploadDetailByDataIdResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Combo_USCOREremoveItem
#define SOAP_TYPE_ns1__Combo_USCOREremoveItem (705)
/* ns1:Combo_removeItem */
class SOAP_CMAC ns1__Combo_USCOREremoveItem : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *fieldName;	/* optional element of type xsd:string */
	char *descItem;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 705; } /* = unique id SOAP_TYPE_ns1__Combo_USCOREremoveItem */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Combo_USCOREremoveItem() { ns1__Combo_USCOREremoveItem::soap_default(NULL); }
	virtual ~ns1__Combo_USCOREremoveItem() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Combo_USCOREremoveItemResponse
#define SOAP_TYPE_ns1__Combo_USCOREremoveItemResponse (706)
/* ns1:Combo_removeItemResponse */
class SOAP_CMAC ns1__Combo_USCOREremoveItemResponse : public xsd__anyType
{
public:
	ns1__abxComboResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxComboResult */
public:
	virtual int soap_type() const { return 706; } /* = unique id SOAP_TYPE_ns1__Combo_USCOREremoveItemResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Combo_USCOREremoveItemResponse() { ns1__Combo_USCOREremoveItemResponse::soap_default(NULL); }
	virtual ~ns1__Combo_USCOREremoveItemResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ModifyDynorg
#define SOAP_TYPE_ns1__ModifyDynorg (707)
/* ns1:ModifyDynorg */
class SOAP_CMAC ns1__ModifyDynorg : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	ns3__abxDynamicorgRuleList *DynorgParam;	/* optional element of type ns3:abxDynamicorgRuleList */
public:
	virtual int soap_type() const { return 707; } /* = unique id SOAP_TYPE_ns1__ModifyDynorg */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ModifyDynorg() { ns1__ModifyDynorg::soap_default(NULL); }
	virtual ~ns1__ModifyDynorg() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ModifyDynorgResponse
#define SOAP_TYPE_ns1__ModifyDynorgResponse (708)
/* ns1:ModifyDynorgResponse */
class SOAP_CMAC ns1__ModifyDynorgResponse : public xsd__anyType
{
public:
	ns3__abxDynamicRuleResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns3:abxDynamicRuleResult */
public:
	virtual int soap_type() const { return 708; } /* = unique id SOAP_TYPE_ns1__ModifyDynorgResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ModifyDynorgResponse() { ns1__ModifyDynorgResponse::soap_default(NULL); }
	virtual ~ns1__ModifyDynorgResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetDataById
#define SOAP_TYPE_ns1__GetDataById (709)
/* ns1:GetDataById */
class SOAP_CMAC ns1__GetDataById : public xsd__anyType
{
public:
	ns1__IDtype *IDtype_USCORESessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
	char *dataId;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 709; } /* = unique id SOAP_TYPE_ns1__GetDataById */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetDataById() { ns1__GetDataById::soap_default(NULL); }
	virtual ~ns1__GetDataById() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetDataByIdResponse
#define SOAP_TYPE_ns1__GetDataByIdResponse (710)
/* ns1:GetDataByIdResponse */
class SOAP_CMAC ns1__GetDataByIdResponse : public xsd__anyType
{
public:
	ns1__abxDataResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxDataResult */
public:
	virtual int soap_type() const { return 710; } /* = unique id SOAP_TYPE_ns1__GetDataByIdResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetDataByIdResponse() { ns1__GetDataByIdResponse::soap_default(NULL); }
	virtual ~ns1__GetDataByIdResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteWFFileByCode
#define SOAP_TYPE_ns1__DeleteWFFileByCode (711)
/* ns1:DeleteWFFileByCode */
class SOAP_CMAC ns1__DeleteWFFileByCode : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *fileCode;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 711; } /* = unique id SOAP_TYPE_ns1__DeleteWFFileByCode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteWFFileByCode() { ns1__DeleteWFFileByCode::soap_default(NULL); }
	virtual ~ns1__DeleteWFFileByCode() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteWFFileByCodeResponse
#define SOAP_TYPE_ns1__DeleteWFFileByCodeResponse (712)
/* ns1:DeleteWFFileByCodeResponse */
class SOAP_CMAC ns1__DeleteWFFileByCodeResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 712; } /* = unique id SOAP_TYPE_ns1__DeleteWFFileByCodeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteWFFileByCodeResponse() { ns1__DeleteWFFileByCodeResponse::soap_default(NULL); }
	virtual ~ns1__DeleteWFFileByCodeResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetListDataWA
#define SOAP_TYPE_ns1__GetListDataWA (713)
/* ns1:GetListDataWA */
class SOAP_CMAC ns1__GetListDataWA : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
	char *dataId;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 713; } /* = unique id SOAP_TYPE_ns1__GetListDataWA */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetListDataWA() { ns1__GetListDataWA::soap_default(NULL); }
	virtual ~ns1__GetListDataWA() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetListDataWAResponse
#define SOAP_TYPE_ns1__GetListDataWAResponse (714)
/* ns1:GetListDataWAResponse */
class SOAP_CMAC ns1__GetListDataWAResponse : public xsd__anyType
{
public:
	ns1__abxDataResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxDataResult */
public:
	virtual int soap_type() const { return 714; } /* = unique id SOAP_TYPE_ns1__GetListDataWAResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetListDataWAResponse() { ns1__GetListDataWAResponse::soap_default(NULL); }
	virtual ~ns1__GetListDataWAResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetContSign
#define SOAP_TYPE_ns1__GetContSign (715)
/* ns1:GetContSign */
class SOAP_CMAC ns1__GetContSign : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 715; } /* = unique id SOAP_TYPE_ns1__GetContSign */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetContSign() { ns1__GetContSign::soap_default(NULL); }
	virtual ~ns1__GetContSign() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetContSignResponse
#define SOAP_TYPE_ns1__GetContSignResponse (716)
/* ns1:GetContSignResponse */
class SOAP_CMAC ns1__GetContSignResponse : public xsd__anyType
{
public:
	ns1__abxWorkflowResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxWorkflowResult */
public:
	virtual int soap_type() const { return 716; } /* = unique id SOAP_TYPE_ns1__GetContSignResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetContSignResponse() { ns1__GetContSignResponse::soap_default(NULL); }
	virtual ~ns1__GetContSignResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetDomainList
#define SOAP_TYPE_ns1__GetDomainList (717)
/* ns1:GetDomainList */
class SOAP_CMAC ns1__GetDomainList : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
public:
	virtual int soap_type() const { return 717; } /* = unique id SOAP_TYPE_ns1__GetDomainList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetDomainList() { ns1__GetDomainList::soap_default(NULL); }
	virtual ~ns1__GetDomainList() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetDomainListResponse
#define SOAP_TYPE_ns1__GetDomainListResponse (718)
/* ns1:GetDomainListResponse */
class SOAP_CMAC ns1__GetDomainListResponse : public xsd__anyType
{
public:
	class ns1__abxDomainResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxDomainResult */
public:
	virtual int soap_type() const { return 718; } /* = unique id SOAP_TYPE_ns1__GetDomainListResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetDomainListResponse() { ns1__GetDomainListResponse::soap_default(NULL); }
	virtual ~ns1__GetDomainListResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxDomainResult
#define SOAP_TYPE_ns1__abxDomainResult (719)
/* ns1:abxDomainResult */
class SOAP_CMAC ns1__abxDomainResult : public xsd__anyType
{
public:
	class ns1__abxDomainList *list;	/* required element of type ns1:abxDomainList */
	unsigned int result;	/* required element of type xsd:unsignedInt */
public:
	virtual int soap_type() const { return 719; } /* = unique id SOAP_TYPE_ns1__abxDomainResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxDomainResult() { ns1__abxDomainResult::soap_default(NULL); }
	virtual ~ns1__abxDomainResult() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxDomainList
#define SOAP_TYPE_ns1__abxDomainList (720)
/* ns1:abxDomainList */
class SOAP_CMAC ns1__abxDomainList : public xsd__anyType
{
public:
	int __sizedomainList;	/* sequence of elements <domainList> */
	class ns1__abxDomain **domainList;	/* required element of type ns1:abxDomain */
public:
	virtual int soap_type() const { return 720; } /* = unique id SOAP_TYPE_ns1__abxDomainList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxDomainList() { ns1__abxDomainList::soap_default(NULL); }
	virtual ~ns1__abxDomainList() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxDomain
#define SOAP_TYPE_ns1__abxDomain (721)
/* ns1:abxDomain */
class SOAP_CMAC ns1__abxDomain : public xsd__anyType
{
public:
	char *domain_USCOREhash;	/* required element of type xsd:string */
	char *domain_USCOREname;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 721; } /* = unique id SOAP_TYPE_ns1__abxDomain */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxDomain() { ns1__abxDomain::soap_default(NULL); }
	virtual ~ns1__abxDomain() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UploadSendChunkWA
#define SOAP_TYPE_ns1__UploadSendChunkWA (722)
/* ns1:UploadSendChunkWA */
class SOAP_CMAC ns1__UploadSendChunkWA : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *fileCode;	/* optional element of type xsd:string */
	xsd__base64Binary *chunk;	/* optional element of type xsd:base64Binary */
public:
	virtual int soap_type() const { return 722; } /* = unique id SOAP_TYPE_ns1__UploadSendChunkWA */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UploadSendChunkWA() { ns1__UploadSendChunkWA::soap_default(NULL); }
	virtual ~ns1__UploadSendChunkWA() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UploadSendChunkWAResponse
#define SOAP_TYPE_ns1__UploadSendChunkWAResponse (723)
/* ns1:UploadSendChunkWAResponse */
class SOAP_CMAC ns1__UploadSendChunkWAResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 723; } /* = unique id SOAP_TYPE_ns1__UploadSendChunkWAResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UploadSendChunkWAResponse() { ns1__UploadSendChunkWAResponse::soap_default(NULL); }
	virtual ~ns1__UploadSendChunkWAResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetNewProtocolNumber
#define SOAP_TYPE_ns1__GetNewProtocolNumber (724)
/* ns1:GetNewProtocolNumber */
class SOAP_CMAC ns1__GetNewProtocolNumber : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	ns1__abxProtocolUse *protocolData;	/* optional element of type ns1:abxProtocolUse */
public:
	virtual int soap_type() const { return 724; } /* = unique id SOAP_TYPE_ns1__GetNewProtocolNumber */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetNewProtocolNumber() { ns1__GetNewProtocolNumber::soap_default(NULL); }
	virtual ~ns1__GetNewProtocolNumber() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetNewProtocolNumberResponse
#define SOAP_TYPE_ns1__GetNewProtocolNumberResponse (725)
/* ns1:GetNewProtocolNumberResponse */
class SOAP_CMAC ns1__GetNewProtocolNumberResponse : public xsd__anyType
{
public:
	class ns1__abxProtocolUseResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxProtocolUseResult */
public:
	virtual int soap_type() const { return 725; } /* = unique id SOAP_TYPE_ns1__GetNewProtocolNumberResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetNewProtocolNumberResponse() { ns1__GetNewProtocolNumberResponse::soap_default(NULL); }
	virtual ~ns1__GetNewProtocolNumberResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxProtocolUseResult
#define SOAP_TYPE_ns1__abxProtocolUseResult (726)
/* ns1:abxProtocolUseResult */
class SOAP_CMAC ns1__abxProtocolUseResult : public xsd__anyType
{
public:
	unsigned int result;	/* required element of type xsd:unsignedInt */
	class ns1__abxProtocolUseList *list;	/* required element of type ns1:abxProtocolUseList */
public:
	virtual int soap_type() const { return 726; } /* = unique id SOAP_TYPE_ns1__abxProtocolUseResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxProtocolUseResult() { ns1__abxProtocolUseResult::soap_default(NULL); }
	virtual ~ns1__abxProtocolUseResult() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxProtocolUseList
#define SOAP_TYPE_ns1__abxProtocolUseList (727)
/* ns1:abxProtocolUseList */
class SOAP_CMAC ns1__abxProtocolUseList : public xsd__anyType
{
public:
	int __sizeprotocolUseList;	/* sequence of elements <protocolUseList> */
	ns1__abxProtocolUse **protocolUseList;	/* required element of type ns1:abxProtocolUse */
public:
	virtual int soap_type() const { return 727; } /* = unique id SOAP_TYPE_ns1__abxProtocolUseList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxProtocolUseList() { ns1__abxProtocolUseList::soap_default(NULL); }
	virtual ~ns1__abxProtocolUseList() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InsertLinkDocumentToDocument
#define SOAP_TYPE_ns1__InsertLinkDocumentToDocument (728)
/* ns1:InsertLinkDocumentToDocument */
class SOAP_CMAC ns1__InsertLinkDocumentToDocument : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *linkTypeName;	/* optional element of type xsd:string */
	char *instanceNameFrom;	/* optional element of type xsd:string */
	char *dataId;	/* optional element of type xsd:string */
	char *instanceNameTo;	/* optional element of type xsd:string */
	char *dataIdTo;	/* optional element of type xsd:string */
	char *note;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 728; } /* = unique id SOAP_TYPE_ns1__InsertLinkDocumentToDocument */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InsertLinkDocumentToDocument() { ns1__InsertLinkDocumentToDocument::soap_default(NULL); }
	virtual ~ns1__InsertLinkDocumentToDocument() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InsertLinkDocumentToDocumentResponse
#define SOAP_TYPE_ns1__InsertLinkDocumentToDocumentResponse (729)
/* ns1:InsertLinkDocumentToDocumentResponse */
class SOAP_CMAC ns1__InsertLinkDocumentToDocumentResponse : public xsd__anyType
{
public:
	ns1__abxLinkResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxLinkResult */
public:
	virtual int soap_type() const { return 729; } /* = unique id SOAP_TYPE_ns1__InsertLinkDocumentToDocumentResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InsertLinkDocumentToDocumentResponse() { ns1__InsertLinkDocumentToDocumentResponse::soap_default(NULL); }
	virtual ~ns1__InsertLinkDocumentToDocumentResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Fk_USCOREgetAllRecordByDesc
#define SOAP_TYPE_ns1__Fk_USCOREgetAllRecordByDesc (730)
/* ns1:Fk_getAllRecordByDesc */
class SOAP_CMAC ns1__Fk_USCOREgetAllRecordByDesc : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	ns1__abxFK *fk;	/* optional element of type ns1:abxFK */
	int numTotRecord;	/* required element of type xsd:int */
	char *orderBy;	/* optional element of type xsd:string */
	bool directionDesc;	/* required element of type xsd:boolean */
	char *InstanceName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 730; } /* = unique id SOAP_TYPE_ns1__Fk_USCOREgetAllRecordByDesc */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Fk_USCOREgetAllRecordByDesc() { ns1__Fk_USCOREgetAllRecordByDesc::soap_default(NULL); }
	virtual ~ns1__Fk_USCOREgetAllRecordByDesc() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Fk_USCOREgetAllRecordByDescResponse
#define SOAP_TYPE_ns1__Fk_USCOREgetAllRecordByDescResponse (731)
/* ns1:Fk_getAllRecordByDescResponse */
class SOAP_CMAC ns1__Fk_USCOREgetAllRecordByDescResponse : public xsd__anyType
{
public:
	ns1__abxFKResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFKResult */
public:
	virtual int soap_type() const { return 731; } /* = unique id SOAP_TYPE_ns1__Fk_USCOREgetAllRecordByDescResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Fk_USCOREgetAllRecordByDescResponse() { ns1__Fk_USCOREgetAllRecordByDescResponse::soap_default(NULL); }
	virtual ~ns1__Fk_USCOREgetAllRecordByDescResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CanUseProtocol
#define SOAP_TYPE_ns1__CanUseProtocol (732)
/* ns1:CanUseProtocol */
class SOAP_CMAC ns1__CanUseProtocol : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
	ns1__abxProtocolUse *protocolUseData;	/* optional element of type ns1:abxProtocolUse */
public:
	virtual int soap_type() const { return 732; } /* = unique id SOAP_TYPE_ns1__CanUseProtocol */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CanUseProtocol() { ns1__CanUseProtocol::soap_default(NULL); }
	virtual ~ns1__CanUseProtocol() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CanUseProtocolResponse
#define SOAP_TYPE_ns1__CanUseProtocolResponse (733)
/* ns1:CanUseProtocolResponse */
class SOAP_CMAC ns1__CanUseProtocolResponse : public xsd__anyType
{
public:
	ns4__abxCan *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns4:abxCan */
public:
	virtual int soap_type() const { return 733; } /* = unique id SOAP_TYPE_ns1__CanUseProtocolResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CanUseProtocolResponse() { ns1__CanUseProtocolResponse::soap_default(NULL); }
	virtual ~ns1__CanUseProtocolResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CreateContainer
#define SOAP_TYPE_ns1__CreateContainer (734)
/* ns1:CreateContainer */
class SOAP_CMAC ns1__CreateContainer : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	ns1__abxContainer *Container2Update;	/* optional element of type ns1:abxContainer */
	char *abxSecurityId;	/* optional element of type xsd:string */
	ns1__abxVersioningList *avl;	/* optional element of type ns1:abxVersioningList */
public:
	virtual int soap_type() const { return 734; } /* = unique id SOAP_TYPE_ns1__CreateContainer */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CreateContainer() { ns1__CreateContainer::soap_default(NULL); }
	virtual ~ns1__CreateContainer() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CreateContainerResponse
#define SOAP_TYPE_ns1__CreateContainerResponse (735)
/* ns1:CreateContainerResponse */
class SOAP_CMAC ns1__CreateContainerResponse : public xsd__anyType
{
public:
	ns1__abxContainerResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxContainerResult */
public:
	virtual int soap_type() const { return 735; } /* = unique id SOAP_TYPE_ns1__CreateContainerResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CreateContainerResponse() { ns1__CreateContainerResponse::soap_default(NULL); }
	virtual ~ns1__CreateContainerResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ChangeSchedulerTaskScheduleStatus
#define SOAP_TYPE_ns1__ChangeSchedulerTaskScheduleStatus (736)
/* ns1:ChangeSchedulerTaskScheduleStatus */
class SOAP_CMAC ns1__ChangeSchedulerTaskScheduleStatus : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *scheduleId;	/* optional element of type xsd:string */
	int scheduleType;	/* required element of type xsd:int */
	int scheduleStatus;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 736; } /* = unique id SOAP_TYPE_ns1__ChangeSchedulerTaskScheduleStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ChangeSchedulerTaskScheduleStatus() { ns1__ChangeSchedulerTaskScheduleStatus::soap_default(NULL); }
	virtual ~ns1__ChangeSchedulerTaskScheduleStatus() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ChangeSchedulerTaskScheduleStatusResponse
#define SOAP_TYPE_ns1__ChangeSchedulerTaskScheduleStatusResponse (737)
/* ns1:ChangeSchedulerTaskScheduleStatusResponse */
class SOAP_CMAC ns1__ChangeSchedulerTaskScheduleStatusResponse : public xsd__anyType
{
public:
	ns1__abxSchedulerResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxSchedulerResult */
public:
	virtual int soap_type() const { return 737; } /* = unique id SOAP_TYPE_ns1__ChangeSchedulerTaskScheduleStatusResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ChangeSchedulerTaskScheduleStatusResponse() { ns1__ChangeSchedulerTaskScheduleStatusResponse::soap_default(NULL); }
	virtual ~ns1__ChangeSchedulerTaskScheduleStatusResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Fk_USCOREgetLocalFieldList
#define SOAP_TYPE_ns1__Fk_USCOREgetLocalFieldList (738)
/* ns1:Fk_getLocalFieldList */
class SOAP_CMAC ns1__Fk_USCOREgetLocalFieldList : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	bool users;	/* required element of type xsd:boolean */
	bool groups;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 738; } /* = unique id SOAP_TYPE_ns1__Fk_USCOREgetLocalFieldList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Fk_USCOREgetLocalFieldList() { ns1__Fk_USCOREgetLocalFieldList::soap_default(NULL); }
	virtual ~ns1__Fk_USCOREgetLocalFieldList() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Fk_USCOREgetLocalFieldListResponse
#define SOAP_TYPE_ns1__Fk_USCOREgetLocalFieldListResponse (739)
/* ns1:Fk_getLocalFieldListResponse */
class SOAP_CMAC ns1__Fk_USCOREgetLocalFieldListResponse : public xsd__anyType
{
public:
	ns1__abxFKResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFKResult */
public:
	virtual int soap_type() const { return 739; } /* = unique id SOAP_TYPE_ns1__Fk_USCOREgetLocalFieldListResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Fk_USCOREgetLocalFieldListResponse() { ns1__Fk_USCOREgetLocalFieldListResponse::soap_default(NULL); }
	virtual ~ns1__Fk_USCOREgetLocalFieldListResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteTranslation
#define SOAP_TYPE_ns1__DeleteTranslation (740)
/* ns1:DeleteTranslation */
class SOAP_CMAC ns1__DeleteTranslation : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *messageId;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 740; } /* = unique id SOAP_TYPE_ns1__DeleteTranslation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteTranslation() { ns1__DeleteTranslation::soap_default(NULL); }
	virtual ~ns1__DeleteTranslation() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteTranslationResponse
#define SOAP_TYPE_ns1__DeleteTranslationResponse (741)
/* ns1:DeleteTranslationResponse */
class SOAP_CMAC ns1__DeleteTranslationResponse : public xsd__anyType
{
public:
	ns1__abxTranslationResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxTranslationResult */
public:
	virtual int soap_type() const { return 741; } /* = unique id SOAP_TYPE_ns1__DeleteTranslationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteTranslationResponse() { ns1__DeleteTranslationResponse::soap_default(NULL); }
	virtual ~ns1__DeleteTranslationResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Combo_USCOREremoveAll
#define SOAP_TYPE_ns1__Combo_USCOREremoveAll (742)
/* ns1:Combo_removeAll */
class SOAP_CMAC ns1__Combo_USCOREremoveAll : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *fieldName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 742; } /* = unique id SOAP_TYPE_ns1__Combo_USCOREremoveAll */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Combo_USCOREremoveAll() { ns1__Combo_USCOREremoveAll::soap_default(NULL); }
	virtual ~ns1__Combo_USCOREremoveAll() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Combo_USCOREremoveAllResponse
#define SOAP_TYPE_ns1__Combo_USCOREremoveAllResponse (743)
/* ns1:Combo_removeAllResponse */
class SOAP_CMAC ns1__Combo_USCOREremoveAllResponse : public xsd__anyType
{
public:
	ns1__abxComboResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxComboResult */
public:
	virtual int soap_type() const { return 743; } /* = unique id SOAP_TYPE_ns1__Combo_USCOREremoveAllResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Combo_USCOREremoveAllResponse() { ns1__Combo_USCOREremoveAllResponse::soap_default(NULL); }
	virtual ~ns1__Combo_USCOREremoveAllResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__canModifyDynorg
#define SOAP_TYPE_ns1__canModifyDynorg (744)
/* ns1:canModifyDynorg */
class SOAP_CMAC ns1__canModifyDynorg : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *RuleName;	/* optional element of type xsd:string */
	char *TemplateName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 744; } /* = unique id SOAP_TYPE_ns1__canModifyDynorg */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__canModifyDynorg() { ns1__canModifyDynorg::soap_default(NULL); }
	virtual ~ns1__canModifyDynorg() { }
};
#endif

#ifndef SOAP_TYPE_ns1__canModifyDynorgResponse
#define SOAP_TYPE_ns1__canModifyDynorgResponse (745)
/* ns1:canModifyDynorgResponse */
class SOAP_CMAC ns1__canModifyDynorgResponse : public xsd__anyType
{
public:
	ns4__abxCan *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns4:abxCan */
public:
	virtual int soap_type() const { return 745; } /* = unique id SOAP_TYPE_ns1__canModifyDynorgResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__canModifyDynorgResponse() { ns1__canModifyDynorgResponse::soap_default(NULL); }
	virtual ~ns1__canModifyDynorgResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ModifyUserPassword
#define SOAP_TYPE_ns1__ModifyUserPassword (746)
/* ns1:ModifyUserPassword */
class SOAP_CMAC ns1__ModifyUserPassword : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *username;	/* optional element of type xsd:string */
	char *oldPassword;	/* optional element of type xsd:string */
	char *newPassword;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 746; } /* = unique id SOAP_TYPE_ns1__ModifyUserPassword */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ModifyUserPassword() { ns1__ModifyUserPassword::soap_default(NULL); }
	virtual ~ns1__ModifyUserPassword() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ModifyUserPasswordResponse
#define SOAP_TYPE_ns1__ModifyUserPasswordResponse (747)
/* ns1:ModifyUserPasswordResponse */
class SOAP_CMAC ns1__ModifyUserPasswordResponse : public xsd__anyType
{
public:
	ns1__abxUserListResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxUserListResult */
public:
	virtual int soap_type() const { return 747; } /* = unique id SOAP_TYPE_ns1__ModifyUserPasswordResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ModifyUserPasswordResponse() { ns1__ModifyUserPasswordResponse::soap_default(NULL); }
	virtual ~ns1__ModifyUserPasswordResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetDataUSFileList
#define SOAP_TYPE_ns1__GetDataUSFileList (748)
/* ns1:GetDataUSFileList */
class SOAP_CMAC ns1__GetDataUSFileList : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
public:
	virtual int soap_type() const { return 748; } /* = unique id SOAP_TYPE_ns1__GetDataUSFileList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetDataUSFileList() { ns1__GetDataUSFileList::soap_default(NULL); }
	virtual ~ns1__GetDataUSFileList() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetDataUSFileListResponse
#define SOAP_TYPE_ns1__GetDataUSFileListResponse (749)
/* ns1:GetDataUSFileListResponse */
class SOAP_CMAC ns1__GetDataUSFileListResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 749; } /* = unique id SOAP_TYPE_ns1__GetDataUSFileListResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetDataUSFileListResponse() { ns1__GetDataUSFileListResponse::soap_default(NULL); }
	virtual ~ns1__GetDataUSFileListResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Combo_USCOREisCombo
#define SOAP_TYPE_ns1__Combo_USCOREisCombo (750)
/* ns1:Combo_isCombo */
class SOAP_CMAC ns1__Combo_USCOREisCombo : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *fieldName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 750; } /* = unique id SOAP_TYPE_ns1__Combo_USCOREisCombo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Combo_USCOREisCombo() { ns1__Combo_USCOREisCombo::soap_default(NULL); }
	virtual ~ns1__Combo_USCOREisCombo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Combo_USCOREisComboResponse
#define SOAP_TYPE_ns1__Combo_USCOREisComboResponse (751)
/* ns1:Combo_isComboResponse */
class SOAP_CMAC ns1__Combo_USCOREisComboResponse : public xsd__anyType
{
public:
	ns1__abxComboResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxComboResult */
public:
	virtual int soap_type() const { return 751; } /* = unique id SOAP_TYPE_ns1__Combo_USCOREisComboResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Combo_USCOREisComboResponse() { ns1__Combo_USCOREisComboResponse::soap_default(NULL); }
	virtual ~ns1__Combo_USCOREisComboResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CanModifyLinkContainerToDocument
#define SOAP_TYPE_ns1__CanModifyLinkContainerToDocument (752)
/* ns1:CanModifyLinkContainerToDocument */
class SOAP_CMAC ns1__CanModifyLinkContainerToDocument : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *linkTypeName;	/* optional element of type xsd:string */
	char *instanceNameFrom;	/* optional element of type xsd:string */
	char *linkId;	/* optional element of type xsd:string */
	char *instanceNameTo;	/* optional element of type xsd:string */
	char *dataId;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 752; } /* = unique id SOAP_TYPE_ns1__CanModifyLinkContainerToDocument */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CanModifyLinkContainerToDocument() { ns1__CanModifyLinkContainerToDocument::soap_default(NULL); }
	virtual ~ns1__CanModifyLinkContainerToDocument() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CanModifyLinkContainerToDocumentResponse
#define SOAP_TYPE_ns1__CanModifyLinkContainerToDocumentResponse (753)
/* ns1:CanModifyLinkContainerToDocumentResponse */
class SOAP_CMAC ns1__CanModifyLinkContainerToDocumentResponse : public xsd__anyType
{
public:
	ns4__abxCan *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns4:abxCan */
public:
	virtual int soap_type() const { return 753; } /* = unique id SOAP_TYPE_ns1__CanModifyLinkContainerToDocumentResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CanModifyLinkContainerToDocumentResponse() { ns1__CanModifyLinkContainerToDocumentResponse::soap_default(NULL); }
	virtual ~ns1__CanModifyLinkContainerToDocumentResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ModifyTranslation
#define SOAP_TYPE_ns1__ModifyTranslation (754)
/* ns1:ModifyTranslation */
class SOAP_CMAC ns1__ModifyTranslation : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *translation_USCOREnew;	/* optional element of type xsd:string */
	char *messageId;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 754; } /* = unique id SOAP_TYPE_ns1__ModifyTranslation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ModifyTranslation() { ns1__ModifyTranslation::soap_default(NULL); }
	virtual ~ns1__ModifyTranslation() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ModifyTranslationResponse
#define SOAP_TYPE_ns1__ModifyTranslationResponse (755)
/* ns1:ModifyTranslationResponse */
class SOAP_CMAC ns1__ModifyTranslationResponse : public xsd__anyType
{
public:
	ns1__abxTranslationResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxTranslationResult */
public:
	virtual int soap_type() const { return 755; } /* = unique id SOAP_TYPE_ns1__ModifyTranslationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ModifyTranslationResponse() { ns1__ModifyTranslationResponse::soap_default(NULL); }
	virtual ~ns1__ModifyTranslationResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteSchedulerTask
#define SOAP_TYPE_ns1__DeleteSchedulerTask (756)
/* ns1:DeleteSchedulerTask */
class SOAP_CMAC ns1__DeleteSchedulerTask : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *taskId;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 756; } /* = unique id SOAP_TYPE_ns1__DeleteSchedulerTask */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteSchedulerTask() { ns1__DeleteSchedulerTask::soap_default(NULL); }
	virtual ~ns1__DeleteSchedulerTask() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteSchedulerTaskResponse
#define SOAP_TYPE_ns1__DeleteSchedulerTaskResponse (757)
/* ns1:DeleteSchedulerTaskResponse */
class SOAP_CMAC ns1__DeleteSchedulerTaskResponse : public xsd__anyType
{
public:
	ns1__abxSchedulerResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxSchedulerResult */
public:
	virtual int soap_type() const { return 757; } /* = unique id SOAP_TYPE_ns1__DeleteSchedulerTaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteSchedulerTaskResponse() { ns1__DeleteSchedulerTaskResponse::soap_default(NULL); }
	virtual ~ns1__DeleteSchedulerTaskResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetFileAvailable
#define SOAP_TYPE_ns1__GetFileAvailable (758)
/* ns1:GetFileAvailable */
class SOAP_CMAC ns1__GetFileAvailable : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
	char *fileCode;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 758; } /* = unique id SOAP_TYPE_ns1__GetFileAvailable */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetFileAvailable() { ns1__GetFileAvailable::soap_default(NULL); }
	virtual ~ns1__GetFileAvailable() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetFileAvailableResponse
#define SOAP_TYPE_ns1__GetFileAvailableResponse (759)
/* ns1:GetFileAvailableResponse */
class SOAP_CMAC ns1__GetFileAvailableResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 759; } /* = unique id SOAP_TYPE_ns1__GetFileAvailableResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetFileAvailableResponse() { ns1__GetFileAvailableResponse::soap_default(NULL); }
	virtual ~ns1__GetFileAvailableResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CanShowFile
#define SOAP_TYPE_ns1__CanShowFile (760)
/* ns1:CanShowFile */
class SOAP_CMAC ns1__CanShowFile : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
	ns1__abxFileList *dataListInput;	/* optional element of type ns1:abxFileList */
public:
	virtual int soap_type() const { return 760; } /* = unique id SOAP_TYPE_ns1__CanShowFile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CanShowFile() { ns1__CanShowFile::soap_default(NULL); }
	virtual ~ns1__CanShowFile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CanShowFileResponse
#define SOAP_TYPE_ns1__CanShowFileResponse (761)
/* ns1:CanShowFileResponse */
class SOAP_CMAC ns1__CanShowFileResponse : public xsd__anyType
{
public:
	ns4__abxCan *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns4:abxCan */
public:
	virtual int soap_type() const { return 761; } /* = unique id SOAP_TYPE_ns1__CanShowFileResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CanShowFileResponse() { ns1__CanShowFileResponse::soap_default(NULL); }
	virtual ~ns1__CanShowFileResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteDynorg
#define SOAP_TYPE_ns1__DeleteDynorg (762)
/* ns1:DeleteDynorg */
class SOAP_CMAC ns1__DeleteDynorg : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *RuleName;	/* optional element of type xsd:string */
	char *TemplateName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 762; } /* = unique id SOAP_TYPE_ns1__DeleteDynorg */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteDynorg() { ns1__DeleteDynorg::soap_default(NULL); }
	virtual ~ns1__DeleteDynorg() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteDynorgResponse
#define SOAP_TYPE_ns1__DeleteDynorgResponse (763)
/* ns1:DeleteDynorgResponse */
class SOAP_CMAC ns1__DeleteDynorgResponse : public xsd__anyType
{
public:
	int return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 763; } /* = unique id SOAP_TYPE_ns1__DeleteDynorgResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteDynorgResponse() { ns1__DeleteDynorgResponse::soap_default(NULL); }
	virtual ~ns1__DeleteDynorgResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteUserByUsername
#define SOAP_TYPE_ns1__DeleteUserByUsername (764)
/* ns1:DeleteUserByUsername */
class SOAP_CMAC ns1__DeleteUserByUsername : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *username;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 764; } /* = unique id SOAP_TYPE_ns1__DeleteUserByUsername */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteUserByUsername() { ns1__DeleteUserByUsername::soap_default(NULL); }
	virtual ~ns1__DeleteUserByUsername() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteUserByUsernameResponse
#define SOAP_TYPE_ns1__DeleteUserByUsernameResponse (765)
/* ns1:DeleteUserByUsernameResponse */
class SOAP_CMAC ns1__DeleteUserByUsernameResponse : public xsd__anyType
{
public:
	ns1__abxUserListResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxUserListResult */
public:
	virtual int soap_type() const { return 765; } /* = unique id SOAP_TYPE_ns1__DeleteUserByUsernameResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteUserByUsernameResponse() { ns1__DeleteUserByUsernameResponse::soap_default(NULL); }
	virtual ~ns1__DeleteUserByUsernameResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__TestLettura
#define SOAP_TYPE_ns1__TestLettura (766)
/* ns1:TestLettura */
class SOAP_CMAC ns1__TestLettura : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
public:
	virtual int soap_type() const { return 766; } /* = unique id SOAP_TYPE_ns1__TestLettura */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__TestLettura() { ns1__TestLettura::soap_default(NULL); }
	virtual ~ns1__TestLettura() { }
};
#endif

#ifndef SOAP_TYPE_ns1__TestLetturaResponse
#define SOAP_TYPE_ns1__TestLetturaResponse (767)
/* ns1:TestLetturaResponse */
class SOAP_CMAC ns1__TestLetturaResponse : public xsd__anyType
{
public:
	char *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 767; } /* = unique id SOAP_TYPE_ns1__TestLetturaResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__TestLetturaResponse() { ns1__TestLetturaResponse::soap_default(NULL); }
	virtual ~ns1__TestLetturaResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__FullTreePathName
#define SOAP_TYPE_ns1__FullTreePathName (768)
/* ns1:FullTreePathName */
class SOAP_CMAC ns1__FullTreePathName : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
	char *targetObjName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 768; } /* = unique id SOAP_TYPE_ns1__FullTreePathName */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__FullTreePathName() { ns1__FullTreePathName::soap_default(NULL); }
	virtual ~ns1__FullTreePathName() { }
};
#endif

#ifndef SOAP_TYPE_ns1__FullTreePathNameResponse
#define SOAP_TYPE_ns1__FullTreePathNameResponse (769)
/* ns1:FullTreePathNameResponse */
class SOAP_CMAC ns1__FullTreePathNameResponse : public xsd__anyType
{
public:
	ns1__abxGipResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxGipResult */
public:
	virtual int soap_type() const { return 769; } /* = unique id SOAP_TYPE_ns1__FullTreePathNameResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__FullTreePathNameResponse() { ns1__FullTreePathNameResponse::soap_default(NULL); }
	virtual ~ns1__FullTreePathNameResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UploadEndFile
#define SOAP_TYPE_ns1__UploadEndFile (770)
/* ns1:UploadEndFile */
class SOAP_CMAC ns1__UploadEndFile : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
	char *objName;	/* optional element of type xsd:string */
	ns1__abxFileList *dataListInput;	/* optional element of type ns1:abxFileList */
	char *codePreviousVersion;	/* optional element of type xsd:string */
	char *docTemplateName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 770; } /* = unique id SOAP_TYPE_ns1__UploadEndFile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UploadEndFile() { ns1__UploadEndFile::soap_default(NULL); }
	virtual ~ns1__UploadEndFile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UploadEndFileResponse
#define SOAP_TYPE_ns1__UploadEndFileResponse (771)
/* ns1:UploadEndFileResponse */
class SOAP_CMAC ns1__UploadEndFileResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 771; } /* = unique id SOAP_TYPE_ns1__UploadEndFileResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UploadEndFileResponse() { ns1__UploadEndFileResponse::soap_default(NULL); }
	virtual ~ns1__UploadEndFileResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ModifyLinkContainerToDocument
#define SOAP_TYPE_ns1__ModifyLinkContainerToDocument (772)
/* ns1:ModifyLinkContainerToDocument */
class SOAP_CMAC ns1__ModifyLinkContainerToDocument : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *linkTypeName;	/* optional element of type xsd:string */
	char *linkId;	/* optional element of type xsd:string */
	char *instanceNameFrom;	/* optional element of type xsd:string */
	char *instanceNameTo;	/* optional element of type xsd:string */
	char *dataId;	/* optional element of type xsd:string */
	char *note;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 772; } /* = unique id SOAP_TYPE_ns1__ModifyLinkContainerToDocument */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ModifyLinkContainerToDocument() { ns1__ModifyLinkContainerToDocument::soap_default(NULL); }
	virtual ~ns1__ModifyLinkContainerToDocument() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ModifyLinkContainerToDocumentResponse
#define SOAP_TYPE_ns1__ModifyLinkContainerToDocumentResponse (773)
/* ns1:ModifyLinkContainerToDocumentResponse */
class SOAP_CMAC ns1__ModifyLinkContainerToDocumentResponse : public xsd__anyType
{
public:
	ns1__abxLinkResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxLinkResult */
public:
	virtual int soap_type() const { return 773; } /* = unique id SOAP_TYPE_ns1__ModifyLinkContainerToDocumentResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ModifyLinkContainerToDocumentResponse() { ns1__ModifyLinkContainerToDocumentResponse::soap_default(NULL); }
	virtual ~ns1__ModifyLinkContainerToDocumentResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetUserDetailByUserId
#define SOAP_TYPE_ns1__GetUserDetailByUserId (774)
/* ns1:GetUserDetailByUserId */
class SOAP_CMAC ns1__GetUserDetailByUserId : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *userId;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 774; } /* = unique id SOAP_TYPE_ns1__GetUserDetailByUserId */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetUserDetailByUserId() { ns1__GetUserDetailByUserId::soap_default(NULL); }
	virtual ~ns1__GetUserDetailByUserId() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetUserDetailByUserIdResponse
#define SOAP_TYPE_ns1__GetUserDetailByUserIdResponse (775)
/* ns1:GetUserDetailByUserIdResponse */
class SOAP_CMAC ns1__GetUserDetailByUserIdResponse : public xsd__anyType
{
public:
	ns1__abxUserListResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxUserListResult */
public:
	virtual int soap_type() const { return 775; } /* = unique id SOAP_TYPE_ns1__GetUserDetailByUserIdResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetUserDetailByUserIdResponse() { ns1__GetUserDetailByUserIdResponse::soap_default(NULL); }
	virtual ~ns1__GetUserDetailByUserIdResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CreateSDKTask
#define SOAP_TYPE_ns1__CreateSDKTask (776)
/* ns1:CreateSDKTask */
class SOAP_CMAC ns1__CreateSDKTask : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	ns1__abxSDKTask *sdkTask;	/* optional element of type ns1:abxSDKTask */
public:
	virtual int soap_type() const { return 776; } /* = unique id SOAP_TYPE_ns1__CreateSDKTask */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CreateSDKTask() { ns1__CreateSDKTask::soap_default(NULL); }
	virtual ~ns1__CreateSDKTask() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CreateSDKTaskResponse
#define SOAP_TYPE_ns1__CreateSDKTaskResponse (777)
/* ns1:CreateSDKTaskResponse */
class SOAP_CMAC ns1__CreateSDKTaskResponse : public xsd__anyType
{
public:
	ns1__abxSDKResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxSDKResult */
public:
	virtual int soap_type() const { return 777; } /* = unique id SOAP_TYPE_ns1__CreateSDKTaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CreateSDKTaskResponse() { ns1__CreateSDKTaskResponse::soap_default(NULL); }
	virtual ~ns1__CreateSDKTaskResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetDataWFFileList
#define SOAP_TYPE_ns1__GetDataWFFileList (778)
/* ns1:GetDataWFFileList */
class SOAP_CMAC ns1__GetDataWFFileList : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
public:
	virtual int soap_type() const { return 778; } /* = unique id SOAP_TYPE_ns1__GetDataWFFileList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetDataWFFileList() { ns1__GetDataWFFileList::soap_default(NULL); }
	virtual ~ns1__GetDataWFFileList() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetDataWFFileListResponse
#define SOAP_TYPE_ns1__GetDataWFFileListResponse (779)
/* ns1:GetDataWFFileListResponse */
class SOAP_CMAC ns1__GetDataWFFileListResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 779; } /* = unique id SOAP_TYPE_ns1__GetDataWFFileListResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetDataWFFileListResponse() { ns1__GetDataWFFileListResponse::soap_default(NULL); }
	virtual ~ns1__GetDataWFFileListResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetUsersListByGroup
#define SOAP_TYPE_ns1__GetUsersListByGroup (780)
/* ns1:GetUsersListByGroup */
class SOAP_CMAC ns1__GetUsersListByGroup : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *groupname;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 780; } /* = unique id SOAP_TYPE_ns1__GetUsersListByGroup */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetUsersListByGroup() { ns1__GetUsersListByGroup::soap_default(NULL); }
	virtual ~ns1__GetUsersListByGroup() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetUsersListByGroupResponse
#define SOAP_TYPE_ns1__GetUsersListByGroupResponse (781)
/* ns1:GetUsersListByGroupResponse */
class SOAP_CMAC ns1__GetUsersListByGroupResponse : public xsd__anyType
{
public:
	ns1__abxUserListResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxUserListResult */
public:
	virtual int soap_type() const { return 781; } /* = unique id SOAP_TYPE_ns1__GetUsersListByGroupResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetUsersListByGroupResponse() { ns1__GetUsersListByGroupResponse::soap_default(NULL); }
	virtual ~ns1__GetUsersListByGroupResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ModifyDataWA
#define SOAP_TYPE_ns1__ModifyDataWA (782)
/* ns1:ModifyDataWA */
class SOAP_CMAC ns1__ModifyDataWA : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
	char *annotazioneId;	/* optional element of type xsd:string */
	char *annotazione;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 782; } /* = unique id SOAP_TYPE_ns1__ModifyDataWA */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ModifyDataWA() { ns1__ModifyDataWA::soap_default(NULL); }
	virtual ~ns1__ModifyDataWA() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ModifyDataWAResponse
#define SOAP_TYPE_ns1__ModifyDataWAResponse (783)
/* ns1:ModifyDataWAResponse */
class SOAP_CMAC ns1__ModifyDataWAResponse : public xsd__anyType
{
public:
	ns1__abxDataResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxDataResult */
public:
	virtual int soap_type() const { return 783; } /* = unique id SOAP_TYPE_ns1__ModifyDataWAResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ModifyDataWAResponse() { ns1__ModifyDataWAResponse::soap_default(NULL); }
	virtual ~ns1__ModifyDataWAResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InsertFileWA
#define SOAP_TYPE_ns1__InsertFileWA (784)
/* ns1:InsertFileWA */
class SOAP_CMAC ns1__InsertFileWA : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
	char *annotazioneId;	/* optional element of type xsd:string */
	char *objName;	/* optional element of type xsd:string */
	ns1__abxFileList *dataListInput;	/* optional element of type ns1:abxFileList */
public:
	virtual int soap_type() const { return 784; } /* = unique id SOAP_TYPE_ns1__InsertFileWA */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InsertFileWA() { ns1__InsertFileWA::soap_default(NULL); }
	virtual ~ns1__InsertFileWA() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InsertFileWAResponse
#define SOAP_TYPE_ns1__InsertFileWAResponse (785)
/* ns1:InsertFileWAResponse */
class SOAP_CMAC ns1__InsertFileWAResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 785; } /* = unique id SOAP_TYPE_ns1__InsertFileWAResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InsertFileWAResponse() { ns1__InsertFileWAResponse::soap_default(NULL); }
	virtual ~ns1__InsertFileWAResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ChangeSDKTaskStatus
#define SOAP_TYPE_ns1__ChangeSDKTaskStatus (786)
/* ns1:ChangeSDKTaskStatus */
class SOAP_CMAC ns1__ChangeSDKTaskStatus : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *taskId;	/* optional element of type xsd:string */
	int taskStatus;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 786; } /* = unique id SOAP_TYPE_ns1__ChangeSDKTaskStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ChangeSDKTaskStatus() { ns1__ChangeSDKTaskStatus::soap_default(NULL); }
	virtual ~ns1__ChangeSDKTaskStatus() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ChangeSDKTaskStatusResponse
#define SOAP_TYPE_ns1__ChangeSDKTaskStatusResponse (787)
/* ns1:ChangeSDKTaskStatusResponse */
class SOAP_CMAC ns1__ChangeSDKTaskStatusResponse : public xsd__anyType
{
public:
	ns1__abxSDKResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxSDKResult */
public:
	virtual int soap_type() const { return 787; } /* = unique id SOAP_TYPE_ns1__ChangeSDKTaskStatusResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ChangeSDKTaskStatusResponse() { ns1__ChangeSDKTaskStatusResponse::soap_default(NULL); }
	virtual ~ns1__ChangeSDKTaskStatusResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetDataFileDetail
#define SOAP_TYPE_ns1__GetDataFileDetail (788)
/* ns1:GetDataFileDetail */
class SOAP_CMAC ns1__GetDataFileDetail : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *objName;	/* optional element of type xsd:string */
	char *instanceName;	/* optional element of type xsd:string */
	char *dataAttachmentId;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 788; } /* = unique id SOAP_TYPE_ns1__GetDataFileDetail */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetDataFileDetail() { ns1__GetDataFileDetail::soap_default(NULL); }
	virtual ~ns1__GetDataFileDetail() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetDataFileDetailResponse
#define SOAP_TYPE_ns1__GetDataFileDetailResponse (789)
/* ns1:GetDataFileDetailResponse */
class SOAP_CMAC ns1__GetDataFileDetailResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 789; } /* = unique id SOAP_TYPE_ns1__GetDataFileDetailResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetDataFileDetailResponse() { ns1__GetDataFileDetailResponse::soap_default(NULL); }
	virtual ~ns1__GetDataFileDetailResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CanInsertFile
#define SOAP_TYPE_ns1__CanInsertFile (790)
/* ns1:CanInsertFile */
class SOAP_CMAC ns1__CanInsertFile : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
	char *objName;	/* optional element of type xsd:string */
	char *dataId;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 790; } /* = unique id SOAP_TYPE_ns1__CanInsertFile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CanInsertFile() { ns1__CanInsertFile::soap_default(NULL); }
	virtual ~ns1__CanInsertFile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CanInsertFileResponse
#define SOAP_TYPE_ns1__CanInsertFileResponse (791)
/* ns1:CanInsertFileResponse */
class SOAP_CMAC ns1__CanInsertFileResponse : public xsd__anyType
{
public:
	ns4__abxCan *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns4:abxCan */
public:
	virtual int soap_type() const { return 791; } /* = unique id SOAP_TYPE_ns1__CanInsertFileResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CanInsertFileResponse() { ns1__CanInsertFileResponse::soap_default(NULL); }
	virtual ~ns1__CanInsertFileResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetDefaultProcess
#define SOAP_TYPE_ns1__GetDefaultProcess (792)
/* ns1:GetDefaultProcess */
class SOAP_CMAC ns1__GetDefaultProcess : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
	char *userName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 792; } /* = unique id SOAP_TYPE_ns1__GetDefaultProcess */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetDefaultProcess() { ns1__GetDefaultProcess::soap_default(NULL); }
	virtual ~ns1__GetDefaultProcess() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetDefaultProcessResponse
#define SOAP_TYPE_ns1__GetDefaultProcessResponse (793)
/* ns1:GetDefaultProcessResponse */
class SOAP_CMAC ns1__GetDefaultProcessResponse : public xsd__anyType
{
public:
	ns1__abxWorkflowResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxWorkflowResult */
public:
	virtual int soap_type() const { return 793; } /* = unique id SOAP_TYPE_ns1__GetDefaultProcessResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetDefaultProcessResponse() { ns1__GetDefaultProcessResponse::soap_default(NULL); }
	virtual ~ns1__GetDefaultProcessResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetClasseDocumentale
#define SOAP_TYPE_ns1__GetClasseDocumentale (794)
/* ns1:GetClasseDocumentale */
class SOAP_CMAC ns1__GetClasseDocumentale : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
public:
	virtual int soap_type() const { return 794; } /* = unique id SOAP_TYPE_ns1__GetClasseDocumentale */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetClasseDocumentale() { ns1__GetClasseDocumentale::soap_default(NULL); }
	virtual ~ns1__GetClasseDocumentale() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetClasseDocumentaleResponse
#define SOAP_TYPE_ns1__GetClasseDocumentaleResponse (795)
/* ns1:GetClasseDocumentaleResponse */
class SOAP_CMAC ns1__GetClasseDocumentaleResponse : public xsd__anyType
{
public:
	ns1__abxClasseDocumentaleResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxClasseDocumentaleResult */
public:
	virtual int soap_type() const { return 795; } /* = unique id SOAP_TYPE_ns1__GetClasseDocumentaleResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetClasseDocumentaleResponse() { ns1__GetClasseDocumentaleResponse::soap_default(NULL); }
	virtual ~ns1__GetClasseDocumentaleResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UploadPreviewFile
#define SOAP_TYPE_ns1__UploadPreviewFile (796)
/* ns1:UploadPreviewFile */
class SOAP_CMAC ns1__UploadPreviewFile : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	xsd__base64Binary *file;	/* optional element of type xsd:base64Binary */
	char *fileName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 796; } /* = unique id SOAP_TYPE_ns1__UploadPreviewFile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UploadPreviewFile() { ns1__UploadPreviewFile::soap_default(NULL); }
	virtual ~ns1__UploadPreviewFile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UploadPreviewFileResponse
#define SOAP_TYPE_ns1__UploadPreviewFileResponse (797)
/* ns1:UploadPreviewFileResponse */
class SOAP_CMAC ns1__UploadPreviewFileResponse : public xsd__anyType
{
public:
	ns1__abxSDKResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxSDKResult */
public:
	virtual int soap_type() const { return 797; } /* = unique id SOAP_TYPE_ns1__UploadPreviewFileResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UploadPreviewFileResponse() { ns1__UploadPreviewFileResponse::soap_default(NULL); }
	virtual ~ns1__UploadPreviewFileResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InsertTPFile
#define SOAP_TYPE_ns1__InsertTPFile (798)
/* ns1:InsertTPFile */
class SOAP_CMAC ns1__InsertTPFile : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	ns1__abxFileTpList *dataListInput;	/* optional element of type ns1:abxFileTpList */
	char *abxSecurityId;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 798; } /* = unique id SOAP_TYPE_ns1__InsertTPFile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InsertTPFile() { ns1__InsertTPFile::soap_default(NULL); }
	virtual ~ns1__InsertTPFile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InsertTPFileResponse
#define SOAP_TYPE_ns1__InsertTPFileResponse (799)
/* ns1:InsertTPFileResponse */
class SOAP_CMAC ns1__InsertTPFileResponse : public xsd__anyType
{
public:
	ns1__abxFileTpResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileTpResult */
public:
	virtual int soap_type() const { return 799; } /* = unique id SOAP_TYPE_ns1__InsertTPFileResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InsertTPFileResponse() { ns1__InsertTPFileResponse::soap_default(NULL); }
	virtual ~ns1__InsertTPFileResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Combo_USCOREmodify
#define SOAP_TYPE_ns1__Combo_USCOREmodify (800)
/* ns1:Combo_modify */
class SOAP_CMAC ns1__Combo_USCOREmodify : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *fieldName;	/* optional element of type xsd:string */
	ns1__abxCombo *recordsArray;	/* optional element of type ns1:abxCombo */
public:
	virtual int soap_type() const { return 800; } /* = unique id SOAP_TYPE_ns1__Combo_USCOREmodify */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Combo_USCOREmodify() { ns1__Combo_USCOREmodify::soap_default(NULL); }
	virtual ~ns1__Combo_USCOREmodify() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Combo_USCOREmodifyResponse
#define SOAP_TYPE_ns1__Combo_USCOREmodifyResponse (801)
/* ns1:Combo_modifyResponse */
class SOAP_CMAC ns1__Combo_USCOREmodifyResponse : public xsd__anyType
{
public:
	ns1__abxComboResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxComboResult */
public:
	virtual int soap_type() const { return 801; } /* = unique id SOAP_TYPE_ns1__Combo_USCOREmodifyResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Combo_USCOREmodifyResponse() { ns1__Combo_USCOREmodifyResponse::soap_default(NULL); }
	virtual ~ns1__Combo_USCOREmodifyResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetWorkflowVariables
#define SOAP_TYPE_ns1__GetWorkflowVariables (802)
/* ns1:GetWorkflowVariables */
class SOAP_CMAC ns1__GetWorkflowVariables : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
public:
	virtual int soap_type() const { return 802; } /* = unique id SOAP_TYPE_ns1__GetWorkflowVariables */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetWorkflowVariables() { ns1__GetWorkflowVariables::soap_default(NULL); }
	virtual ~ns1__GetWorkflowVariables() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetWorkflowVariablesResponse
#define SOAP_TYPE_ns1__GetWorkflowVariablesResponse (803)
/* ns1:GetWorkflowVariablesResponse */
class SOAP_CMAC ns1__GetWorkflowVariablesResponse : public xsd__anyType
{
public:
	ns1__abxWorkflowResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxWorkflowResult */
public:
	virtual int soap_type() const { return 803; } /* = unique id SOAP_TYPE_ns1__GetWorkflowVariablesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetWorkflowVariablesResponse() { ns1__GetWorkflowVariablesResponse::soap_default(NULL); }
	virtual ~ns1__GetWorkflowVariablesResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteWFFileById
#define SOAP_TYPE_ns1__DeleteWFFileById (804)
/* ns1:DeleteWFFileById */
class SOAP_CMAC ns1__DeleteWFFileById : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *fileId;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 804; } /* = unique id SOAP_TYPE_ns1__DeleteWFFileById */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteWFFileById() { ns1__DeleteWFFileById::soap_default(NULL); }
	virtual ~ns1__DeleteWFFileById() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteWFFileByIdResponse
#define SOAP_TYPE_ns1__DeleteWFFileByIdResponse (805)
/* ns1:DeleteWFFileByIdResponse */
class SOAP_CMAC ns1__DeleteWFFileByIdResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 805; } /* = unique id SOAP_TYPE_ns1__DeleteWFFileByIdResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteWFFileByIdResponse() { ns1__DeleteWFFileByIdResponse::soap_default(NULL); }
	virtual ~ns1__DeleteWFFileByIdResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CanInsertData
#define SOAP_TYPE_ns1__CanInsertData (806)
/* ns1:CanInsertData */
class SOAP_CMAC ns1__CanInsertData : public xsd__anyType
{
public:
	ns1__IDtype *IDtype_USCORESessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 806; } /* = unique id SOAP_TYPE_ns1__CanInsertData */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CanInsertData() { ns1__CanInsertData::soap_default(NULL); }
	virtual ~ns1__CanInsertData() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CanInsertDataResponse
#define SOAP_TYPE_ns1__CanInsertDataResponse (807)
/* ns1:CanInsertDataResponse */
class SOAP_CMAC ns1__CanInsertDataResponse : public xsd__anyType
{
public:
	ns4__abxCan *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns4:abxCan */
public:
	virtual int soap_type() const { return 807; } /* = unique id SOAP_TYPE_ns1__CanInsertDataResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CanInsertDataResponse() { ns1__CanInsertDataResponse::soap_default(NULL); }
	virtual ~ns1__CanInsertDataResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VerifySDKTaskNameExists
#define SOAP_TYPE_ns1__VerifySDKTaskNameExists (808)
/* ns1:VerifySDKTaskNameExists */
class SOAP_CMAC ns1__VerifySDKTaskNameExists : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *taskId;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 808; } /* = unique id SOAP_TYPE_ns1__VerifySDKTaskNameExists */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VerifySDKTaskNameExists() { ns1__VerifySDKTaskNameExists::soap_default(NULL); }
	virtual ~ns1__VerifySDKTaskNameExists() { }
};
#endif

#ifndef SOAP_TYPE_ns1__VerifySDKTaskNameExistsResponse
#define SOAP_TYPE_ns1__VerifySDKTaskNameExistsResponse (809)
/* ns1:VerifySDKTaskNameExistsResponse */
class SOAP_CMAC ns1__VerifySDKTaskNameExistsResponse : public xsd__anyType
{
public:
	ns1__abxSDKResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxSDKResult */
public:
	virtual int soap_type() const { return 809; } /* = unique id SOAP_TYPE_ns1__VerifySDKTaskNameExistsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__VerifySDKTaskNameExistsResponse() { ns1__VerifySDKTaskNameExistsResponse::soap_default(NULL); }
	virtual ~ns1__VerifySDKTaskNameExistsResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ModifySchedulerTaskSchedule
#define SOAP_TYPE_ns1__ModifySchedulerTaskSchedule (810)
/* ns1:ModifySchedulerTaskSchedule */
class SOAP_CMAC ns1__ModifySchedulerTaskSchedule : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	ns1__abxSchedulerTask *abxSchedulerTask;	/* optional element of type ns1:abxSchedulerTask */
public:
	virtual int soap_type() const { return 810; } /* = unique id SOAP_TYPE_ns1__ModifySchedulerTaskSchedule */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ModifySchedulerTaskSchedule() { ns1__ModifySchedulerTaskSchedule::soap_default(NULL); }
	virtual ~ns1__ModifySchedulerTaskSchedule() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ModifySchedulerTaskScheduleResponse
#define SOAP_TYPE_ns1__ModifySchedulerTaskScheduleResponse (811)
/* ns1:ModifySchedulerTaskScheduleResponse */
class SOAP_CMAC ns1__ModifySchedulerTaskScheduleResponse : public xsd__anyType
{
public:
	ns1__abxSchedulerResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxSchedulerResult */
public:
	virtual int soap_type() const { return 811; } /* = unique id SOAP_TYPE_ns1__ModifySchedulerTaskScheduleResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ModifySchedulerTaskScheduleResponse() { ns1__ModifySchedulerTaskScheduleResponse::soap_default(NULL); }
	virtual ~ns1__ModifySchedulerTaskScheduleResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ModifyArchSostRule
#define SOAP_TYPE_ns1__ModifyArchSostRule (812)
/* ns1:ModifyArchSostRule */
class SOAP_CMAC ns1__ModifyArchSostRule : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	ns1__abxArchSostRule *archSostRule;	/* optional element of type ns1:abxArchSostRule */
public:
	virtual int soap_type() const { return 812; } /* = unique id SOAP_TYPE_ns1__ModifyArchSostRule */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ModifyArchSostRule() { ns1__ModifyArchSostRule::soap_default(NULL); }
	virtual ~ns1__ModifyArchSostRule() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ModifyArchSostRuleResponse
#define SOAP_TYPE_ns1__ModifyArchSostRuleResponse (813)
/* ns1:ModifyArchSostRuleResponse */
class SOAP_CMAC ns1__ModifyArchSostRuleResponse : public xsd__anyType
{
public:
	ns1__abxArchSostResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxArchSostResult */
public:
	virtual int soap_type() const { return 813; } /* = unique id SOAP_TYPE_ns1__ModifyArchSostRuleResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ModifyArchSostRuleResponse() { ns1__ModifyArchSostRuleResponse::soap_default(NULL); }
	virtual ~ns1__ModifyArchSostRuleResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InsertDataWA
#define SOAP_TYPE_ns1__InsertDataWA (814)
/* ns1:InsertDataWA */
class SOAP_CMAC ns1__InsertDataWA : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
	char *dataId;	/* optional element of type xsd:string */
	char *annotazione;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 814; } /* = unique id SOAP_TYPE_ns1__InsertDataWA */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InsertDataWA() { ns1__InsertDataWA::soap_default(NULL); }
	virtual ~ns1__InsertDataWA() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InsertDataWAResponse
#define SOAP_TYPE_ns1__InsertDataWAResponse (815)
/* ns1:InsertDataWAResponse */
class SOAP_CMAC ns1__InsertDataWAResponse : public xsd__anyType
{
public:
	ns1__abxDataResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxDataResult */
public:
	virtual int soap_type() const { return 815; } /* = unique id SOAP_TYPE_ns1__InsertDataWAResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InsertDataWAResponse() { ns1__InsertDataWAResponse::soap_default(NULL); }
	virtual ~ns1__InsertDataWAResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CanInsertProtocol
#define SOAP_TYPE_ns1__CanInsertProtocol (816)
/* ns1:CanInsertProtocol */
class SOAP_CMAC ns1__CanInsertProtocol : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
public:
	virtual int soap_type() const { return 816; } /* = unique id SOAP_TYPE_ns1__CanInsertProtocol */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CanInsertProtocol() { ns1__CanInsertProtocol::soap_default(NULL); }
	virtual ~ns1__CanInsertProtocol() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CanInsertProtocolResponse
#define SOAP_TYPE_ns1__CanInsertProtocolResponse (817)
/* ns1:CanInsertProtocolResponse */
class SOAP_CMAC ns1__CanInsertProtocolResponse : public xsd__anyType
{
public:
	ns4__abxCan *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns4:abxCan */
public:
	virtual int soap_type() const { return 817; } /* = unique id SOAP_TYPE_ns1__CanInsertProtocolResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CanInsertProtocolResponse() { ns1__CanInsertProtocolResponse::soap_default(NULL); }
	virtual ~ns1__CanInsertProtocolResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UploadUSEndFileWithUser
#define SOAP_TYPE_ns1__UploadUSEndFileWithUser (818)
/* ns1:UploadUSEndFileWithUser */
class SOAP_CMAC ns1__UploadUSEndFileWithUser : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	ns1__abxFileList *dataListInput;	/* optional element of type ns1:abxFileList */
	char *codePreviousVersion;	/* optional element of type xsd:string */
	char *username;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 818; } /* = unique id SOAP_TYPE_ns1__UploadUSEndFileWithUser */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UploadUSEndFileWithUser() { ns1__UploadUSEndFileWithUser::soap_default(NULL); }
	virtual ~ns1__UploadUSEndFileWithUser() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UploadUSEndFileWithUserResponse
#define SOAP_TYPE_ns1__UploadUSEndFileWithUserResponse (819)
/* ns1:UploadUSEndFileWithUserResponse */
class SOAP_CMAC ns1__UploadUSEndFileWithUserResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 819; } /* = unique id SOAP_TYPE_ns1__UploadUSEndFileWithUserResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UploadUSEndFileWithUserResponse() { ns1__UploadUSEndFileWithUserResponse::soap_default(NULL); }
	virtual ~ns1__UploadUSEndFileWithUserResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ModExpression
#define SOAP_TYPE_ns1__ModExpression (820)
/* ns1:ModExpression */
class SOAP_CMAC ns1__ModExpression : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	ns1__abxExpression *expr;	/* optional element of type ns1:abxExpression */
public:
	virtual int soap_type() const { return 820; } /* = unique id SOAP_TYPE_ns1__ModExpression */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ModExpression() { ns1__ModExpression::soap_default(NULL); }
	virtual ~ns1__ModExpression() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ModExpressionResponse
#define SOAP_TYPE_ns1__ModExpressionResponse (821)
/* ns1:ModExpressionResponse */
class SOAP_CMAC ns1__ModExpressionResponse : public xsd__anyType
{
public:
	ns1__abxExpressionResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxExpressionResult */
public:
	virtual int soap_type() const { return 821; } /* = unique id SOAP_TYPE_ns1__ModExpressionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ModExpressionResponse() { ns1__ModExpressionResponse::soap_default(NULL); }
	virtual ~ns1__ModExpressionResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InsertWFFile
#define SOAP_TYPE_ns1__InsertWFFile (822)
/* ns1:InsertWFFile */
class SOAP_CMAC ns1__InsertWFFile : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
	char *objName;	/* optional element of type xsd:string */
	ns1__abxFileList *dataListInput;	/* optional element of type ns1:abxFileList */
	char *abxSecurityId;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 822; } /* = unique id SOAP_TYPE_ns1__InsertWFFile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InsertWFFile() { ns1__InsertWFFile::soap_default(NULL); }
	virtual ~ns1__InsertWFFile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InsertWFFileResponse
#define SOAP_TYPE_ns1__InsertWFFileResponse (823)
/* ns1:InsertWFFileResponse */
class SOAP_CMAC ns1__InsertWFFileResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 823; } /* = unique id SOAP_TYPE_ns1__InsertWFFileResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InsertWFFileResponse() { ns1__InsertWFFileResponse::soap_default(NULL); }
	virtual ~ns1__InsertWFFileResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ResetUserSessions
#define SOAP_TYPE_ns1__ResetUserSessions (824)
/* ns1:ResetUserSessions */
class SOAP_CMAC ns1__ResetUserSessions : public xsd__anyType
{
public:
	ns1__abxLoginIdentity *LoginParam;	/* optional element of type ns1:abxLoginIdentity */
public:
	virtual int soap_type() const { return 824; } /* = unique id SOAP_TYPE_ns1__ResetUserSessions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ResetUserSessions() { ns1__ResetUserSessions::soap_default(NULL); }
	virtual ~ns1__ResetUserSessions() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ResetUserSessionsResponse
#define SOAP_TYPE_ns1__ResetUserSessionsResponse (825)
/* ns1:ResetUserSessionsResponse */
class SOAP_CMAC ns1__ResetUserSessionsResponse : public xsd__anyType
{
public:
	ns1__abxLoginResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxLoginResult */
public:
	virtual int soap_type() const { return 825; } /* = unique id SOAP_TYPE_ns1__ResetUserSessionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ResetUserSessionsResponse() { ns1__ResetUserSessionsResponse::soap_default(NULL); }
	virtual ~ns1__ResetUserSessionsResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CanInsertLinkContainerToDocument
#define SOAP_TYPE_ns1__CanInsertLinkContainerToDocument (826)
/* ns1:CanInsertLinkContainerToDocument */
class SOAP_CMAC ns1__CanInsertLinkContainerToDocument : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *linkTypeName;	/* optional element of type xsd:string */
	char *instanceNameFrom;	/* optional element of type xsd:string */
	char *instanceNameTo;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 826; } /* = unique id SOAP_TYPE_ns1__CanInsertLinkContainerToDocument */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CanInsertLinkContainerToDocument() { ns1__CanInsertLinkContainerToDocument::soap_default(NULL); }
	virtual ~ns1__CanInsertLinkContainerToDocument() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CanInsertLinkContainerToDocumentResponse
#define SOAP_TYPE_ns1__CanInsertLinkContainerToDocumentResponse (827)
/* ns1:CanInsertLinkContainerToDocumentResponse */
class SOAP_CMAC ns1__CanInsertLinkContainerToDocumentResponse : public xsd__anyType
{
public:
	ns4__abxCan *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns4:abxCan */
public:
	virtual int soap_type() const { return 827; } /* = unique id SOAP_TYPE_ns1__CanInsertLinkContainerToDocumentResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CanInsertLinkContainerToDocumentResponse() { ns1__CanInsertLinkContainerToDocumentResponse::soap_default(NULL); }
	virtual ~ns1__CanInsertLinkContainerToDocumentResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SetTmpDownloadPath
#define SOAP_TYPE_ns1__SetTmpDownloadPath (828)
/* ns1:SetTmpDownloadPath */
class SOAP_CMAC ns1__SetTmpDownloadPath : public xsd__anyType
{
public:
	char *path;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 828; } /* = unique id SOAP_TYPE_ns1__SetTmpDownloadPath */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SetTmpDownloadPath() { ns1__SetTmpDownloadPath::soap_default(NULL); }
	virtual ~ns1__SetTmpDownloadPath() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SetTmpDownloadPathResponse
#define SOAP_TYPE_ns1__SetTmpDownloadPathResponse (829)
/* ns1:SetTmpDownloadPathResponse */
class SOAP_CMAC ns1__SetTmpDownloadPathResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 829; } /* = unique id SOAP_TYPE_ns1__SetTmpDownloadPathResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SetTmpDownloadPathResponse() { ns1__SetTmpDownloadPathResponse::soap_default(NULL); }
	virtual ~ns1__SetTmpDownloadPathResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetSDKTaskWatchFolder
#define SOAP_TYPE_ns1__GetSDKTaskWatchFolder (830)
/* ns1:GetSDKTaskWatchFolder */
class SOAP_CMAC ns1__GetSDKTaskWatchFolder : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *taskId;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 830; } /* = unique id SOAP_TYPE_ns1__GetSDKTaskWatchFolder */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetSDKTaskWatchFolder() { ns1__GetSDKTaskWatchFolder::soap_default(NULL); }
	virtual ~ns1__GetSDKTaskWatchFolder() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetSDKTaskWatchFolderResponse
#define SOAP_TYPE_ns1__GetSDKTaskWatchFolderResponse (831)
/* ns1:GetSDKTaskWatchFolderResponse */
class SOAP_CMAC ns1__GetSDKTaskWatchFolderResponse : public xsd__anyType
{
public:
	ns1__abxSDKResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxSDKResult */
public:
	virtual int soap_type() const { return 831; } /* = unique id SOAP_TYPE_ns1__GetSDKTaskWatchFolderResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetSDKTaskWatchFolderResponse() { ns1__GetSDKTaskWatchFolderResponse::soap_default(NULL); }
	virtual ~ns1__GetSDKTaskWatchFolderResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetDownloadDetailByData
#define SOAP_TYPE_ns1__GetDownloadDetailByData (832)
/* ns1:GetDownloadDetailByData */
class SOAP_CMAC ns1__GetDownloadDetailByData : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 832; } /* = unique id SOAP_TYPE_ns1__GetDownloadDetailByData */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetDownloadDetailByData() { ns1__GetDownloadDetailByData::soap_default(NULL); }
	virtual ~ns1__GetDownloadDetailByData() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetDownloadDetailByDataResponse
#define SOAP_TYPE_ns1__GetDownloadDetailByDataResponse (833)
/* ns1:GetDownloadDetailByDataResponse */
class SOAP_CMAC ns1__GetDownloadDetailByDataResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 833; } /* = unique id SOAP_TYPE_ns1__GetDownloadDetailByDataResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetDownloadDetailByDataResponse() { ns1__GetDownloadDetailByDataResponse::soap_default(NULL); }
	virtual ~ns1__GetDownloadDetailByDataResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ModifySDKTaskWatchFolder
#define SOAP_TYPE_ns1__ModifySDKTaskWatchFolder (834)
/* ns1:ModifySDKTaskWatchFolder */
class SOAP_CMAC ns1__ModifySDKTaskWatchFolder : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	ns1__abxSDKTask *sdkTask;	/* optional element of type ns1:abxSDKTask */
public:
	virtual int soap_type() const { return 834; } /* = unique id SOAP_TYPE_ns1__ModifySDKTaskWatchFolder */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ModifySDKTaskWatchFolder() { ns1__ModifySDKTaskWatchFolder::soap_default(NULL); }
	virtual ~ns1__ModifySDKTaskWatchFolder() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ModifySDKTaskWatchFolderResponse
#define SOAP_TYPE_ns1__ModifySDKTaskWatchFolderResponse (835)
/* ns1:ModifySDKTaskWatchFolderResponse */
class SOAP_CMAC ns1__ModifySDKTaskWatchFolderResponse : public xsd__anyType
{
public:
	ns1__abxSDKResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxSDKResult */
public:
	virtual int soap_type() const { return 835; } /* = unique id SOAP_TYPE_ns1__ModifySDKTaskWatchFolderResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ModifySDKTaskWatchFolderResponse() { ns1__ModifySDKTaskWatchFolderResponse::soap_default(NULL); }
	virtual ~ns1__ModifySDKTaskWatchFolderResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetProtocolByDesc
#define SOAP_TYPE_ns1__GetProtocolByDesc (836)
/* ns1:GetProtocolByDesc */
class SOAP_CMAC ns1__GetProtocolByDesc : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *protocolDesc;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 836; } /* = unique id SOAP_TYPE_ns1__GetProtocolByDesc */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetProtocolByDesc() { ns1__GetProtocolByDesc::soap_default(NULL); }
	virtual ~ns1__GetProtocolByDesc() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetProtocolByDescResponse
#define SOAP_TYPE_ns1__GetProtocolByDescResponse (837)
/* ns1:GetProtocolByDescResponse */
class SOAP_CMAC ns1__GetProtocolByDescResponse : public xsd__anyType
{
public:
	ns2__abxProtocolResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns2:abxProtocolResult */
public:
	virtual int soap_type() const { return 837; } /* = unique id SOAP_TYPE_ns1__GetProtocolByDescResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetProtocolByDescResponse() { ns1__GetProtocolByDescResponse::soap_default(NULL); }
	virtual ~ns1__GetProtocolByDescResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteLink
#define SOAP_TYPE_ns1__DeleteLink (838)
/* ns1:DeleteLink */
class SOAP_CMAC ns1__DeleteLink : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *instanceNameFrom;	/* optional element of type xsd:string */
	char *linkId;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 838; } /* = unique id SOAP_TYPE_ns1__DeleteLink */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteLink() { ns1__DeleteLink::soap_default(NULL); }
	virtual ~ns1__DeleteLink() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteLinkResponse
#define SOAP_TYPE_ns1__DeleteLinkResponse (839)
/* ns1:DeleteLinkResponse */
class SOAP_CMAC ns1__DeleteLinkResponse : public xsd__anyType
{
public:
	ns1__abxLinkResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxLinkResult */
public:
	virtual int soap_type() const { return 839; } /* = unique id SOAP_TYPE_ns1__DeleteLinkResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteLinkResponse() { ns1__DeleteLinkResponse::soap_default(NULL); }
	virtual ~ns1__DeleteLinkResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InsertTranslation
#define SOAP_TYPE_ns1__InsertTranslation (840)
/* ns1:InsertTranslation */
class SOAP_CMAC ns1__InsertTranslation : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	ns1__abxTranslation *transLang;	/* optional element of type ns1:abxTranslation */
public:
	virtual int soap_type() const { return 840; } /* = unique id SOAP_TYPE_ns1__InsertTranslation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InsertTranslation() { ns1__InsertTranslation::soap_default(NULL); }
	virtual ~ns1__InsertTranslation() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InsertTranslationResponse
#define SOAP_TYPE_ns1__InsertTranslationResponse (841)
/* ns1:InsertTranslationResponse */
class SOAP_CMAC ns1__InsertTranslationResponse : public xsd__anyType
{
public:
	ns1__abxTranslationResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxTranslationResult */
public:
	virtual int soap_type() const { return 841; } /* = unique id SOAP_TYPE_ns1__InsertTranslationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InsertTranslationResponse() { ns1__InsertTranslationResponse::soap_default(NULL); }
	virtual ~ns1__InsertTranslationResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UploadSendChunk
#define SOAP_TYPE_ns1__UploadSendChunk (842)
/* ns1:UploadSendChunk */
class SOAP_CMAC ns1__UploadSendChunk : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *fileCode;	/* optional element of type xsd:string */
	xsd__base64Binary *chunk;	/* optional element of type xsd:base64Binary */
public:
	virtual int soap_type() const { return 842; } /* = unique id SOAP_TYPE_ns1__UploadSendChunk */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UploadSendChunk() { ns1__UploadSendChunk::soap_default(NULL); }
	virtual ~ns1__UploadSendChunk() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UploadSendChunkResponse
#define SOAP_TYPE_ns1__UploadSendChunkResponse (843)
/* ns1:UploadSendChunkResponse */
class SOAP_CMAC ns1__UploadSendChunkResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 843; } /* = unique id SOAP_TYPE_ns1__UploadSendChunkResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UploadSendChunkResponse() { ns1__UploadSendChunkResponse::soap_default(NULL); }
	virtual ~ns1__UploadSendChunkResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetCountLinksToDocument
#define SOAP_TYPE_ns1__GetCountLinksToDocument (844)
/* ns1:GetCountLinksToDocument */
class SOAP_CMAC ns1__GetCountLinksToDocument : public xsd__anyType
{
public:
	ns1__IDtype *IDtype_USCORESessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
	char *dataId;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 844; } /* = unique id SOAP_TYPE_ns1__GetCountLinksToDocument */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetCountLinksToDocument() { ns1__GetCountLinksToDocument::soap_default(NULL); }
	virtual ~ns1__GetCountLinksToDocument() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetCountLinksToDocumentResponse
#define SOAP_TYPE_ns1__GetCountLinksToDocumentResponse (845)
/* ns1:GetCountLinksToDocumentResponse */
class SOAP_CMAC ns1__GetCountLinksToDocumentResponse : public xsd__anyType
{
public:
	ns1__abxLinkResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxLinkResult */
public:
	virtual int soap_type() const { return 845; } /* = unique id SOAP_TYPE_ns1__GetCountLinksToDocumentResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetCountLinksToDocumentResponse() { ns1__GetCountLinksToDocumentResponse::soap_default(NULL); }
	virtual ~ns1__GetCountLinksToDocumentResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CreateTemplate
#define SOAP_TYPE_ns1__CreateTemplate (846)
/* ns1:CreateTemplate */
class SOAP_CMAC ns1__CreateTemplate : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	ns1__abxTemplate *Template2Update;	/* optional element of type ns1:abxTemplate */
public:
	virtual int soap_type() const { return 846; } /* = unique id SOAP_TYPE_ns1__CreateTemplate */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CreateTemplate() { ns1__CreateTemplate::soap_default(NULL); }
	virtual ~ns1__CreateTemplate() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CreateTemplateResponse
#define SOAP_TYPE_ns1__CreateTemplateResponse (847)
/* ns1:CreateTemplateResponse */
class SOAP_CMAC ns1__CreateTemplateResponse : public xsd__anyType
{
public:
	ns1__abxTemplateResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxTemplateResult */
public:
	virtual int soap_type() const { return 847; } /* = unique id SOAP_TYPE_ns1__CreateTemplateResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CreateTemplateResponse() { ns1__CreateTemplateResponse::soap_default(NULL); }
	virtual ~ns1__CreateTemplateResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DestroyContainer
#define SOAP_TYPE_ns1__DestroyContainer (848)
/* ns1:DestroyContainer */
class SOAP_CMAC ns1__DestroyContainer : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *ContainerName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 848; } /* = unique id SOAP_TYPE_ns1__DestroyContainer */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DestroyContainer() { ns1__DestroyContainer::soap_default(NULL); }
	virtual ~ns1__DestroyContainer() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DestroyContainerResponse
#define SOAP_TYPE_ns1__DestroyContainerResponse (849)
/* ns1:DestroyContainerResponse */
class SOAP_CMAC ns1__DestroyContainerResponse : public xsd__anyType
{
public:
	ns1__abxContainerResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxContainerResult */
public:
	virtual int soap_type() const { return 849; } /* = unique id SOAP_TYPE_ns1__DestroyContainerResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DestroyContainerResponse() { ns1__DestroyContainerResponse::soap_default(NULL); }
	virtual ~ns1__DestroyContainerResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RemoveUserByGroup
#define SOAP_TYPE_ns1__RemoveUserByGroup (850)
/* ns1:RemoveUserByGroup */
class SOAP_CMAC ns1__RemoveUserByGroup : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *username;	/* optional element of type xsd:string */
	char *groupName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 850; } /* = unique id SOAP_TYPE_ns1__RemoveUserByGroup */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RemoveUserByGroup() { ns1__RemoveUserByGroup::soap_default(NULL); }
	virtual ~ns1__RemoveUserByGroup() { }
};
#endif

#ifndef SOAP_TYPE_ns1__RemoveUserByGroupResponse
#define SOAP_TYPE_ns1__RemoveUserByGroupResponse (851)
/* ns1:RemoveUserByGroupResponse */
class SOAP_CMAC ns1__RemoveUserByGroupResponse : public xsd__anyType
{
public:
	ns1__abxUserListResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxUserListResult */
public:
	virtual int soap_type() const { return 851; } /* = unique id SOAP_TYPE_ns1__RemoveUserByGroupResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__RemoveUserByGroupResponse() { ns1__RemoveUserByGroupResponse::soap_default(NULL); }
	virtual ~ns1__RemoveUserByGroupResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetCountFileList
#define SOAP_TYPE_ns1__GetCountFileList (852)
/* ns1:GetCountFileList */
class SOAP_CMAC ns1__GetCountFileList : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *instanceId;	/* optional element of type xsd:string */
	char *dataId;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 852; } /* = unique id SOAP_TYPE_ns1__GetCountFileList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetCountFileList() { ns1__GetCountFileList::soap_default(NULL); }
	virtual ~ns1__GetCountFileList() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetCountFileListResponse
#define SOAP_TYPE_ns1__GetCountFileListResponse (853)
/* ns1:GetCountFileListResponse */
class SOAP_CMAC ns1__GetCountFileListResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 853; } /* = unique id SOAP_TYPE_ns1__GetCountFileListResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetCountFileListResponse() { ns1__GetCountFileListResponse::soap_default(NULL); }
	virtual ~ns1__GetCountFileListResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetDataTPFileListByDocument
#define SOAP_TYPE_ns1__GetDataTPFileListByDocument (854)
/* ns1:GetDataTPFileListByDocument */
class SOAP_CMAC ns1__GetDataTPFileListByDocument : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
	char *dataId;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 854; } /* = unique id SOAP_TYPE_ns1__GetDataTPFileListByDocument */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetDataTPFileListByDocument() { ns1__GetDataTPFileListByDocument::soap_default(NULL); }
	virtual ~ns1__GetDataTPFileListByDocument() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetDataTPFileListByDocumentResponse
#define SOAP_TYPE_ns1__GetDataTPFileListByDocumentResponse (855)
/* ns1:GetDataTPFileListByDocumentResponse */
class SOAP_CMAC ns1__GetDataTPFileListByDocumentResponse : public xsd__anyType
{
public:
	ns1__abxFileTpResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileTpResult */
public:
	virtual int soap_type() const { return 855; } /* = unique id SOAP_TYPE_ns1__GetDataTPFileListByDocumentResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetDataTPFileListByDocumentResponse() { ns1__GetDataTPFileListByDocumentResponse::soap_default(NULL); }
	virtual ~ns1__GetDataTPFileListByDocumentResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DownloadFile
#define SOAP_TYPE_ns1__DownloadFile (856)
/* ns1:DownloadFile */
class SOAP_CMAC ns1__DownloadFile : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
	char *dataAttachmentId;	/* optional element of type xsd:string */
	char *dChunk;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 856; } /* = unique id SOAP_TYPE_ns1__DownloadFile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DownloadFile() { ns1__DownloadFile::soap_default(NULL); }
	virtual ~ns1__DownloadFile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DownloadFileResponse
#define SOAP_TYPE_ns1__DownloadFileResponse (857)
/* ns1:DownloadFileResponse */
class SOAP_CMAC ns1__DownloadFileResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 857; } /* = unique id SOAP_TYPE_ns1__DownloadFileResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DownloadFileResponse() { ns1__DownloadFileResponse::soap_default(NULL); }
	virtual ~ns1__DownloadFileResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DownloadFileContainerUnc
#define SOAP_TYPE_ns1__DownloadFileContainerUnc (858)
/* ns1:DownloadFileContainerUnc */
class SOAP_CMAC ns1__DownloadFileContainerUnc : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *UNCPath;	/* optional element of type xsd:string */
	char *dChunk;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 858; } /* = unique id SOAP_TYPE_ns1__DownloadFileContainerUnc */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DownloadFileContainerUnc() { ns1__DownloadFileContainerUnc::soap_default(NULL); }
	virtual ~ns1__DownloadFileContainerUnc() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DownloadFileContainerUncResponse
#define SOAP_TYPE_ns1__DownloadFileContainerUncResponse (859)
/* ns1:DownloadFileContainerUncResponse */
class SOAP_CMAC ns1__DownloadFileContainerUncResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 859; } /* = unique id SOAP_TYPE_ns1__DownloadFileContainerUncResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DownloadFileContainerUncResponse() { ns1__DownloadFileContainerUncResponse::soap_default(NULL); }
	virtual ~ns1__DownloadFileContainerUncResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CanDeleteProtocol
#define SOAP_TYPE_ns1__CanDeleteProtocol (860)
/* ns1:CanDeleteProtocol */
class SOAP_CMAC ns1__CanDeleteProtocol : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *protocolId;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 860; } /* = unique id SOAP_TYPE_ns1__CanDeleteProtocol */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CanDeleteProtocol() { ns1__CanDeleteProtocol::soap_default(NULL); }
	virtual ~ns1__CanDeleteProtocol() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CanDeleteProtocolResponse
#define SOAP_TYPE_ns1__CanDeleteProtocolResponse (861)
/* ns1:CanDeleteProtocolResponse */
class SOAP_CMAC ns1__CanDeleteProtocolResponse : public xsd__anyType
{
public:
	ns4__abxCan *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns4:abxCan */
public:
	virtual int soap_type() const { return 861; } /* = unique id SOAP_TYPE_ns1__CanDeleteProtocolResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CanDeleteProtocolResponse() { ns1__CanDeleteProtocolResponse::soap_default(NULL); }
	virtual ~ns1__CanDeleteProtocolResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__canCreateDynorg
#define SOAP_TYPE_ns1__canCreateDynorg (862)
/* ns1:canCreateDynorg */
class SOAP_CMAC ns1__canCreateDynorg : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
public:
	virtual int soap_type() const { return 862; } /* = unique id SOAP_TYPE_ns1__canCreateDynorg */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__canCreateDynorg() { ns1__canCreateDynorg::soap_default(NULL); }
	virtual ~ns1__canCreateDynorg() { }
};
#endif

#ifndef SOAP_TYPE_ns1__canCreateDynorgResponse
#define SOAP_TYPE_ns1__canCreateDynorgResponse (863)
/* ns1:canCreateDynorgResponse */
class SOAP_CMAC ns1__canCreateDynorgResponse : public xsd__anyType
{
public:
	ns4__abxCan *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns4:abxCan */
public:
	virtual int soap_type() const { return 863; } /* = unique id SOAP_TYPE_ns1__canCreateDynorgResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__canCreateDynorgResponse() { ns1__canCreateDynorgResponse::soap_default(NULL); }
	virtual ~ns1__canCreateDynorgResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InsertSchedulerTask
#define SOAP_TYPE_ns1__InsertSchedulerTask (864)
/* ns1:InsertSchedulerTask */
class SOAP_CMAC ns1__InsertSchedulerTask : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	ns1__abxSchedulerTask *abxSchedulerTask;	/* optional element of type ns1:abxSchedulerTask */
	class ns1__abxArchSostDocumentList *abxDocuments;	/* optional element of type ns1:abxArchSostDocumentList */
public:
	virtual int soap_type() const { return 864; } /* = unique id SOAP_TYPE_ns1__InsertSchedulerTask */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InsertSchedulerTask() { ns1__InsertSchedulerTask::soap_default(NULL); }
	virtual ~ns1__InsertSchedulerTask() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxArchSostDocumentList
#define SOAP_TYPE_ns1__abxArchSostDocumentList (865)
/* ns1:abxArchSostDocumentList */
class SOAP_CMAC ns1__abxArchSostDocumentList : public xsd__anyType
{
public:
	int __sizedataList;	/* sequence of elements <dataList> */
	class ns1__abxArchSostDocument **dataList;	/* required element of type ns1:abxArchSostDocument */
public:
	virtual int soap_type() const { return 865; } /* = unique id SOAP_TYPE_ns1__abxArchSostDocumentList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxArchSostDocumentList() { ns1__abxArchSostDocumentList::soap_default(NULL); }
	virtual ~ns1__abxArchSostDocumentList() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxArchSostDocument
#define SOAP_TYPE_ns1__abxArchSostDocument (866)
/* ns1:abxArchSostDocument */
class SOAP_CMAC ns1__abxArchSostDocument : public xsd__anyType
{
public:
	char *id;	/* required element of type xsd:string */
	char *schedulerDailyId;	/* required element of type xsd:string */
	char *schedulerWeeklyId;	/* required element of type xsd:string */
	char *schedulerMonthlyId;	/* required element of type xsd:string */
	char *instanceName;	/* required element of type xsd:string */
	char *dataId;	/* required element of type xsd:string */
	char *tdocDocumentId;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 866; } /* = unique id SOAP_TYPE_ns1__abxArchSostDocument */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxArchSostDocument() { ns1__abxArchSostDocument::soap_default(NULL); }
	virtual ~ns1__abxArchSostDocument() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InsertSchedulerTaskResponse
#define SOAP_TYPE_ns1__InsertSchedulerTaskResponse (867)
/* ns1:InsertSchedulerTaskResponse */
class SOAP_CMAC ns1__InsertSchedulerTaskResponse : public xsd__anyType
{
public:
	ns1__abxSchedulerResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxSchedulerResult */
public:
	virtual int soap_type() const { return 867; } /* = unique id SOAP_TYPE_ns1__InsertSchedulerTaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InsertSchedulerTaskResponse() { ns1__InsertSchedulerTaskResponse::soap_default(NULL); }
	virtual ~ns1__InsertSchedulerTaskResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CreateField
#define SOAP_TYPE_ns1__CreateField (868)
/* ns1:CreateField */
class SOAP_CMAC ns1__CreateField : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	ns1__abxField *Field2Update;	/* optional element of type ns1:abxField */
	ns1__abxCombo *recordsArray;	/* optional element of type ns1:abxCombo */
	ns1__abxFK *fkp;	/* optional element of type ns1:abxFK */
	bool optionGetCache;	/* required element of type xsd:boolean */
	bool optionSetDesc;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 868; } /* = unique id SOAP_TYPE_ns1__CreateField */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CreateField() { ns1__CreateField::soap_default(NULL); }
	virtual ~ns1__CreateField() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CreateFieldResponse
#define SOAP_TYPE_ns1__CreateFieldResponse (869)
/* ns1:CreateFieldResponse */
class SOAP_CMAC ns1__CreateFieldResponse : public xsd__anyType
{
public:
	ns1__abxFieldResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFieldResult */
public:
	virtual int soap_type() const { return 869; } /* = unique id SOAP_TYPE_ns1__CreateFieldResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CreateFieldResponse() { ns1__CreateFieldResponse::soap_default(NULL); }
	virtual ~ns1__CreateFieldResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DownloadFileWA
#define SOAP_TYPE_ns1__DownloadFileWA (870)
/* ns1:DownloadFileWA */
class SOAP_CMAC ns1__DownloadFileWA : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
	char *dataAttachmentId;	/* optional element of type xsd:string */
	char *dChunk;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 870; } /* = unique id SOAP_TYPE_ns1__DownloadFileWA */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DownloadFileWA() { ns1__DownloadFileWA::soap_default(NULL); }
	virtual ~ns1__DownloadFileWA() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DownloadFileWAResponse
#define SOAP_TYPE_ns1__DownloadFileWAResponse (871)
/* ns1:DownloadFileWAResponse */
class SOAP_CMAC ns1__DownloadFileWAResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 871; } /* = unique id SOAP_TYPE_ns1__DownloadFileWAResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DownloadFileWAResponse() { ns1__DownloadFileWAResponse::soap_default(NULL); }
	virtual ~ns1__DownloadFileWAResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetDataTPFileListByUsername
#define SOAP_TYPE_ns1__GetDataTPFileListByUsername (872)
/* ns1:GetDataTPFileListByUsername */
class SOAP_CMAC ns1__GetDataTPFileListByUsername : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *username;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 872; } /* = unique id SOAP_TYPE_ns1__GetDataTPFileListByUsername */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetDataTPFileListByUsername() { ns1__GetDataTPFileListByUsername::soap_default(NULL); }
	virtual ~ns1__GetDataTPFileListByUsername() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetDataTPFileListByUsernameResponse
#define SOAP_TYPE_ns1__GetDataTPFileListByUsernameResponse (873)
/* ns1:GetDataTPFileListByUsernameResponse */
class SOAP_CMAC ns1__GetDataTPFileListByUsernameResponse : public xsd__anyType
{
public:
	ns1__abxFileTpResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileTpResult */
public:
	virtual int soap_type() const { return 873; } /* = unique id SOAP_TYPE_ns1__GetDataTPFileListByUsernameResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetDataTPFileListByUsernameResponse() { ns1__GetDataTPFileListByUsernameResponse::soap_default(NULL); }
	virtual ~ns1__GetDataTPFileListByUsernameResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DownloadFileUnc
#define SOAP_TYPE_ns1__DownloadFileUnc (874)
/* ns1:DownloadFileUnc */
class SOAP_CMAC ns1__DownloadFileUnc : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *UNCPath;	/* optional element of type xsd:string */
	char *dChunk;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 874; } /* = unique id SOAP_TYPE_ns1__DownloadFileUnc */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DownloadFileUnc() { ns1__DownloadFileUnc::soap_default(NULL); }
	virtual ~ns1__DownloadFileUnc() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DownloadFileUncResponse
#define SOAP_TYPE_ns1__DownloadFileUncResponse (875)
/* ns1:DownloadFileUncResponse */
class SOAP_CMAC ns1__DownloadFileUncResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 875; } /* = unique id SOAP_TYPE_ns1__DownloadFileUncResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DownloadFileUncResponse() { ns1__DownloadFileUncResponse::soap_default(NULL); }
	virtual ~ns1__DownloadFileUncResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SaveChars
#define SOAP_TYPE_ns1__SaveChars (876)
/* Primitive ns1:SaveChars schema type: */
class SOAP_CMAC ns1__SaveChars : public xsd__anyType
{
public:
	virtual int soap_type() const { return 876; } /* = unique id SOAP_TYPE_ns1__SaveChars */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SaveChars() { ns1__SaveChars::soap_default(NULL); }
	virtual ~ns1__SaveChars() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SaveCharsResponse
#define SOAP_TYPE_ns1__SaveCharsResponse (877)
/* ns1:SaveCharsResponse */
class SOAP_CMAC ns1__SaveCharsResponse : public xsd__anyType
{
public:
	char *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 877; } /* = unique id SOAP_TYPE_ns1__SaveCharsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SaveCharsResponse() { ns1__SaveCharsResponse::soap_default(NULL); }
	virtual ~ns1__SaveCharsResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetUserSettings
#define SOAP_TYPE_ns1__GetUserSettings (878)
/* ns1:GetUserSettings */
class SOAP_CMAC ns1__GetUserSettings : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
	char *userName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 878; } /* = unique id SOAP_TYPE_ns1__GetUserSettings */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetUserSettings() { ns1__GetUserSettings::soap_default(NULL); }
	virtual ~ns1__GetUserSettings() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetUserSettingsResponse
#define SOAP_TYPE_ns1__GetUserSettingsResponse (879)
/* ns1:GetUserSettingsResponse */
class SOAP_CMAC ns1__GetUserSettingsResponse : public xsd__anyType
{
public:
	ns1__abxWorkflowResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxWorkflowResult */
public:
	virtual int soap_type() const { return 879; } /* = unique id SOAP_TYPE_ns1__GetUserSettingsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetUserSettingsResponse() { ns1__GetUserSettingsResponse::soap_default(NULL); }
	virtual ~ns1__GetUserSettingsResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__StartSDKTask
#define SOAP_TYPE_ns1__StartSDKTask (880)
/* ns1:StartSDKTask */
class SOAP_CMAC ns1__StartSDKTask : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *taskId;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 880; } /* = unique id SOAP_TYPE_ns1__StartSDKTask */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__StartSDKTask() { ns1__StartSDKTask::soap_default(NULL); }
	virtual ~ns1__StartSDKTask() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Fk_USCOREgetAllRecord
#define SOAP_TYPE_ns1__Fk_USCOREgetAllRecord (881)
/* ns1:Fk_getAllRecord */
class SOAP_CMAC ns1__Fk_USCOREgetAllRecord : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	ns1__abxFK *fk;	/* optional element of type ns1:abxFK */
	int numTotRecord;	/* required element of type xsd:int */
	char *orderBy;	/* optional element of type xsd:string */
	bool directionDesc;	/* required element of type xsd:boolean */
	char *InstanceName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 881; } /* = unique id SOAP_TYPE_ns1__Fk_USCOREgetAllRecord */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Fk_USCOREgetAllRecord() { ns1__Fk_USCOREgetAllRecord::soap_default(NULL); }
	virtual ~ns1__Fk_USCOREgetAllRecord() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Fk_USCOREgetAllRecordResponse
#define SOAP_TYPE_ns1__Fk_USCOREgetAllRecordResponse (882)
/* ns1:Fk_getAllRecordResponse */
class SOAP_CMAC ns1__Fk_USCOREgetAllRecordResponse : public xsd__anyType
{
public:
	ns1__abxFKResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFKResult */
public:
	virtual int soap_type() const { return 882; } /* = unique id SOAP_TYPE_ns1__Fk_USCOREgetAllRecordResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Fk_USCOREgetAllRecordResponse() { ns1__Fk_USCOREgetAllRecordResponse::soap_default(NULL); }
	virtual ~ns1__Fk_USCOREgetAllRecordResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteContainer
#define SOAP_TYPE_ns1__DeleteContainer (883)
/* ns1:DeleteContainer */
class SOAP_CMAC ns1__DeleteContainer : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *ContainerName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 883; } /* = unique id SOAP_TYPE_ns1__DeleteContainer */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteContainer() { ns1__DeleteContainer::soap_default(NULL); }
	virtual ~ns1__DeleteContainer() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteContainerResponse
#define SOAP_TYPE_ns1__DeleteContainerResponse (884)
/* ns1:DeleteContainerResponse */
class SOAP_CMAC ns1__DeleteContainerResponse : public xsd__anyType
{
public:
	ns1__abxContainerResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxContainerResult */
public:
	virtual int soap_type() const { return 884; } /* = unique id SOAP_TYPE_ns1__DeleteContainerResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteContainerResponse() { ns1__DeleteContainerResponse::soap_default(NULL); }
	virtual ~ns1__DeleteContainerResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteFileVersion
#define SOAP_TYPE_ns1__DeleteFileVersion (885)
/* ns1:DeleteFileVersion */
class SOAP_CMAC ns1__DeleteFileVersion : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
	char *objName;	/* optional element of type xsd:string */
	char *fileCode;	/* optional element of type xsd:string */
	char *versionNumber;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 885; } /* = unique id SOAP_TYPE_ns1__DeleteFileVersion */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteFileVersion() { ns1__DeleteFileVersion::soap_default(NULL); }
	virtual ~ns1__DeleteFileVersion() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteFileVersionResponse
#define SOAP_TYPE_ns1__DeleteFileVersionResponse (886)
/* ns1:DeleteFileVersionResponse */
class SOAP_CMAC ns1__DeleteFileVersionResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 886; } /* = unique id SOAP_TYPE_ns1__DeleteFileVersionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteFileVersionResponse() { ns1__DeleteFileVersionResponse::soap_default(NULL); }
	virtual ~ns1__DeleteFileVersionResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CanModifyFile
#define SOAP_TYPE_ns1__CanModifyFile (887)
/* ns1:CanModifyFile */
class SOAP_CMAC ns1__CanModifyFile : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
	ns1__abxFileList *dataListInput;	/* optional element of type ns1:abxFileList */
public:
	virtual int soap_type() const { return 887; } /* = unique id SOAP_TYPE_ns1__CanModifyFile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CanModifyFile() { ns1__CanModifyFile::soap_default(NULL); }
	virtual ~ns1__CanModifyFile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CanModifyFileResponse
#define SOAP_TYPE_ns1__CanModifyFileResponse (888)
/* ns1:CanModifyFileResponse */
class SOAP_CMAC ns1__CanModifyFileResponse : public xsd__anyType
{
public:
	ns4__abxCan *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns4:abxCan */
public:
	virtual int soap_type() const { return 888; } /* = unique id SOAP_TYPE_ns1__CanModifyFileResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CanModifyFileResponse() { ns1__CanModifyFileResponse::soap_default(NULL); }
	virtual ~ns1__CanModifyFileResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DelUserSettings
#define SOAP_TYPE_ns1__DelUserSettings (889)
/* ns1:DelUserSettings */
class SOAP_CMAC ns1__DelUserSettings : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	ns1__abxWorkflow *aw;	/* optional element of type ns1:abxWorkflow */
public:
	virtual int soap_type() const { return 889; } /* = unique id SOAP_TYPE_ns1__DelUserSettings */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DelUserSettings() { ns1__DelUserSettings::soap_default(NULL); }
	virtual ~ns1__DelUserSettings() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DelUserSettingsResponse
#define SOAP_TYPE_ns1__DelUserSettingsResponse (890)
/* ns1:DelUserSettingsResponse */
class SOAP_CMAC ns1__DelUserSettingsResponse : public xsd__anyType
{
public:
	ns1__abxWorkflowResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxWorkflowResult */
public:
	virtual int soap_type() const { return 890; } /* = unique id SOAP_TYPE_ns1__DelUserSettingsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DelUserSettingsResponse() { ns1__DelUserSettingsResponse::soap_default(NULL); }
	virtual ~ns1__DelUserSettingsResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CheckIn_USCOREdocument
#define SOAP_TYPE_ns1__CheckIn_USCOREdocument (891)
/* ns1:CheckIn_document */
class SOAP_CMAC ns1__CheckIn_USCOREdocument : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *InstanceName;	/* optional element of type xsd:string */
	char *Path;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 891; } /* = unique id SOAP_TYPE_ns1__CheckIn_USCOREdocument */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CheckIn_USCOREdocument() { ns1__CheckIn_USCOREdocument::soap_default(NULL); }
	virtual ~ns1__CheckIn_USCOREdocument() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CheckIn_USCOREdocumentResponse
#define SOAP_TYPE_ns1__CheckIn_USCOREdocumentResponse (892)
/* ns1:CheckIn_documentResponse */
class SOAP_CMAC ns1__CheckIn_USCOREdocumentResponse : public xsd__anyType
{
public:
	ns1__abxCheckinResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxCheckinResult */
public:
	virtual int soap_type() const { return 892; } /* = unique id SOAP_TYPE_ns1__CheckIn_USCOREdocumentResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CheckIn_USCOREdocumentResponse() { ns1__CheckIn_USCOREdocumentResponse::soap_default(NULL); }
	virtual ~ns1__CheckIn_USCOREdocumentResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SetTmpWFDownloadPath
#define SOAP_TYPE_ns1__SetTmpWFDownloadPath (893)
/* ns1:SetTmpWFDownloadPath */
class SOAP_CMAC ns1__SetTmpWFDownloadPath : public xsd__anyType
{
public:
	char *path;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 893; } /* = unique id SOAP_TYPE_ns1__SetTmpWFDownloadPath */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SetTmpWFDownloadPath() { ns1__SetTmpWFDownloadPath::soap_default(NULL); }
	virtual ~ns1__SetTmpWFDownloadPath() { }
};
#endif

#ifndef SOAP_TYPE_ns1__SetTmpWFDownloadPathResponse
#define SOAP_TYPE_ns1__SetTmpWFDownloadPathResponse (894)
/* ns1:SetTmpWFDownloadPathResponse */
class SOAP_CMAC ns1__SetTmpWFDownloadPathResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 894; } /* = unique id SOAP_TYPE_ns1__SetTmpWFDownloadPathResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__SetTmpWFDownloadPathResponse() { ns1__SetTmpWFDownloadPathResponse::soap_default(NULL); }
	virtual ~ns1__SetTmpWFDownloadPathResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ShowProtocol
#define SOAP_TYPE_ns1__ShowProtocol (895)
/* ns1:ShowProtocol */
class SOAP_CMAC ns1__ShowProtocol : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	ns2__abxProtocol *protocolData;	/* optional element of type ns2:abxProtocol */
public:
	virtual int soap_type() const { return 895; } /* = unique id SOAP_TYPE_ns1__ShowProtocol */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ShowProtocol() { ns1__ShowProtocol::soap_default(NULL); }
	virtual ~ns1__ShowProtocol() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ShowProtocolResponse
#define SOAP_TYPE_ns1__ShowProtocolResponse (896)
/* ns1:ShowProtocolResponse */
class SOAP_CMAC ns1__ShowProtocolResponse : public xsd__anyType
{
public:
	ns2__abxProtocolResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns2:abxProtocolResult */
public:
	virtual int soap_type() const { return 896; } /* = unique id SOAP_TYPE_ns1__ShowProtocolResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ShowProtocolResponse() { ns1__ShowProtocolResponse::soap_default(NULL); }
	virtual ~ns1__ShowProtocolResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteData
#define SOAP_TYPE_ns1__DeleteData (897)
/* ns1:DeleteData */
class SOAP_CMAC ns1__DeleteData : public xsd__anyType
{
public:
	ns1__IDtype *IDtype_USCORESessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
	char *dataId;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 897; } /* = unique id SOAP_TYPE_ns1__DeleteData */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteData() { ns1__DeleteData::soap_default(NULL); }
	virtual ~ns1__DeleteData() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteDataResponse
#define SOAP_TYPE_ns1__DeleteDataResponse (898)
/* ns1:DeleteDataResponse */
class SOAP_CMAC ns1__DeleteDataResponse : public xsd__anyType
{
public:
	ns1__abxDataResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxDataResult */
public:
	virtual int soap_type() const { return 898; } /* = unique id SOAP_TYPE_ns1__DeleteDataResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteDataResponse() { ns1__DeleteDataResponse::soap_default(NULL); }
	virtual ~ns1__DeleteDataResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__StoreSDKVariable
#define SOAP_TYPE_ns1__StoreSDKVariable (899)
/* ns1:StoreSDKVariable */
class SOAP_CMAC ns1__StoreSDKVariable : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *variableKey;	/* optional element of type xsd:string */
	char *variableValue;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 899; } /* = unique id SOAP_TYPE_ns1__StoreSDKVariable */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__StoreSDKVariable() { ns1__StoreSDKVariable::soap_default(NULL); }
	virtual ~ns1__StoreSDKVariable() { }
};
#endif

#ifndef SOAP_TYPE_ns1__StoreSDKVariableResponse
#define SOAP_TYPE_ns1__StoreSDKVariableResponse (900)
/* ns1:StoreSDKVariableResponse */
class SOAP_CMAC ns1__StoreSDKVariableResponse : public xsd__anyType
{
public:
	ns1__abxSDKResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxSDKResult */
public:
	virtual int soap_type() const { return 900; } /* = unique id SOAP_TYPE_ns1__StoreSDKVariableResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__StoreSDKVariableResponse() { ns1__StoreSDKVariableResponse::soap_default(NULL); }
	virtual ~ns1__StoreSDKVariableResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetObject
#define SOAP_TYPE_ns1__GetObject (901)
/* ns1:GetObject */
class SOAP_CMAC ns1__GetObject : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
public:
	virtual int soap_type() const { return 901; } /* = unique id SOAP_TYPE_ns1__GetObject */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetObject() { ns1__GetObject::soap_default(NULL); }
	virtual ~ns1__GetObject() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetObjectResponse
#define SOAP_TYPE_ns1__GetObjectResponse (902)
/* ns1:GetObjectResponse */
class SOAP_CMAC ns1__GetObjectResponse : public xsd__anyType
{
public:
	class ns1__abxGoResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxGoResult */
public:
	virtual int soap_type() const { return 902; } /* = unique id SOAP_TYPE_ns1__GetObjectResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetObjectResponse() { ns1__GetObjectResponse::soap_default(NULL); }
	virtual ~ns1__GetObjectResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxGoResult
#define SOAP_TYPE_ns1__abxGoResult (903)
/* ns1:abxGoResult */
class SOAP_CMAC ns1__abxGoResult : public xsd__anyType
{
public:
	unsigned int result;	/* required element of type xsd:unsignedInt */
	class ns1__abxObjDef *object;	/* required element of type ns1:abxObjDef */
public:
	virtual int soap_type() const { return 903; } /* = unique id SOAP_TYPE_ns1__abxGoResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxGoResult() { ns1__abxGoResult::soap_default(NULL); }
	virtual ~ns1__abxGoResult() { }
};
#endif

#ifndef SOAP_TYPE__ns1__abxObjDef_elobj_methods
#define SOAP_TYPE__ns1__abxObjDef_elobj_methods (1234)
/* ns1:abxObjDef-elobj-methods */
class SOAP_CMAC _ns1__abxObjDef_elobj_methods
{
public:
	char *methodName;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1234; } /* = unique id SOAP_TYPE__ns1__abxObjDef_elobj_methods */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__abxObjDef_elobj_methods() { _ns1__abxObjDef_elobj_methods::soap_default(NULL); }
	virtual ~_ns1__abxObjDef_elobj_methods() { }
};
#endif

#ifndef SOAP_TYPE__ns1__abxObjDef_elobj
#define SOAP_TYPE__ns1__abxObjDef_elobj (1233)
/* ns1:abxObjDef-elobj */
class SOAP_CMAC _ns1__abxObjDef_elobj
{
public:
	char *objName;	/* required element of type xsd:string */
	char *description;	/* required element of type xsd:string */
	int __sizemethods;	/* sequence of elements <methods> */
	_ns1__abxObjDef_elobj_methods *methods;	/* required element of type ns1:abxObjDef-elobj-methods */
public:
	virtual int soap_type() const { return 1233; } /* = unique id SOAP_TYPE__ns1__abxObjDef_elobj */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__abxObjDef_elobj() { _ns1__abxObjDef_elobj::soap_default(NULL); }
	virtual ~_ns1__abxObjDef_elobj() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abxObjDef
#define SOAP_TYPE_ns1__abxObjDef (904)
/* ns1:abxObjDef */
class SOAP_CMAC ns1__abxObjDef : public xsd__anyType
{
public:
	int __sizeelobj;	/* sequence of elements <elobj> */
	_ns1__abxObjDef_elobj *elobj;	/* required element of type ns1:abxObjDef-elobj */
	xsd__anyType *xxx;	/* required element of type xsd:anyType */
public:
	virtual int soap_type() const { return 904; } /* = unique id SOAP_TYPE_ns1__abxObjDef */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abxObjDef() { ns1__abxObjDef::soap_default(NULL); }
	virtual ~ns1__abxObjDef() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AddUser
#define SOAP_TYPE_ns1__AddUser (905)
/* ns1:AddUser */
class SOAP_CMAC ns1__AddUser : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *password;	/* optional element of type xsd:string */
	ns1__abxUser *user;	/* optional element of type ns1:abxUser */
public:
	virtual int soap_type() const { return 905; } /* = unique id SOAP_TYPE_ns1__AddUser */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AddUser() { ns1__AddUser::soap_default(NULL); }
	virtual ~ns1__AddUser() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AddUserResponse
#define SOAP_TYPE_ns1__AddUserResponse (906)
/* ns1:AddUserResponse */
class SOAP_CMAC ns1__AddUserResponse : public xsd__anyType
{
public:
	ns1__abxUserListResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxUserListResult */
public:
	virtual int soap_type() const { return 906; } /* = unique id SOAP_TYPE_ns1__AddUserResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__AddUserResponse() { ns1__AddUserResponse::soap_default(NULL); }
	virtual ~ns1__AddUserResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CheckIn_USCOREattachContainer
#define SOAP_TYPE_ns1__CheckIn_USCOREattachContainer (907)
/* ns1:CheckIn_attachContainer */
class SOAP_CMAC ns1__CheckIn_USCOREattachContainer : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *ObjName;	/* optional element of type xsd:string */
	char *Path;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 907; } /* = unique id SOAP_TYPE_ns1__CheckIn_USCOREattachContainer */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CheckIn_USCOREattachContainer() { ns1__CheckIn_USCOREattachContainer::soap_default(NULL); }
	virtual ~ns1__CheckIn_USCOREattachContainer() { }
};
#endif

#ifndef SOAP_TYPE_ns1__CheckIn_USCOREattachContainerResponse
#define SOAP_TYPE_ns1__CheckIn_USCOREattachContainerResponse (908)
/* ns1:CheckIn_attachContainerResponse */
class SOAP_CMAC ns1__CheckIn_USCOREattachContainerResponse : public xsd__anyType
{
public:
	ns1__abxCheckinResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxCheckinResult */
public:
	virtual int soap_type() const { return 908; } /* = unique id SOAP_TYPE_ns1__CheckIn_USCOREattachContainerResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__CheckIn_USCOREattachContainerResponse() { ns1__CheckIn_USCOREattachContainerResponse::soap_default(NULL); }
	virtual ~ns1__CheckIn_USCOREattachContainerResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetTemplateProperties
#define SOAP_TYPE_ns1__GetTemplateProperties (909)
/* ns1:GetTemplateProperties */
class SOAP_CMAC ns1__GetTemplateProperties : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *TemplateName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 909; } /* = unique id SOAP_TYPE_ns1__GetTemplateProperties */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetTemplateProperties() { ns1__GetTemplateProperties::soap_default(NULL); }
	virtual ~ns1__GetTemplateProperties() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetTemplatePropertiesResponse
#define SOAP_TYPE_ns1__GetTemplatePropertiesResponse (910)
/* ns1:GetTemplatePropertiesResponse */
class SOAP_CMAC ns1__GetTemplatePropertiesResponse : public xsd__anyType
{
public:
	ns1__abxTemplateResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxTemplateResult */
public:
	virtual int soap_type() const { return 910; } /* = unique id SOAP_TYPE_ns1__GetTemplatePropertiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetTemplatePropertiesResponse() { ns1__GetTemplatePropertiesResponse::soap_default(NULL); }
	virtual ~ns1__GetTemplatePropertiesResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetDataWFFileDetail
#define SOAP_TYPE_ns1__GetDataWFFileDetail (911)
/* ns1:GetDataWFFileDetail */
class SOAP_CMAC ns1__GetDataWFFileDetail : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
	char *objName;	/* optional element of type xsd:string */
	char *attachmentId;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 911; } /* = unique id SOAP_TYPE_ns1__GetDataWFFileDetail */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetDataWFFileDetail() { ns1__GetDataWFFileDetail::soap_default(NULL); }
	virtual ~ns1__GetDataWFFileDetail() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetDataWFFileDetailResponse
#define SOAP_TYPE_ns1__GetDataWFFileDetailResponse (912)
/* ns1:GetDataWFFileDetailResponse */
class SOAP_CMAC ns1__GetDataWFFileDetailResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 912; } /* = unique id SOAP_TYPE_ns1__GetDataWFFileDetailResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetDataWFFileDetailResponse() { ns1__GetDataWFFileDetailResponse::soap_default(NULL); }
	virtual ~ns1__GetDataWFFileDetailResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetAllObjectWithSystem
#define SOAP_TYPE_ns1__GetAllObjectWithSystem (913)
/* ns1:GetAllObjectWithSystem */
class SOAP_CMAC ns1__GetAllObjectWithSystem : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
public:
	virtual int soap_type() const { return 913; } /* = unique id SOAP_TYPE_ns1__GetAllObjectWithSystem */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetAllObjectWithSystem() { ns1__GetAllObjectWithSystem::soap_default(NULL); }
	virtual ~ns1__GetAllObjectWithSystem() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetAllObjectWithSystemResponse
#define SOAP_TYPE_ns1__GetAllObjectWithSystemResponse (914)
/* ns1:GetAllObjectWithSystemResponse */
class SOAP_CMAC ns1__GetAllObjectWithSystemResponse : public xsd__anyType
{
public:
	ns1__abxGoResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxGoResult */
public:
	virtual int soap_type() const { return 914; } /* = unique id SOAP_TYPE_ns1__GetAllObjectWithSystemResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetAllObjectWithSystemResponse() { ns1__GetAllObjectWithSystemResponse::soap_default(NULL); }
	virtual ~ns1__GetAllObjectWithSystemResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetInstanceReplication
#define SOAP_TYPE_ns1__GetInstanceReplication (915)
/* ns1:GetInstanceReplication */
class SOAP_CMAC ns1__GetInstanceReplication : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 915; } /* = unique id SOAP_TYPE_ns1__GetInstanceReplication */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetInstanceReplication() { ns1__GetInstanceReplication::soap_default(NULL); }
	virtual ~ns1__GetInstanceReplication() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetInstanceReplicationResponse
#define SOAP_TYPE_ns1__GetInstanceReplicationResponse (916)
/* ns1:GetInstanceReplicationResponse */
class SOAP_CMAC ns1__GetInstanceReplicationResponse : public xsd__anyType
{
public:
	ns1__abxReplicationResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxReplicationResult */
public:
	virtual int soap_type() const { return 916; } /* = unique id SOAP_TYPE_ns1__GetInstanceReplicationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetInstanceReplicationResponse() { ns1__GetInstanceReplicationResponse::soap_default(NULL); }
	virtual ~ns1__GetInstanceReplicationResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteFileWA
#define SOAP_TYPE_ns1__DeleteFileWA (917)
/* ns1:DeleteFileWA */
class SOAP_CMAC ns1__DeleteFileWA : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
	char *fileCode;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 917; } /* = unique id SOAP_TYPE_ns1__DeleteFileWA */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteFileWA() { ns1__DeleteFileWA::soap_default(NULL); }
	virtual ~ns1__DeleteFileWA() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteFileWAResponse
#define SOAP_TYPE_ns1__DeleteFileWAResponse (918)
/* ns1:DeleteFileWAResponse */
class SOAP_CMAC ns1__DeleteFileWAResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 918; } /* = unique id SOAP_TYPE_ns1__DeleteFileWAResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteFileWAResponse() { ns1__DeleteFileWAResponse::soap_default(NULL); }
	virtual ~ns1__DeleteFileWAResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteFileContainerVersion
#define SOAP_TYPE_ns1__DeleteFileContainerVersion (919)
/* ns1:DeleteFileContainerVersion */
class SOAP_CMAC ns1__DeleteFileContainerVersion : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
	char *objName;	/* optional element of type xsd:string */
	char *fileCode;	/* optional element of type xsd:string */
	char *versionNumber;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 919; } /* = unique id SOAP_TYPE_ns1__DeleteFileContainerVersion */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteFileContainerVersion() { ns1__DeleteFileContainerVersion::soap_default(NULL); }
	virtual ~ns1__DeleteFileContainerVersion() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DeleteFileContainerVersionResponse
#define SOAP_TYPE_ns1__DeleteFileContainerVersionResponse (920)
/* ns1:DeleteFileContainerVersionResponse */
class SOAP_CMAC ns1__DeleteFileContainerVersionResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 920; } /* = unique id SOAP_TYPE_ns1__DeleteFileContainerVersionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeleteFileContainerVersionResponse() { ns1__DeleteFileContainerVersionResponse::soap_default(NULL); }
	virtual ~ns1__DeleteFileContainerVersionResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InsertFile
#define SOAP_TYPE_ns1__InsertFile (921)
/* ns1:InsertFile */
class SOAP_CMAC ns1__InsertFile : public xsd__anyType
{
public:
	ns1__IDtype *SessionId;	/* optional element of type ns1:IDtype */
	char *instanceName;	/* optional element of type xsd:string */
	char *objName;	/* optional element of type xsd:string */
	ns1__abxFileList *dataListInput;	/* optional element of type ns1:abxFileList */
	bool retrieveCodeIfMissing;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 921; } /* = unique id SOAP_TYPE_ns1__InsertFile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InsertFile() { ns1__InsertFile::soap_default(NULL); }
	virtual ~ns1__InsertFile() { }
};
#endif

#ifndef SOAP_TYPE_ns1__InsertFileResponse
#define SOAP_TYPE_ns1__InsertFileResponse (922)
/* ns1:InsertFileResponse */
class SOAP_CMAC ns1__InsertFileResponse : public xsd__anyType
{
public:
	ns1__abxFileResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:abxFileResult */
public:
	virtual int soap_type() const { return 922; } /* = unique id SOAP_TYPE_ns1__InsertFileResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__InsertFileResponse() { ns1__InsertFileResponse::soap_default(NULL); }
	virtual ~ns1__InsertFileResponse() { }
};
#endif

#ifndef SOAP_TYPE___ns1__CreateContainer
#define SOAP_TYPE___ns1__CreateContainer (1240)
/* Operation wrapper: */
struct __ns1__CreateContainer
{
public:
	ns1__CreateContainer *ns1__CreateContainer_;	/* optional element of type ns1:CreateContainer */
public:
	int soap_type() const { return 1240; } /* = unique id SOAP_TYPE___ns1__CreateContainer */
};
#endif

#ifndef SOAP_TYPE___ns1__CreateTemplate
#define SOAP_TYPE___ns1__CreateTemplate (1244)
/* Operation wrapper: */
struct __ns1__CreateTemplate
{
public:
	ns1__CreateTemplate *ns1__CreateTemplate_;	/* optional element of type ns1:CreateTemplate */
public:
	int soap_type() const { return 1244; } /* = unique id SOAP_TYPE___ns1__CreateTemplate */
};
#endif

#ifndef SOAP_TYPE___ns1__CreateDynorg
#define SOAP_TYPE___ns1__CreateDynorg (1248)
/* Operation wrapper: */
struct __ns1__CreateDynorg
{
public:
	ns1__CreateDynorg *ns1__CreateDynorg_;	/* optional element of type ns1:CreateDynorg */
public:
	int soap_type() const { return 1248; } /* = unique id SOAP_TYPE___ns1__CreateDynorg */
};
#endif

#ifndef SOAP_TYPE___ns1__SetInstanceReplication
#define SOAP_TYPE___ns1__SetInstanceReplication (1252)
/* Operation wrapper: */
struct __ns1__SetInstanceReplication
{
public:
	ns1__SetInstanceReplication *ns1__SetInstanceReplication_;	/* optional element of type ns1:SetInstanceReplication */
public:
	int soap_type() const { return 1252; } /* = unique id SOAP_TYPE___ns1__SetInstanceReplication */
};
#endif

#ifndef SOAP_TYPE___ns1__ModifyContainer
#define SOAP_TYPE___ns1__ModifyContainer (1256)
/* Operation wrapper: */
struct __ns1__ModifyContainer
{
public:
	ns1__ModifyContainer *ns1__ModifyContainer_;	/* optional element of type ns1:ModifyContainer */
public:
	int soap_type() const { return 1256; } /* = unique id SOAP_TYPE___ns1__ModifyContainer */
};
#endif

#ifndef SOAP_TYPE___ns1__ModifyTemplate
#define SOAP_TYPE___ns1__ModifyTemplate (1260)
/* Operation wrapper: */
struct __ns1__ModifyTemplate
{
public:
	ns1__ModifyTemplate *ns1__ModifyTemplate_;	/* optional element of type ns1:ModifyTemplate */
public:
	int soap_type() const { return 1260; } /* = unique id SOAP_TYPE___ns1__ModifyTemplate */
};
#endif

#ifndef SOAP_TYPE___ns1__DeleteTemplate
#define SOAP_TYPE___ns1__DeleteTemplate (1264)
/* Operation wrapper: */
struct __ns1__DeleteTemplate
{
public:
	ns1__DeleteTemplate *ns1__DeleteTemplate_;	/* optional element of type ns1:DeleteTemplate */
public:
	int soap_type() const { return 1264; } /* = unique id SOAP_TYPE___ns1__DeleteTemplate */
};
#endif

#ifndef SOAP_TYPE___ns1__DeleteContainer
#define SOAP_TYPE___ns1__DeleteContainer (1268)
/* Operation wrapper: */
struct __ns1__DeleteContainer
{
public:
	ns1__DeleteContainer *ns1__DeleteContainer_;	/* optional element of type ns1:DeleteContainer */
public:
	int soap_type() const { return 1268; } /* = unique id SOAP_TYPE___ns1__DeleteContainer */
};
#endif

#ifndef SOAP_TYPE___ns1__canModifyContainer
#define SOAP_TYPE___ns1__canModifyContainer (1272)
/* Operation wrapper: */
struct __ns1__canModifyContainer
{
public:
	ns1__canModifyContainer *ns1__canModifyContainer_;	/* optional element of type ns1:canModifyContainer */
public:
	int soap_type() const { return 1272; } /* = unique id SOAP_TYPE___ns1__canModifyContainer */
};
#endif

#ifndef SOAP_TYPE___ns1__canModifyTemplate
#define SOAP_TYPE___ns1__canModifyTemplate (1276)
/* Operation wrapper: */
struct __ns1__canModifyTemplate
{
public:
	ns1__canModifyTemplate *ns1__canModifyTemplate_;	/* optional element of type ns1:canModifyTemplate */
public:
	int soap_type() const { return 1276; } /* = unique id SOAP_TYPE___ns1__canModifyTemplate */
};
#endif

#ifndef SOAP_TYPE___ns1__canDeleteContainer
#define SOAP_TYPE___ns1__canDeleteContainer (1280)
/* Operation wrapper: */
struct __ns1__canDeleteContainer
{
public:
	ns1__canDeleteContainer *ns1__canDeleteContainer_;	/* optional element of type ns1:canDeleteContainer */
public:
	int soap_type() const { return 1280; } /* = unique id SOAP_TYPE___ns1__canDeleteContainer */
};
#endif

#ifndef SOAP_TYPE___ns1__canDeleteTemplate
#define SOAP_TYPE___ns1__canDeleteTemplate (1284)
/* Operation wrapper: */
struct __ns1__canDeleteTemplate
{
public:
	ns1__canDeleteTemplate *ns1__canDeleteTemplate_;	/* optional element of type ns1:canDeleteTemplate */
public:
	int soap_type() const { return 1284; } /* = unique id SOAP_TYPE___ns1__canDeleteTemplate */
};
#endif

#ifndef SOAP_TYPE___ns1__canCreateContainer
#define SOAP_TYPE___ns1__canCreateContainer (1288)
/* Operation wrapper: */
struct __ns1__canCreateContainer
{
public:
	ns1__canCreateContainer *ns1__canCreateContainer_;	/* optional element of type ns1:canCreateContainer */
public:
	int soap_type() const { return 1288; } /* = unique id SOAP_TYPE___ns1__canCreateContainer */
};
#endif

#ifndef SOAP_TYPE___ns1__canCreateTemplate
#define SOAP_TYPE___ns1__canCreateTemplate (1292)
/* Operation wrapper: */
struct __ns1__canCreateTemplate
{
public:
	ns1__canCreateTemplate *ns1__canCreateTemplate_;	/* optional element of type ns1:canCreateTemplate */
public:
	int soap_type() const { return 1292; } /* = unique id SOAP_TYPE___ns1__canCreateTemplate */
};
#endif

#ifndef SOAP_TYPE___ns1__GetDynorgList
#define SOAP_TYPE___ns1__GetDynorgList (1296)
/* Operation wrapper: */
struct __ns1__GetDynorgList
{
public:
	ns1__GetDynorgList *ns1__GetDynorgList_;	/* optional element of type ns1:GetDynorgList */
public:
	int soap_type() const { return 1296; } /* = unique id SOAP_TYPE___ns1__GetDynorgList */
};
#endif

#ifndef SOAP_TYPE___ns1__ModifyDynorg
#define SOAP_TYPE___ns1__ModifyDynorg (1300)
/* Operation wrapper: */
struct __ns1__ModifyDynorg
{
public:
	ns1__ModifyDynorg *ns1__ModifyDynorg_;	/* optional element of type ns1:ModifyDynorg */
public:
	int soap_type() const { return 1300; } /* = unique id SOAP_TYPE___ns1__ModifyDynorg */
};
#endif

#ifndef SOAP_TYPE___ns1__DeleteDynorg
#define SOAP_TYPE___ns1__DeleteDynorg (1304)
/* Operation wrapper: */
struct __ns1__DeleteDynorg
{
public:
	ns1__DeleteDynorg *ns1__DeleteDynorg_;	/* optional element of type ns1:DeleteDynorg */
public:
	int soap_type() const { return 1304; } /* = unique id SOAP_TYPE___ns1__DeleteDynorg */
};
#endif

#ifndef SOAP_TYPE___ns1__DigitalSign
#define SOAP_TYPE___ns1__DigitalSign (1308)
/* Operation wrapper: */
struct __ns1__DigitalSign
{
public:
	ns1__DigitalSign *ns1__DigitalSign_;	/* optional element of type ns1:DigitalSign */
public:
	int soap_type() const { return 1308; } /* = unique id SOAP_TYPE___ns1__DigitalSign */
};
#endif

#ifndef SOAP_TYPE___ns1__GetArchiBoxInDomainByMatricola
#define SOAP_TYPE___ns1__GetArchiBoxInDomainByMatricola (1312)
/* Operation wrapper: */
struct __ns1__GetArchiBoxInDomainByMatricola
{
public:
	ns1__GetArchiBoxInDomainByMatricola *ns1__GetArchiBoxInDomainByMatricola_;	/* optional element of type ns1:GetArchiBoxInDomainByMatricola */
public:
	int soap_type() const { return 1312; } /* = unique id SOAP_TYPE___ns1__GetArchiBoxInDomainByMatricola */
};
#endif

#ifndef SOAP_TYPE___ns1__GetArchiBoxInfo
#define SOAP_TYPE___ns1__GetArchiBoxInfo (1316)
/* Operation wrapper: */
struct __ns1__GetArchiBoxInfo
{
public:
	ns1__GetArchiBoxInfo *ns1__GetArchiBoxInfo_;	/* optional element of type ns1:GetArchiBoxInfo */
public:
	int soap_type() const { return 1316; } /* = unique id SOAP_TYPE___ns1__GetArchiBoxInfo */
};
#endif

#ifndef SOAP_TYPE___ns1__GetArchiBoxInDomain
#define SOAP_TYPE___ns1__GetArchiBoxInDomain (1320)
/* Operation wrapper: */
struct __ns1__GetArchiBoxInDomain
{
public:
	ns1__GetArchiBoxInDomain *ns1__GetArchiBoxInDomain_;	/* optional element of type ns1:GetArchiBoxInDomain */
public:
	int soap_type() const { return 1320; } /* = unique id SOAP_TYPE___ns1__GetArchiBoxInDomain */
};
#endif

#ifndef SOAP_TYPE___ns1__GetInstanceReplicationStatus
#define SOAP_TYPE___ns1__GetInstanceReplicationStatus (1324)
/* Operation wrapper: */
struct __ns1__GetInstanceReplicationStatus
{
public:
	ns1__GetInstanceReplicationStatus *ns1__GetInstanceReplicationStatus_;	/* optional element of type ns1:GetInstanceReplicationStatus */
public:
	int soap_type() const { return 1324; } /* = unique id SOAP_TYPE___ns1__GetInstanceReplicationStatus */
};
#endif

#ifndef SOAP_TYPE___ns1__GetCountDocumentLinks
#define SOAP_TYPE___ns1__GetCountDocumentLinks (1328)
/* Operation wrapper: */
struct __ns1__GetCountDocumentLinks
{
public:
	ns1__GetCountDocumentLinks *ns1__GetCountDocumentLinks_;	/* optional element of type ns1:GetCountDocumentLinks */
public:
	int soap_type() const { return 1328; } /* = unique id SOAP_TYPE___ns1__GetCountDocumentLinks */
};
#endif

#ifndef SOAP_TYPE___ns1__InsertDataWA
#define SOAP_TYPE___ns1__InsertDataWA (1332)
/* Operation wrapper: */
struct __ns1__InsertDataWA
{
public:
	ns1__InsertDataWA *ns1__InsertDataWA_;	/* optional element of type ns1:InsertDataWA */
public:
	int soap_type() const { return 1332; } /* = unique id SOAP_TYPE___ns1__InsertDataWA */
};
#endif

#ifndef SOAP_TYPE___ns1__ModifyDataWA
#define SOAP_TYPE___ns1__ModifyDataWA (1336)
/* Operation wrapper: */
struct __ns1__ModifyDataWA
{
public:
	ns1__ModifyDataWA *ns1__ModifyDataWA_;	/* optional element of type ns1:ModifyDataWA */
public:
	int soap_type() const { return 1336; } /* = unique id SOAP_TYPE___ns1__ModifyDataWA */
};
#endif

#ifndef SOAP_TYPE___ns1__DeleteDataWA
#define SOAP_TYPE___ns1__DeleteDataWA (1340)
/* Operation wrapper: */
struct __ns1__DeleteDataWA
{
public:
	ns1__DeleteDataWA *ns1__DeleteDataWA_;	/* optional element of type ns1:DeleteDataWA */
public:
	int soap_type() const { return 1340; } /* = unique id SOAP_TYPE___ns1__DeleteDataWA */
};
#endif

#ifndef SOAP_TYPE___ns1__GetListDataWA
#define SOAP_TYPE___ns1__GetListDataWA (1344)
/* Operation wrapper: */
struct __ns1__GetListDataWA
{
public:
	ns1__GetListDataWA *ns1__GetListDataWA_;	/* optional element of type ns1:GetListDataWA */
public:
	int soap_type() const { return 1344; } /* = unique id SOAP_TYPE___ns1__GetListDataWA */
};
#endif

#ifndef SOAP_TYPE___ns1__GetDataWAById
#define SOAP_TYPE___ns1__GetDataWAById (1348)
/* Operation wrapper: */
struct __ns1__GetDataWAById
{
public:
	ns1__GetDataWAById *ns1__GetDataWAById_;	/* optional element of type ns1:GetDataWAById */
public:
	int soap_type() const { return 1348; } /* = unique id SOAP_TYPE___ns1__GetDataWAById */
};
#endif

#ifndef SOAP_TYPE___ns1__InsertFileWA
#define SOAP_TYPE___ns1__InsertFileWA (1352)
/* Operation wrapper: */
struct __ns1__InsertFileWA
{
public:
	ns1__InsertFileWA *ns1__InsertFileWA_;	/* optional element of type ns1:InsertFileWA */
public:
	int soap_type() const { return 1352; } /* = unique id SOAP_TYPE___ns1__InsertFileWA */
};
#endif

#ifndef SOAP_TYPE___ns1__UploadSendChunkWA
#define SOAP_TYPE___ns1__UploadSendChunkWA (1356)
/* Operation wrapper: */
struct __ns1__UploadSendChunkWA
{
public:
	ns1__UploadSendChunkWA *ns1__UploadSendChunkWA_;	/* optional element of type ns1:UploadSendChunkWA */
public:
	int soap_type() const { return 1356; } /* = unique id SOAP_TYPE___ns1__UploadSendChunkWA */
};
#endif

#ifndef SOAP_TYPE___ns1__UploadEndFileWA
#define SOAP_TYPE___ns1__UploadEndFileWA (1360)
/* Operation wrapper: */
struct __ns1__UploadEndFileWA
{
public:
	ns1__UploadEndFileWA *ns1__UploadEndFileWA_;	/* optional element of type ns1:UploadEndFileWA */
public:
	int soap_type() const { return 1360; } /* = unique id SOAP_TYPE___ns1__UploadEndFileWA */
};
#endif

#ifndef SOAP_TYPE___ns1__GetDataFileListWA
#define SOAP_TYPE___ns1__GetDataFileListWA (1364)
/* Operation wrapper: */
struct __ns1__GetDataFileListWA
{
public:
	ns1__GetDataFileListWA *ns1__GetDataFileListWA_;	/* optional element of type ns1:GetDataFileListWA */
public:
	int soap_type() const { return 1364; } /* = unique id SOAP_TYPE___ns1__GetDataFileListWA */
};
#endif

#ifndef SOAP_TYPE___ns1__DownloadFileWAByFileUniqueCode
#define SOAP_TYPE___ns1__DownloadFileWAByFileUniqueCode (1368)
/* Operation wrapper: */
struct __ns1__DownloadFileWAByFileUniqueCode
{
public:
	ns1__DownloadFileWAByFileUniqueCode *ns1__DownloadFileWAByFileUniqueCode_;	/* optional element of type ns1:DownloadFileWAByFileUniqueCode */
public:
	int soap_type() const { return 1368; } /* = unique id SOAP_TYPE___ns1__DownloadFileWAByFileUniqueCode */
};
#endif

#ifndef SOAP_TYPE___ns1__DownloadFileWA
#define SOAP_TYPE___ns1__DownloadFileWA (1372)
/* Operation wrapper: */
struct __ns1__DownloadFileWA
{
public:
	ns1__DownloadFileWA *ns1__DownloadFileWA_;	/* optional element of type ns1:DownloadFileWA */
public:
	int soap_type() const { return 1372; } /* = unique id SOAP_TYPE___ns1__DownloadFileWA */
};
#endif

#ifndef SOAP_TYPE___ns1__DownloadGetNextWA
#define SOAP_TYPE___ns1__DownloadGetNextWA (1376)
/* Operation wrapper: */
struct __ns1__DownloadGetNextWA
{
public:
	ns1__DownloadGetNextWA *ns1__DownloadGetNextWA_;	/* optional element of type ns1:DownloadGetNextWA */
public:
	int soap_type() const { return 1376; } /* = unique id SOAP_TYPE___ns1__DownloadGetNextWA */
};
#endif

#ifndef SOAP_TYPE___ns1__DownloadEndFileWA
#define SOAP_TYPE___ns1__DownloadEndFileWA (1380)
/* Operation wrapper: */
struct __ns1__DownloadEndFileWA
{
public:
	ns1__DownloadEndFileWA *ns1__DownloadEndFileWA_;	/* optional element of type ns1:DownloadEndFileWA */
public:
	int soap_type() const { return 1380; } /* = unique id SOAP_TYPE___ns1__DownloadEndFileWA */
};
#endif

#ifndef SOAP_TYPE___ns1__DeleteFileWA
#define SOAP_TYPE___ns1__DeleteFileWA (1384)
/* Operation wrapper: */
struct __ns1__DeleteFileWA
{
public:
	ns1__DeleteFileWA *ns1__DeleteFileWA_;	/* optional element of type ns1:DeleteFileWA */
public:
	int soap_type() const { return 1384; } /* = unique id SOAP_TYPE___ns1__DeleteFileWA */
};
#endif

#ifndef SOAP_TYPE___ns1__Fk_USCOREgetRemoteFieldList
#define SOAP_TYPE___ns1__Fk_USCOREgetRemoteFieldList (1388)
/* Operation wrapper: */
struct __ns1__Fk_USCOREgetRemoteFieldList
{
public:
	ns1__Fk_USCOREgetRemoteFieldList *ns1__Fk_USCOREgetRemoteFieldList_;	/* optional element of type ns1:Fk_getRemoteFieldList */
public:
	int soap_type() const { return 1388; } /* = unique id SOAP_TYPE___ns1__Fk_USCOREgetRemoteFieldList */
};
#endif

#ifndef SOAP_TYPE___ns1__Fk_USCOREgetLocalFieldList
#define SOAP_TYPE___ns1__Fk_USCOREgetLocalFieldList (1392)
/* Operation wrapper: */
struct __ns1__Fk_USCOREgetLocalFieldList
{
public:
	ns1__Fk_USCOREgetLocalFieldList *ns1__Fk_USCOREgetLocalFieldList_;	/* optional element of type ns1:Fk_getLocalFieldList */
public:
	int soap_type() const { return 1392; } /* = unique id SOAP_TYPE___ns1__Fk_USCOREgetLocalFieldList */
};
#endif

#ifndef SOAP_TYPE___ns1__Query
#define SOAP_TYPE___ns1__Query (1396)
/* Operation wrapper: */
struct __ns1__Query
{
public:
	ns1__Query *ns1__Query_;	/* optional element of type ns1:Query */
public:
	int soap_type() const { return 1396; } /* = unique id SOAP_TYPE___ns1__Query */
};
#endif

#ifndef SOAP_TYPE___ns1__Fk_USCOREgetAllRecord
#define SOAP_TYPE___ns1__Fk_USCOREgetAllRecord (1400)
/* Operation wrapper: */
struct __ns1__Fk_USCOREgetAllRecord
{
public:
	ns1__Fk_USCOREgetAllRecord *ns1__Fk_USCOREgetAllRecord_;	/* optional element of type ns1:Fk_getAllRecord */
public:
	int soap_type() const { return 1400; } /* = unique id SOAP_TYPE___ns1__Fk_USCOREgetAllRecord */
};
#endif

#ifndef SOAP_TYPE___ns1__Fk_USCOREgetCountAllRecord
#define SOAP_TYPE___ns1__Fk_USCOREgetCountAllRecord (1404)
/* Operation wrapper: */
struct __ns1__Fk_USCOREgetCountAllRecord
{
public:
	ns1__Fk_USCOREgetCountAllRecord *ns1__Fk_USCOREgetCountAllRecord_;	/* optional element of type ns1:Fk_getCountAllRecord */
public:
	int soap_type() const { return 1404; } /* = unique id SOAP_TYPE___ns1__Fk_USCOREgetCountAllRecord */
};
#endif

#ifndef SOAP_TYPE___ns1__Fk_USCOREgetAllRecordByIndex
#define SOAP_TYPE___ns1__Fk_USCOREgetAllRecordByIndex (1408)
/* Operation wrapper: */
struct __ns1__Fk_USCOREgetAllRecordByIndex
{
public:
	ns1__Fk_USCOREgetAllRecordByIndex *ns1__Fk_USCOREgetAllRecordByIndex_;	/* optional element of type ns1:Fk_getAllRecordByIndex */
public:
	int soap_type() const { return 1408; } /* = unique id SOAP_TYPE___ns1__Fk_USCOREgetAllRecordByIndex */
};
#endif

#ifndef SOAP_TYPE___ns1__Fk_USCOREgetAllRecordByDesc
#define SOAP_TYPE___ns1__Fk_USCOREgetAllRecordByDesc (1412)
/* Operation wrapper: */
struct __ns1__Fk_USCOREgetAllRecordByDesc
{
public:
	ns1__Fk_USCOREgetAllRecordByDesc *ns1__Fk_USCOREgetAllRecordByDesc_;	/* optional element of type ns1:Fk_getAllRecordByDesc */
public:
	int soap_type() const { return 1412; } /* = unique id SOAP_TYPE___ns1__Fk_USCOREgetAllRecordByDesc */
};
#endif

#ifndef SOAP_TYPE___ns1__Fk_USCOREgetCountAllRecordByDesc
#define SOAP_TYPE___ns1__Fk_USCOREgetCountAllRecordByDesc (1416)
/* Operation wrapper: */
struct __ns1__Fk_USCOREgetCountAllRecordByDesc
{
public:
	ns1__Fk_USCOREgetCountAllRecordByDesc *ns1__Fk_USCOREgetCountAllRecordByDesc_;	/* optional element of type ns1:Fk_getCountAllRecordByDesc */
public:
	int soap_type() const { return 1416; } /* = unique id SOAP_TYPE___ns1__Fk_USCOREgetCountAllRecordByDesc */
};
#endif

#ifndef SOAP_TYPE___ns1__Fk_USCOREgetCountAllRecordByIndexDesc
#define SOAP_TYPE___ns1__Fk_USCOREgetCountAllRecordByIndexDesc (1420)
/* Operation wrapper: */
struct __ns1__Fk_USCOREgetCountAllRecordByIndexDesc
{
public:
	ns1__Fk_USCOREgetCountAllRecordByIndexDesc *ns1__Fk_USCOREgetCountAllRecordByIndexDesc_;	/* optional element of type ns1:Fk_getCountAllRecordByIndexDesc */
public:
	int soap_type() const { return 1420; } /* = unique id SOAP_TYPE___ns1__Fk_USCOREgetCountAllRecordByIndexDesc */
};
#endif

#ifndef SOAP_TYPE___ns1__Fk_USCOREgetAllRecordByIndexDesc
#define SOAP_TYPE___ns1__Fk_USCOREgetAllRecordByIndexDesc (1424)
/* Operation wrapper: */
struct __ns1__Fk_USCOREgetAllRecordByIndexDesc
{
public:
	ns1__Fk_USCOREgetAllRecordByIndexDesc *ns1__Fk_USCOREgetAllRecordByIndexDesc_;	/* optional element of type ns1:Fk_getAllRecordByIndexDesc */
public:
	int soap_type() const { return 1424; } /* = unique id SOAP_TYPE___ns1__Fk_USCOREgetAllRecordByIndexDesc */
};
#endif

#ifndef SOAP_TYPE___ns1__Fk_USCOREgetColumnsName
#define SOAP_TYPE___ns1__Fk_USCOREgetColumnsName (1428)
/* Operation wrapper: */
struct __ns1__Fk_USCOREgetColumnsName
{
public:
	ns1__Fk_USCOREgetColumnsName *ns1__Fk_USCOREgetColumnsName_;	/* optional element of type ns1:Fk_getColumnsName */
public:
	int soap_type() const { return 1428; } /* = unique id SOAP_TYPE___ns1__Fk_USCOREgetColumnsName */
};
#endif

#ifndef SOAP_TYPE___ns1__Fk_USCOREgetRemoteDatabaseList
#define SOAP_TYPE___ns1__Fk_USCOREgetRemoteDatabaseList (1432)
/* Operation wrapper: */
struct __ns1__Fk_USCOREgetRemoteDatabaseList
{
public:
	ns1__Fk_USCOREgetRemoteDatabaseList *ns1__Fk_USCOREgetRemoteDatabaseList_;	/* optional element of type ns1:Fk_getRemoteDatabaseList */
public:
	int soap_type() const { return 1432; } /* = unique id SOAP_TYPE___ns1__Fk_USCOREgetRemoteDatabaseList */
};
#endif

#ifndef SOAP_TYPE___ns1__Fk_USCOREgetRemoteTableList
#define SOAP_TYPE___ns1__Fk_USCOREgetRemoteTableList (1436)
/* Operation wrapper: */
struct __ns1__Fk_USCOREgetRemoteTableList
{
public:
	ns1__Fk_USCOREgetRemoteTableList *ns1__Fk_USCOREgetRemoteTableList_;	/* optional element of type ns1:Fk_getRemoteTableList */
public:
	int soap_type() const { return 1436; } /* = unique id SOAP_TYPE___ns1__Fk_USCOREgetRemoteTableList */
};
#endif

#ifndef SOAP_TYPE___ns1__Fk_USCOREgetRemoteViewList
#define SOAP_TYPE___ns1__Fk_USCOREgetRemoteViewList (1440)
/* Operation wrapper: */
struct __ns1__Fk_USCOREgetRemoteViewList
{
public:
	ns1__Fk_USCOREgetRemoteViewList *ns1__Fk_USCOREgetRemoteViewList_;	/* optional element of type ns1:Fk_getRemoteViewList */
public:
	int soap_type() const { return 1440; } /* = unique id SOAP_TYPE___ns1__Fk_USCOREgetRemoteViewList */
};
#endif

#ifndef SOAP_TYPE___ns1__GetFieldList
#define SOAP_TYPE___ns1__GetFieldList (1444)
/* Operation wrapper: */
struct __ns1__GetFieldList
{
public:
	ns1__GetFieldList *ns1__GetFieldList_;	/* optional element of type ns1:GetFieldList */
public:
	int soap_type() const { return 1444; } /* = unique id SOAP_TYPE___ns1__GetFieldList */
};
#endif

#ifndef SOAP_TYPE___ns1__ModifyField
#define SOAP_TYPE___ns1__ModifyField (1448)
/* Operation wrapper: */
struct __ns1__ModifyField
{
public:
	ns1__ModifyField *ns1__ModifyField_;	/* optional element of type ns1:ModifyField */
public:
	int soap_type() const { return 1448; } /* = unique id SOAP_TYPE___ns1__ModifyField */
};
#endif

#ifndef SOAP_TYPE___ns1__GetAdjacentArchiBox
#define SOAP_TYPE___ns1__GetAdjacentArchiBox (1452)
/* Operation wrapper: */
struct __ns1__GetAdjacentArchiBox
{
public:
	ns1__GetAdjacentArchiBox *ns1__GetAdjacentArchiBox_;	/* optional element of type ns1:GetAdjacentArchiBox */
public:
	int soap_type() const { return 1452; } /* = unique id SOAP_TYPE___ns1__GetAdjacentArchiBox */
};
#endif

#ifndef SOAP_TYPE___ns1__GetInstanceReplication
#define SOAP_TYPE___ns1__GetInstanceReplication (1456)
/* Operation wrapper: */
struct __ns1__GetInstanceReplication
{
public:
	ns1__GetInstanceReplication *ns1__GetInstanceReplication_;	/* optional element of type ns1:GetInstanceReplication */
public:
	int soap_type() const { return 1456; } /* = unique id SOAP_TYPE___ns1__GetInstanceReplication */
};
#endif

#ifndef SOAP_TYPE___ns1__Login
#define SOAP_TYPE___ns1__Login (1460)
/* Operation wrapper: */
struct __ns1__Login
{
public:
	ns1__Login *ns1__Login_;	/* optional element of type ns1:Login */
public:
	int soap_type() const { return 1460; } /* = unique id SOAP_TYPE___ns1__Login */
};
#endif

#ifndef SOAP_TYPE___ns1__Logout
#define SOAP_TYPE___ns1__Logout (1464)
/* Operation wrapper: */
struct __ns1__Logout
{
public:
	ns1__Logout *ns1__Logout_;	/* optional element of type ns1:Logout */
public:
	int soap_type() const { return 1464; } /* = unique id SOAP_TYPE___ns1__Logout */
};
#endif

#ifndef SOAP_TYPE___ns1__InsertSchedulerTask
#define SOAP_TYPE___ns1__InsertSchedulerTask (1468)
/* Operation wrapper: */
struct __ns1__InsertSchedulerTask
{
public:
	ns1__InsertSchedulerTask *ns1__InsertSchedulerTask_;	/* optional element of type ns1:InsertSchedulerTask */
public:
	int soap_type() const { return 1468; } /* = unique id SOAP_TYPE___ns1__InsertSchedulerTask */
};
#endif

#ifndef SOAP_TYPE___ns1__GetSchedulerTasks
#define SOAP_TYPE___ns1__GetSchedulerTasks (1472)
/* Operation wrapper: */
struct __ns1__GetSchedulerTasks
{
public:
	ns1__GetSchedulerTasks *ns1__GetSchedulerTasks_;	/* optional element of type ns1:GetSchedulerTasks */
public:
	int soap_type() const { return 1472; } /* = unique id SOAP_TYPE___ns1__GetSchedulerTasks */
};
#endif

#ifndef SOAP_TYPE___ns1__DeleteSchedulerTask
#define SOAP_TYPE___ns1__DeleteSchedulerTask (1476)
/* Operation wrapper: */
struct __ns1__DeleteSchedulerTask
{
public:
	ns1__DeleteSchedulerTask *ns1__DeleteSchedulerTask_;	/* optional element of type ns1:DeleteSchedulerTask */
public:
	int soap_type() const { return 1476; } /* = unique id SOAP_TYPE___ns1__DeleteSchedulerTask */
};
#endif

#ifndef SOAP_TYPE___ns1__GetSchedulerTasksToRun
#define SOAP_TYPE___ns1__GetSchedulerTasksToRun (1480)
/* Operation wrapper: */
struct __ns1__GetSchedulerTasksToRun
{
public:
	ns1__GetSchedulerTasksToRun *ns1__GetSchedulerTasksToRun_;	/* optional element of type ns1:GetSchedulerTasksToRun */
public:
	int soap_type() const { return 1480; } /* = unique id SOAP_TYPE___ns1__GetSchedulerTasksToRun */
};
#endif

#ifndef SOAP_TYPE___ns1__SchedulerTaskScheduleProcessed
#define SOAP_TYPE___ns1__SchedulerTaskScheduleProcessed (1484)
/* Operation wrapper: */
struct __ns1__SchedulerTaskScheduleProcessed
{
public:
	ns1__SchedulerTaskScheduleProcessed *ns1__SchedulerTaskScheduleProcessed_;	/* optional element of type ns1:SchedulerTaskScheduleProcessed */
public:
	int soap_type() const { return 1484; } /* = unique id SOAP_TYPE___ns1__SchedulerTaskScheduleProcessed */
};
#endif

#ifndef SOAP_TYPE___ns1__ModifySchedulerTaskSchedule
#define SOAP_TYPE___ns1__ModifySchedulerTaskSchedule (1488)
/* Operation wrapper: */
struct __ns1__ModifySchedulerTaskSchedule
{
public:
	ns1__ModifySchedulerTaskSchedule *ns1__ModifySchedulerTaskSchedule_;	/* optional element of type ns1:ModifySchedulerTaskSchedule */
public:
	int soap_type() const { return 1488; } /* = unique id SOAP_TYPE___ns1__ModifySchedulerTaskSchedule */
};
#endif

#ifndef SOAP_TYPE___ns1__DeleteSchedulerTaskSchedule
#define SOAP_TYPE___ns1__DeleteSchedulerTaskSchedule (1492)
/* Operation wrapper: */
struct __ns1__DeleteSchedulerTaskSchedule
{
public:
	ns1__DeleteSchedulerTaskSchedule *ns1__DeleteSchedulerTaskSchedule_;	/* optional element of type ns1:DeleteSchedulerTaskSchedule */
public:
	int soap_type() const { return 1492; } /* = unique id SOAP_TYPE___ns1__DeleteSchedulerTaskSchedule */
};
#endif

#ifndef SOAP_TYPE___ns1__ChangeSchedulerTaskScheduleStatus
#define SOAP_TYPE___ns1__ChangeSchedulerTaskScheduleStatus (1496)
/* Operation wrapper: */
struct __ns1__ChangeSchedulerTaskScheduleStatus
{
public:
	ns1__ChangeSchedulerTaskScheduleStatus *ns1__ChangeSchedulerTaskScheduleStatus_;	/* optional element of type ns1:ChangeSchedulerTaskScheduleStatus */
public:
	int soap_type() const { return 1496; } /* = unique id SOAP_TYPE___ns1__ChangeSchedulerTaskScheduleStatus */
};
#endif

#ifndef SOAP_TYPE___ns1__GetFieldProperties
#define SOAP_TYPE___ns1__GetFieldProperties (1500)
/* Operation wrapper: */
struct __ns1__GetFieldProperties
{
public:
	ns1__GetFieldProperties *ns1__GetFieldProperties_;	/* optional element of type ns1:GetFieldProperties */
public:
	int soap_type() const { return 1500; } /* = unique id SOAP_TYPE___ns1__GetFieldProperties */
};
#endif

#ifndef SOAP_TYPE___ns1__GetFieldsPropertiesFromTemplate
#define SOAP_TYPE___ns1__GetFieldsPropertiesFromTemplate (1504)
/* Operation wrapper: */
struct __ns1__GetFieldsPropertiesFromTemplate
{
public:
	ns1__GetFieldsPropertiesFromTemplate *ns1__GetFieldsPropertiesFromTemplate_;	/* optional element of type ns1:GetFieldsPropertiesFromTemplate */
public:
	int soap_type() const { return 1504; } /* = unique id SOAP_TYPE___ns1__GetFieldsPropertiesFromTemplate */
};
#endif

#ifndef SOAP_TYPE___ns1__DeleteField
#define SOAP_TYPE___ns1__DeleteField (1508)
/* Operation wrapper: */
struct __ns1__DeleteField
{
public:
	ns1__DeleteField *ns1__DeleteField_;	/* optional element of type ns1:DeleteField */
public:
	int soap_type() const { return 1508; } /* = unique id SOAP_TYPE___ns1__DeleteField */
};
#endif

#ifndef SOAP_TYPE___ns1__CreateField
#define SOAP_TYPE___ns1__CreateField (1512)
/* Operation wrapper: */
struct __ns1__CreateField
{
public:
	ns1__CreateField *ns1__CreateField_;	/* optional element of type ns1:CreateField */
public:
	int soap_type() const { return 1512; } /* = unique id SOAP_TYPE___ns1__CreateField */
};
#endif

#ifndef SOAP_TYPE___ns1__canModifyField
#define SOAP_TYPE___ns1__canModifyField (1516)
/* Operation wrapper: */
struct __ns1__canModifyField
{
public:
	ns1__canModifyField *ns1__canModifyField_;	/* optional element of type ns1:canModifyField */
public:
	int soap_type() const { return 1516; } /* = unique id SOAP_TYPE___ns1__canModifyField */
};
#endif

#ifndef SOAP_TYPE___ns1__canDeleteField
#define SOAP_TYPE___ns1__canDeleteField (1520)
/* Operation wrapper: */
struct __ns1__canDeleteField
{
public:
	ns1__canDeleteField *ns1__canDeleteField_;	/* optional element of type ns1:canDeleteField */
public:
	int soap_type() const { return 1520; } /* = unique id SOAP_TYPE___ns1__canDeleteField */
};
#endif

#ifndef SOAP_TYPE___ns1__canCreateField
#define SOAP_TYPE___ns1__canCreateField (1524)
/* Operation wrapper: */
struct __ns1__canCreateField
{
public:
	ns1__canCreateField *ns1__canCreateField_;	/* optional element of type ns1:canCreateField */
public:
	int soap_type() const { return 1524; } /* = unique id SOAP_TYPE___ns1__canCreateField */
};
#endif

#ifndef SOAP_TYPE___ns1__CanDeleteLinkFromContainer
#define SOAP_TYPE___ns1__CanDeleteLinkFromContainer (1528)
/* Operation wrapper: */
struct __ns1__CanDeleteLinkFromContainer
{
public:
	ns1__CanDeleteLinkFromContainer *ns1__CanDeleteLinkFromContainer_;	/* optional element of type ns1:CanDeleteLinkFromContainer */
public:
	int soap_type() const { return 1528; } /* = unique id SOAP_TYPE___ns1__CanDeleteLinkFromContainer */
};
#endif

#ifndef SOAP_TYPE___ns1__GetDomainList
#define SOAP_TYPE___ns1__GetDomainList (1532)
/* Operation wrapper: */
struct __ns1__GetDomainList
{
public:
	ns1__GetDomainList *ns1__GetDomainList_;	/* optional element of type ns1:GetDomainList */
public:
	int soap_type() const { return 1532; } /* = unique id SOAP_TYPE___ns1__GetDomainList */
};
#endif

#ifndef SOAP_TYPE___ns1__InsertLinkContainerToContainer
#define SOAP_TYPE___ns1__InsertLinkContainerToContainer (1536)
/* Operation wrapper: */
struct __ns1__InsertLinkContainerToContainer
{
public:
	ns1__InsertLinkContainerToContainer *ns1__InsertLinkContainerToContainer_;	/* optional element of type ns1:InsertLinkContainerToContainer */
public:
	int soap_type() const { return 1536; } /* = unique id SOAP_TYPE___ns1__InsertLinkContainerToContainer */
};
#endif

#ifndef SOAP_TYPE___ns1__CanInsertLinkContainerToContainer
#define SOAP_TYPE___ns1__CanInsertLinkContainerToContainer (1540)
/* Operation wrapper: */
struct __ns1__CanInsertLinkContainerToContainer
{
public:
	ns1__CanInsertLinkContainerToContainer *ns1__CanInsertLinkContainerToContainer_;	/* optional element of type ns1:CanInsertLinkContainerToContainer */
public:
	int soap_type() const { return 1540; } /* = unique id SOAP_TYPE___ns1__CanInsertLinkContainerToContainer */
};
#endif

#ifndef SOAP_TYPE___ns1__InsertLinkContainerToDocument
#define SOAP_TYPE___ns1__InsertLinkContainerToDocument (1544)
/* Operation wrapper: */
struct __ns1__InsertLinkContainerToDocument
{
public:
	ns1__InsertLinkContainerToDocument *ns1__InsertLinkContainerToDocument_;	/* optional element of type ns1:InsertLinkContainerToDocument */
public:
	int soap_type() const { return 1544; } /* = unique id SOAP_TYPE___ns1__InsertLinkContainerToDocument */
};
#endif

#ifndef SOAP_TYPE___ns1__CanInsertLinkContainerToDocument
#define SOAP_TYPE___ns1__CanInsertLinkContainerToDocument (1548)
/* Operation wrapper: */
struct __ns1__CanInsertLinkContainerToDocument
{
public:
	ns1__CanInsertLinkContainerToDocument *ns1__CanInsertLinkContainerToDocument_;	/* optional element of type ns1:CanInsertLinkContainerToDocument */
public:
	int soap_type() const { return 1548; } /* = unique id SOAP_TYPE___ns1__CanInsertLinkContainerToDocument */
};
#endif

#ifndef SOAP_TYPE___ns1__InsertLinkDocumentToDocument
#define SOAP_TYPE___ns1__InsertLinkDocumentToDocument (1552)
/* Operation wrapper: */
struct __ns1__InsertLinkDocumentToDocument
{
public:
	ns1__InsertLinkDocumentToDocument *ns1__InsertLinkDocumentToDocument_;	/* optional element of type ns1:InsertLinkDocumentToDocument */
public:
	int soap_type() const { return 1552; } /* = unique id SOAP_TYPE___ns1__InsertLinkDocumentToDocument */
};
#endif

#ifndef SOAP_TYPE___ns1__CanInsertLinkDocumentToDocument
#define SOAP_TYPE___ns1__CanInsertLinkDocumentToDocument (1556)
/* Operation wrapper: */
struct __ns1__CanInsertLinkDocumentToDocument
{
public:
	ns1__CanInsertLinkDocumentToDocument *ns1__CanInsertLinkDocumentToDocument_;	/* optional element of type ns1:CanInsertLinkDocumentToDocument */
public:
	int soap_type() const { return 1556; } /* = unique id SOAP_TYPE___ns1__CanInsertLinkDocumentToDocument */
};
#endif

#ifndef SOAP_TYPE___ns1__ModifyLinkContainerToContainer
#define SOAP_TYPE___ns1__ModifyLinkContainerToContainer (1560)
/* Operation wrapper: */
struct __ns1__ModifyLinkContainerToContainer
{
public:
	ns1__ModifyLinkContainerToContainer *ns1__ModifyLinkContainerToContainer_;	/* optional element of type ns1:ModifyLinkContainerToContainer */
public:
	int soap_type() const { return 1560; } /* = unique id SOAP_TYPE___ns1__ModifyLinkContainerToContainer */
};
#endif

#ifndef SOAP_TYPE___ns1__CanModifyLinkContainerToContainer
#define SOAP_TYPE___ns1__CanModifyLinkContainerToContainer (1564)
/* Operation wrapper: */
struct __ns1__CanModifyLinkContainerToContainer
{
public:
	ns1__CanModifyLinkContainerToContainer *ns1__CanModifyLinkContainerToContainer_;	/* optional element of type ns1:CanModifyLinkContainerToContainer */
public:
	int soap_type() const { return 1564; } /* = unique id SOAP_TYPE___ns1__CanModifyLinkContainerToContainer */
};
#endif

#ifndef SOAP_TYPE___ns1__ModifyLinkContainerToDocument
#define SOAP_TYPE___ns1__ModifyLinkContainerToDocument (1568)
/* Operation wrapper: */
struct __ns1__ModifyLinkContainerToDocument
{
public:
	ns1__ModifyLinkContainerToDocument *ns1__ModifyLinkContainerToDocument_;	/* optional element of type ns1:ModifyLinkContainerToDocument */
public:
	int soap_type() const { return 1568; } /* = unique id SOAP_TYPE___ns1__ModifyLinkContainerToDocument */
};
#endif

#ifndef SOAP_TYPE___ns1__CanModifyLinkContainerToDocument
#define SOAP_TYPE___ns1__CanModifyLinkContainerToDocument (1572)
/* Operation wrapper: */
struct __ns1__CanModifyLinkContainerToDocument
{
public:
	ns1__CanModifyLinkContainerToDocument *ns1__CanModifyLinkContainerToDocument_;	/* optional element of type ns1:CanModifyLinkContainerToDocument */
public:
	int soap_type() const { return 1572; } /* = unique id SOAP_TYPE___ns1__CanModifyLinkContainerToDocument */
};
#endif

#ifndef SOAP_TYPE___ns1__DeleteLink
#define SOAP_TYPE___ns1__DeleteLink (1576)
/* Operation wrapper: */
struct __ns1__DeleteLink
{
public:
	ns1__DeleteLink *ns1__DeleteLink_;	/* optional element of type ns1:DeleteLink */
public:
	int soap_type() const { return 1576; } /* = unique id SOAP_TYPE___ns1__DeleteLink */
};
#endif

#ifndef SOAP_TYPE___ns1__GetDocumentLinks
#define SOAP_TYPE___ns1__GetDocumentLinks (1580)
/* Operation wrapper: */
struct __ns1__GetDocumentLinks
{
public:
	ns1__GetDocumentLinks *ns1__GetDocumentLinks_;	/* optional element of type ns1:GetDocumentLinks */
public:
	int soap_type() const { return 1580; } /* = unique id SOAP_TYPE___ns1__GetDocumentLinks */
};
#endif

#ifndef SOAP_TYPE___ns1__GetCountLinksToDocument
#define SOAP_TYPE___ns1__GetCountLinksToDocument (1584)
/* Operation wrapper: */
struct __ns1__GetCountLinksToDocument
{
public:
	ns1__GetCountLinksToDocument *ns1__GetCountLinksToDocument_;	/* optional element of type ns1:GetCountLinksToDocument */
public:
	int soap_type() const { return 1584; } /* = unique id SOAP_TYPE___ns1__GetCountLinksToDocument */
};
#endif

#ifndef SOAP_TYPE___ns1__GetLinksToDocument
#define SOAP_TYPE___ns1__GetLinksToDocument (1588)
/* Operation wrapper: */
struct __ns1__GetLinksToDocument
{
public:
	ns1__GetLinksToDocument *ns1__GetLinksToDocument_;	/* optional element of type ns1:GetLinksToDocument */
public:
	int soap_type() const { return 1588; } /* = unique id SOAP_TYPE___ns1__GetLinksToDocument */
};
#endif

#ifndef SOAP_TYPE___ns1__GetInstanceNameFromLinks
#define SOAP_TYPE___ns1__GetInstanceNameFromLinks (1592)
/* Operation wrapper: */
struct __ns1__GetInstanceNameFromLinks
{
public:
	ns1__GetInstanceNameFromLinks *ns1__GetInstanceNameFromLinks_;	/* optional element of type ns1:GetInstanceNameFromLinks */
public:
	int soap_type() const { return 1592; } /* = unique id SOAP_TYPE___ns1__GetInstanceNameFromLinks */
};
#endif

#ifndef SOAP_TYPE___ns1__GetContainerLinks
#define SOAP_TYPE___ns1__GetContainerLinks (1596)
/* Operation wrapper: */
struct __ns1__GetContainerLinks
{
public:
	ns1__GetContainerLinks *ns1__GetContainerLinks_;	/* optional element of type ns1:GetContainerLinks */
public:
	int soap_type() const { return 1596; } /* = unique id SOAP_TYPE___ns1__GetContainerLinks */
};
#endif

#ifndef SOAP_TYPE___ns1__RegenerateDynOrg
#define SOAP_TYPE___ns1__RegenerateDynOrg (1600)
/* Operation wrapper: */
struct __ns1__RegenerateDynOrg
{
public:
	ns1__RegenerateDynOrg *ns1__RegenerateDynOrg_;	/* optional element of type ns1:RegenerateDynOrg */
public:
	int soap_type() const { return 1600; } /* = unique id SOAP_TYPE___ns1__RegenerateDynOrg */
};
#endif

#ifndef SOAP_TYPE___ns1__GetDynorgTypeList
#define SOAP_TYPE___ns1__GetDynorgTypeList (1604)
/* Operation wrapper: */
struct __ns1__GetDynorgTypeList
{
public:
	ns1__GetDynorgTypeList *ns1__GetDynorgTypeList_;	/* optional element of type ns1:GetDynorgTypeList */
public:
	int soap_type() const { return 1604; } /* = unique id SOAP_TYPE___ns1__GetDynorgTypeList */
};
#endif

#ifndef SOAP_TYPE___ns1__canModifyDynorg
#define SOAP_TYPE___ns1__canModifyDynorg (1608)
/* Operation wrapper: */
struct __ns1__canModifyDynorg
{
public:
	ns1__canModifyDynorg *ns1__canModifyDynorg_;	/* optional element of type ns1:canModifyDynorg */
public:
	int soap_type() const { return 1608; } /* = unique id SOAP_TYPE___ns1__canModifyDynorg */
};
#endif

#ifndef SOAP_TYPE___ns1__canDeleteDynorg
#define SOAP_TYPE___ns1__canDeleteDynorg (1612)
/* Operation wrapper: */
struct __ns1__canDeleteDynorg
{
public:
	ns1__canDeleteDynorg *ns1__canDeleteDynorg_;	/* optional element of type ns1:canDeleteDynorg */
public:
	int soap_type() const { return 1612; } /* = unique id SOAP_TYPE___ns1__canDeleteDynorg */
};
#endif

#ifndef SOAP_TYPE___ns1__canCreateDynorg
#define SOAP_TYPE___ns1__canCreateDynorg (1616)
/* Operation wrapper: */
struct __ns1__canCreateDynorg
{
public:
	ns1__canCreateDynorg *ns1__canCreateDynorg_;	/* optional element of type ns1:canCreateDynorg */
public:
	int soap_type() const { return 1616; } /* = unique id SOAP_TYPE___ns1__canCreateDynorg */
};
#endif

#ifndef SOAP_TYPE___ns1__GetClasseDocumentale
#define SOAP_TYPE___ns1__GetClasseDocumentale (1620)
/* Operation wrapper: */
struct __ns1__GetClasseDocumentale
{
public:
	ns1__GetClasseDocumentale *ns1__GetClasseDocumentale_;	/* optional element of type ns1:GetClasseDocumentale */
public:
	int soap_type() const { return 1620; } /* = unique id SOAP_TYPE___ns1__GetClasseDocumentale */
};
#endif

#ifndef SOAP_TYPE___ns1__DeleteClasseDocumentale
#define SOAP_TYPE___ns1__DeleteClasseDocumentale (1624)
/* Operation wrapper: */
struct __ns1__DeleteClasseDocumentale
{
public:
	ns1__DeleteClasseDocumentale *ns1__DeleteClasseDocumentale_;	/* optional element of type ns1:DeleteClasseDocumentale */
public:
	int soap_type() const { return 1624; } /* = unique id SOAP_TYPE___ns1__DeleteClasseDocumentale */
};
#endif

#ifndef SOAP_TYPE___ns1__InsertClasseDocumentale
#define SOAP_TYPE___ns1__InsertClasseDocumentale (1628)
/* Operation wrapper: */
struct __ns1__InsertClasseDocumentale
{
public:
	ns1__InsertClasseDocumentale *ns1__InsertClasseDocumentale_;	/* optional element of type ns1:InsertClasseDocumentale */
public:
	int soap_type() const { return 1628; } /* = unique id SOAP_TYPE___ns1__InsertClasseDocumentale */
};
#endif

#ifndef SOAP_TYPE___ns1__GetQueryParam
#define SOAP_TYPE___ns1__GetQueryParam (1632)
/* Operation wrapper: */
struct __ns1__GetQueryParam
{
public:
	ns1__GetQueryParam *ns1__GetQueryParam_;	/* optional element of type ns1:GetQueryParam */
public:
	int soap_type() const { return 1632; } /* = unique id SOAP_TYPE___ns1__GetQueryParam */
};
#endif

#ifndef SOAP_TYPE___ns1__QueryHeader
#define SOAP_TYPE___ns1__QueryHeader (1636)
/* Operation wrapper: */
struct __ns1__QueryHeader
{
public:
	ns1__QueryHeader *ns1__QueryHeader_;	/* optional element of type ns1:QueryHeader */
public:
	int soap_type() const { return 1636; } /* = unique id SOAP_TYPE___ns1__QueryHeader */
};
#endif

#ifndef SOAP_TYPE___ns1__QueryTotAttach
#define SOAP_TYPE___ns1__QueryTotAttach (1640)
/* Operation wrapper: */
struct __ns1__QueryTotAttach
{
public:
	ns1__QueryTotAttach *ns1__QueryTotAttach_;	/* optional element of type ns1:QueryTotAttach */
public:
	int soap_type() const { return 1640; } /* = unique id SOAP_TYPE___ns1__QueryTotAttach */
};
#endif

#ifndef SOAP_TYPE___ns1__GetInstanceId
#define SOAP_TYPE___ns1__GetInstanceId (1644)
/* Operation wrapper: */
struct __ns1__GetInstanceId
{
public:
	ns1__GetInstanceId *ns1__GetInstanceId_;	/* optional element of type ns1:GetInstanceId */
public:
	int soap_type() const { return 1644; } /* = unique id SOAP_TYPE___ns1__GetInstanceId */
};
#endif

#ifndef SOAP_TYPE___ns1__GetTemplateProperties
#define SOAP_TYPE___ns1__GetTemplateProperties (1648)
/* Operation wrapper: */
struct __ns1__GetTemplateProperties
{
public:
	ns1__GetTemplateProperties *ns1__GetTemplateProperties_;	/* optional element of type ns1:GetTemplateProperties */
public:
	int soap_type() const { return 1648; } /* = unique id SOAP_TYPE___ns1__GetTemplateProperties */
};
#endif

#ifndef SOAP_TYPE___ns1__DeleteFilter
#define SOAP_TYPE___ns1__DeleteFilter (1652)
/* Operation wrapper: */
struct __ns1__DeleteFilter
{
public:
	ns1__DeleteFilter *ns1__DeleteFilter_;	/* optional element of type ns1:DeleteFilter */
public:
	int soap_type() const { return 1652; } /* = unique id SOAP_TYPE___ns1__DeleteFilter */
};
#endif

#ifndef SOAP_TYPE___ns1__ModifyFilter
#define SOAP_TYPE___ns1__ModifyFilter (1656)
/* Operation wrapper: */
struct __ns1__ModifyFilter
{
public:
	ns1__ModifyFilter *ns1__ModifyFilter_;	/* optional element of type ns1:ModifyFilter */
public:
	int soap_type() const { return 1656; } /* = unique id SOAP_TYPE___ns1__ModifyFilter */
};
#endif

#ifndef SOAP_TYPE___ns1__InsertFilter
#define SOAP_TYPE___ns1__InsertFilter (1660)
/* Operation wrapper: */
struct __ns1__InsertFilter
{
public:
	ns1__InsertFilter *ns1__InsertFilter_;	/* optional element of type ns1:InsertFilter */
public:
	int soap_type() const { return 1660; } /* = unique id SOAP_TYPE___ns1__InsertFilter */
};
#endif

#ifndef SOAP_TYPE___ns1__GetArchSostRules
#define SOAP_TYPE___ns1__GetArchSostRules (1664)
/* Operation wrapper: */
struct __ns1__GetArchSostRules
{
public:
	ns1__GetArchSostRules *ns1__GetArchSostRules_;	/* optional element of type ns1:GetArchSostRules */
public:
	int soap_type() const { return 1664; } /* = unique id SOAP_TYPE___ns1__GetArchSostRules */
};
#endif

#ifndef SOAP_TYPE___ns1__InsertArchSostRule
#define SOAP_TYPE___ns1__InsertArchSostRule (1668)
/* Operation wrapper: */
struct __ns1__InsertArchSostRule
{
public:
	ns1__InsertArchSostRule *ns1__InsertArchSostRule_;	/* optional element of type ns1:InsertArchSostRule */
public:
	int soap_type() const { return 1668; } /* = unique id SOAP_TYPE___ns1__InsertArchSostRule */
};
#endif

#ifndef SOAP_TYPE___ns1__DeleteArchSostRule
#define SOAP_TYPE___ns1__DeleteArchSostRule (1672)
/* Operation wrapper: */
struct __ns1__DeleteArchSostRule
{
public:
	ns1__DeleteArchSostRule *ns1__DeleteArchSostRule_;	/* optional element of type ns1:DeleteArchSostRule */
public:
	int soap_type() const { return 1672; } /* = unique id SOAP_TYPE___ns1__DeleteArchSostRule */
};
#endif

#ifndef SOAP_TYPE___ns1__ModifyArchSostRule
#define SOAP_TYPE___ns1__ModifyArchSostRule (1676)
/* Operation wrapper: */
struct __ns1__ModifyArchSostRule
{
public:
	ns1__ModifyArchSostRule *ns1__ModifyArchSostRule_;	/* optional element of type ns1:ModifyArchSostRule */
public:
	int soap_type() const { return 1676; } /* = unique id SOAP_TYPE___ns1__ModifyArchSostRule */
};
#endif

#ifndef SOAP_TYPE___ns1__DestroyContainer
#define SOAP_TYPE___ns1__DestroyContainer (1680)
/* Operation wrapper: */
struct __ns1__DestroyContainer
{
public:
	ns1__DestroyContainer *ns1__DestroyContainer_;	/* optional element of type ns1:DestroyContainer */
public:
	int soap_type() const { return 1680; } /* = unique id SOAP_TYPE___ns1__DestroyContainer */
};
#endif

#ifndef SOAP_TYPE___ns1__GetRootId
#define SOAP_TYPE___ns1__GetRootId (1684)
/* Operation wrapper: */
struct __ns1__GetRootId
{
public:
	ns1__GetRootId *ns1__GetRootId_;	/* optional element of type ns1:GetRootId */
public:
	int soap_type() const { return 1684; } /* = unique id SOAP_TYPE___ns1__GetRootId */
};
#endif

#ifndef SOAP_TYPE___ns1__GetInstancePathname
#define SOAP_TYPE___ns1__GetInstancePathname (1688)
/* Operation wrapper: */
struct __ns1__GetInstancePathname
{
public:
	ns1__GetInstancePathname *ns1__GetInstancePathname_;	/* optional element of type ns1:GetInstancePathname */
public:
	int soap_type() const { return 1688; } /* = unique id SOAP_TYPE___ns1__GetInstancePathname */
};
#endif

#ifndef SOAP_TYPE___ns1__GetObject
#define SOAP_TYPE___ns1__GetObject (1692)
/* Operation wrapper: */
struct __ns1__GetObject
{
public:
	ns1__GetObject *ns1__GetObject_;	/* optional element of type ns1:GetObject */
public:
	int soap_type() const { return 1692; } /* = unique id SOAP_TYPE___ns1__GetObject */
};
#endif

#ifndef SOAP_TYPE___ns1__GetAllObjectWithSystem
#define SOAP_TYPE___ns1__GetAllObjectWithSystem (1696)
/* Operation wrapper: */
struct __ns1__GetAllObjectWithSystem
{
public:
	ns1__GetAllObjectWithSystem *ns1__GetAllObjectWithSystem_;	/* optional element of type ns1:GetAllObjectWithSystem */
public:
	int soap_type() const { return 1696; } /* = unique id SOAP_TYPE___ns1__GetAllObjectWithSystem */
};
#endif

#ifndef SOAP_TYPE___ns1__GetMethod
#define SOAP_TYPE___ns1__GetMethod (1700)
/* Operation wrapper: */
struct __ns1__GetMethod
{
public:
	ns1__GetMethod *ns1__GetMethod_;	/* optional element of type ns1:GetMethod */
public:
	int soap_type() const { return 1700; } /* = unique id SOAP_TYPE___ns1__GetMethod */
};
#endif

#ifndef SOAP_TYPE___ns1__FullTreePathName
#define SOAP_TYPE___ns1__FullTreePathName (1704)
/* Operation wrapper: */
struct __ns1__FullTreePathName
{
public:
	ns1__FullTreePathName *ns1__FullTreePathName_;	/* optional element of type ns1:FullTreePathName */
public:
	int soap_type() const { return 1704; } /* = unique id SOAP_TYPE___ns1__FullTreePathName */
};
#endif

#ifndef SOAP_TYPE___ns1__GetTreeForSecurity
#define SOAP_TYPE___ns1__GetTreeForSecurity (1708)
/* Operation wrapper: */
struct __ns1__GetTreeForSecurity
{
public:
	ns1__GetTreeForSecurity *ns1__GetTreeForSecurity_;	/* optional element of type ns1:GetTreeForSecurity */
public:
	int soap_type() const { return 1708; } /* = unique id SOAP_TYPE___ns1__GetTreeForSecurity */
};
#endif

#ifndef SOAP_TYPE___ns1__GetTree
#define SOAP_TYPE___ns1__GetTree (1712)
/* Operation wrapper: */
struct __ns1__GetTree
{
public:
	ns1__GetTree *ns1__GetTree_;	/* optional element of type ns1:GetTree */
public:
	int soap_type() const { return 1712; } /* = unique id SOAP_TYPE___ns1__GetTree */
};
#endif

#ifndef SOAP_TYPE___ns1__CreateRaccoglitore
#define SOAP_TYPE___ns1__CreateRaccoglitore (1716)
/* Operation wrapper: */
struct __ns1__CreateRaccoglitore
{
public:
	ns1__CreateRaccoglitore *ns1__CreateRaccoglitore_;	/* optional element of type ns1:CreateRaccoglitore */
public:
	int soap_type() const { return 1716; } /* = unique id SOAP_TYPE___ns1__CreateRaccoglitore */
};
#endif

#ifndef SOAP_TYPE___ns1__DeleteRaccoglitore
#define SOAP_TYPE___ns1__DeleteRaccoglitore (1720)
/* Operation wrapper: */
struct __ns1__DeleteRaccoglitore
{
public:
	ns1__DeleteRaccoglitore *ns1__DeleteRaccoglitore_;	/* optional element of type ns1:DeleteRaccoglitore */
public:
	int soap_type() const { return 1720; } /* = unique id SOAP_TYPE___ns1__DeleteRaccoglitore */
};
#endif

#ifndef SOAP_TYPE___ns1__DestroyRaccoglitore
#define SOAP_TYPE___ns1__DestroyRaccoglitore (1724)
/* Operation wrapper: */
struct __ns1__DestroyRaccoglitore
{
public:
	ns1__DestroyRaccoglitore *ns1__DestroyRaccoglitore_;	/* optional element of type ns1:DestroyRaccoglitore */
public:
	int soap_type() const { return 1724; } /* = unique id SOAP_TYPE___ns1__DestroyRaccoglitore */
};
#endif

#ifndef SOAP_TYPE___ns1__ModifyRaccoglitore
#define SOAP_TYPE___ns1__ModifyRaccoglitore (1728)
/* Operation wrapper: */
struct __ns1__ModifyRaccoglitore
{
public:
	ns1__ModifyRaccoglitore *ns1__ModifyRaccoglitore_;	/* optional element of type ns1:ModifyRaccoglitore */
public:
	int soap_type() const { return 1728; } /* = unique id SOAP_TYPE___ns1__ModifyRaccoglitore */
};
#endif

#ifndef SOAP_TYPE___ns1__canCreateRaccoglitore
#define SOAP_TYPE___ns1__canCreateRaccoglitore (1732)
/* Operation wrapper: */
struct __ns1__canCreateRaccoglitore
{
public:
	ns1__canCreateRaccoglitore *ns1__canCreateRaccoglitore_;	/* optional element of type ns1:canCreateRaccoglitore */
public:
	int soap_type() const { return 1732; } /* = unique id SOAP_TYPE___ns1__canCreateRaccoglitore */
};
#endif

#ifndef SOAP_TYPE___ns1__canDeleteRaccoglitore
#define SOAP_TYPE___ns1__canDeleteRaccoglitore (1736)
/* Operation wrapper: */
struct __ns1__canDeleteRaccoglitore
{
public:
	ns1__canDeleteRaccoglitore *ns1__canDeleteRaccoglitore_;	/* optional element of type ns1:canDeleteRaccoglitore */
public:
	int soap_type() const { return 1736; } /* = unique id SOAP_TYPE___ns1__canDeleteRaccoglitore */
};
#endif

#ifndef SOAP_TYPE___ns1__canModifyRaccoglitore
#define SOAP_TYPE___ns1__canModifyRaccoglitore (1740)
/* Operation wrapper: */
struct __ns1__canModifyRaccoglitore
{
public:
	ns1__canModifyRaccoglitore *ns1__canModifyRaccoglitore_;	/* optional element of type ns1:canModifyRaccoglitore */
public:
	int soap_type() const { return 1740; } /* = unique id SOAP_TYPE___ns1__canModifyRaccoglitore */
};
#endif

#ifndef SOAP_TYPE___ns1__GetTemplateList
#define SOAP_TYPE___ns1__GetTemplateList (1744)
/* Operation wrapper: */
struct __ns1__GetTemplateList
{
public:
	ns1__GetTemplateList *ns1__GetTemplateList_;	/* optional element of type ns1:GetTemplateList */
public:
	int soap_type() const { return 1744; } /* = unique id SOAP_TYPE___ns1__GetTemplateList */
};
#endif

#ifndef SOAP_TYPE___ns1__GetLinksToDocumentFiltered
#define SOAP_TYPE___ns1__GetLinksToDocumentFiltered (1748)
/* Operation wrapper: */
struct __ns1__GetLinksToDocumentFiltered
{
public:
	ns1__GetLinksToDocumentFiltered *ns1__GetLinksToDocumentFiltered_;	/* optional element of type ns1:GetLinksToDocumentFiltered */
public:
	int soap_type() const { return 1748; } /* = unique id SOAP_TYPE___ns1__GetLinksToDocumentFiltered */
};
#endif

#ifndef SOAP_TYPE___ns1__CheckIn_USCOREattach
#define SOAP_TYPE___ns1__CheckIn_USCOREattach (1752)
/* Operation wrapper: */
struct __ns1__CheckIn_USCOREattach
{
public:
	ns1__CheckIn_USCOREattach *ns1__CheckIn_USCOREattach_;	/* optional element of type ns1:CheckIn_attach */
public:
	int soap_type() const { return 1752; } /* = unique id SOAP_TYPE___ns1__CheckIn_USCOREattach */
};
#endif

#ifndef SOAP_TYPE___ns1__CheckIn_USCOREattachContainer
#define SOAP_TYPE___ns1__CheckIn_USCOREattachContainer (1756)
/* Operation wrapper: */
struct __ns1__CheckIn_USCOREattachContainer
{
public:
	ns1__CheckIn_USCOREattachContainer *ns1__CheckIn_USCOREattachContainer_;	/* optional element of type ns1:CheckIn_attachContainer */
public:
	int soap_type() const { return 1756; } /* = unique id SOAP_TYPE___ns1__CheckIn_USCOREattachContainer */
};
#endif

#ifndef SOAP_TYPE___ns1__CheckIn_USCOREdocument
#define SOAP_TYPE___ns1__CheckIn_USCOREdocument (1760)
/* Operation wrapper: */
struct __ns1__CheckIn_USCOREdocument
{
public:
	ns1__CheckIn_USCOREdocument *ns1__CheckIn_USCOREdocument_;	/* optional element of type ns1:CheckIn_document */
public:
	int soap_type() const { return 1760; } /* = unique id SOAP_TYPE___ns1__CheckIn_USCOREdocument */
};
#endif

#ifndef SOAP_TYPE___ns1__CheckOut_USCOREattach
#define SOAP_TYPE___ns1__CheckOut_USCOREattach (1764)
/* Operation wrapper: */
struct __ns1__CheckOut_USCOREattach
{
public:
	ns1__CheckOut_USCOREattach *ns1__CheckOut_USCOREattach_;	/* optional element of type ns1:CheckOut_attach */
public:
	int soap_type() const { return 1764; } /* = unique id SOAP_TYPE___ns1__CheckOut_USCOREattach */
};
#endif

#ifndef SOAP_TYPE___ns1__CheckOut_USCOREattachContainer
#define SOAP_TYPE___ns1__CheckOut_USCOREattachContainer (1768)
/* Operation wrapper: */
struct __ns1__CheckOut_USCOREattachContainer
{
public:
	ns1__CheckOut_USCOREattachContainer *ns1__CheckOut_USCOREattachContainer_;	/* optional element of type ns1:CheckOut_attachContainer */
public:
	int soap_type() const { return 1768; } /* = unique id SOAP_TYPE___ns1__CheckOut_USCOREattachContainer */
};
#endif

#ifndef SOAP_TYPE___ns1__CheckOut_USCOREdocument
#define SOAP_TYPE___ns1__CheckOut_USCOREdocument (1772)
/* Operation wrapper: */
struct __ns1__CheckOut_USCOREdocument
{
public:
	ns1__CheckOut_USCOREdocument *ns1__CheckOut_USCOREdocument_;	/* optional element of type ns1:CheckOut_document */
public:
	int soap_type() const { return 1772; } /* = unique id SOAP_TYPE___ns1__CheckOut_USCOREdocument */
};
#endif

#ifndef SOAP_TYPE___ns1__Combo_USCOREinsert
#define SOAP_TYPE___ns1__Combo_USCOREinsert (1776)
/* Operation wrapper: */
struct __ns1__Combo_USCOREinsert
{
public:
	ns1__Combo_USCOREinsert *ns1__Combo_USCOREinsert_;	/* optional element of type ns1:Combo_insert */
public:
	int soap_type() const { return 1776; } /* = unique id SOAP_TYPE___ns1__Combo_USCOREinsert */
};
#endif

#ifndef SOAP_TYPE___ns1__Combo_USCOREremoveItem
#define SOAP_TYPE___ns1__Combo_USCOREremoveItem (1780)
/* Operation wrapper: */
struct __ns1__Combo_USCOREremoveItem
{
public:
	ns1__Combo_USCOREremoveItem *ns1__Combo_USCOREremoveItem_;	/* optional element of type ns1:Combo_removeItem */
public:
	int soap_type() const { return 1780; } /* = unique id SOAP_TYPE___ns1__Combo_USCOREremoveItem */
};
#endif

#ifndef SOAP_TYPE___ns1__Combo_USCOREremoveAll
#define SOAP_TYPE___ns1__Combo_USCOREremoveAll (1784)
/* Operation wrapper: */
struct __ns1__Combo_USCOREremoveAll
{
public:
	ns1__Combo_USCOREremoveAll *ns1__Combo_USCOREremoveAll_;	/* optional element of type ns1:Combo_removeAll */
public:
	int soap_type() const { return 1784; } /* = unique id SOAP_TYPE___ns1__Combo_USCOREremoveAll */
};
#endif

#ifndef SOAP_TYPE___ns1__Combo_USCOREgetAll
#define SOAP_TYPE___ns1__Combo_USCOREgetAll (1788)
/* Operation wrapper: */
struct __ns1__Combo_USCOREgetAll
{
public:
	ns1__Combo_USCOREgetAll *ns1__Combo_USCOREgetAll_;	/* optional element of type ns1:Combo_getAll */
public:
	int soap_type() const { return 1788; } /* = unique id SOAP_TYPE___ns1__Combo_USCOREgetAll */
};
#endif

#ifndef SOAP_TYPE___ns1__Combo_USCOREisCombo
#define SOAP_TYPE___ns1__Combo_USCOREisCombo (1792)
/* Operation wrapper: */
struct __ns1__Combo_USCOREisCombo
{
public:
	ns1__Combo_USCOREisCombo *ns1__Combo_USCOREisCombo_;	/* optional element of type ns1:Combo_isCombo */
public:
	int soap_type() const { return 1792; } /* = unique id SOAP_TYPE___ns1__Combo_USCOREisCombo */
};
#endif

#ifndef SOAP_TYPE___ns1__Combo_USCOREmodify
#define SOAP_TYPE___ns1__Combo_USCOREmodify (1796)
/* Operation wrapper: */
struct __ns1__Combo_USCOREmodify
{
public:
	ns1__Combo_USCOREmodify *ns1__Combo_USCOREmodify_;	/* optional element of type ns1:Combo_modify */
public:
	int soap_type() const { return 1796; } /* = unique id SOAP_TYPE___ns1__Combo_USCOREmodify */
};
#endif

#ifndef SOAP_TYPE___ns1__DeleteFile
#define SOAP_TYPE___ns1__DeleteFile (1800)
/* Operation wrapper: */
struct __ns1__DeleteFile
{
public:
	ns1__DeleteFile *ns1__DeleteFile_;	/* optional element of type ns1:DeleteFile */
public:
	int soap_type() const { return 1800; } /* = unique id SOAP_TYPE___ns1__DeleteFile */
};
#endif

#ifndef SOAP_TYPE___ns1__DeleteFileContainer
#define SOAP_TYPE___ns1__DeleteFileContainer (1804)
/* Operation wrapper: */
struct __ns1__DeleteFileContainer
{
public:
	ns1__DeleteFileContainer *ns1__DeleteFileContainer_;	/* optional element of type ns1:DeleteFileContainer */
public:
	int soap_type() const { return 1804; } /* = unique id SOAP_TYPE___ns1__DeleteFileContainer */
};
#endif

#ifndef SOAP_TYPE___ns1__CanDeleteFile
#define SOAP_TYPE___ns1__CanDeleteFile (1808)
/* Operation wrapper: */
struct __ns1__CanDeleteFile
{
public:
	ns1__CanDeleteFile *ns1__CanDeleteFile_;	/* optional element of type ns1:CanDeleteFile */
public:
	int soap_type() const { return 1808; } /* = unique id SOAP_TYPE___ns1__CanDeleteFile */
};
#endif

#ifndef SOAP_TYPE___ns1__CanDeleteFileContainer
#define SOAP_TYPE___ns1__CanDeleteFileContainer (1812)
/* Operation wrapper: */
struct __ns1__CanDeleteFileContainer
{
public:
	ns1__CanDeleteFileContainer *ns1__CanDeleteFileContainer_;	/* optional element of type ns1:CanDeleteFileContainer */
public:
	int soap_type() const { return 1812; } /* = unique id SOAP_TYPE___ns1__CanDeleteFileContainer */
};
#endif

#ifndef SOAP_TYPE___ns1__DeleteFileVersion
#define SOAP_TYPE___ns1__DeleteFileVersion (1816)
/* Operation wrapper: */
struct __ns1__DeleteFileVersion
{
public:
	ns1__DeleteFileVersion *ns1__DeleteFileVersion_;	/* optional element of type ns1:DeleteFileVersion */
public:
	int soap_type() const { return 1816; } /* = unique id SOAP_TYPE___ns1__DeleteFileVersion */
};
#endif

#ifndef SOAP_TYPE___ns1__DeleteFileContainerVersion
#define SOAP_TYPE___ns1__DeleteFileContainerVersion (1820)
/* Operation wrapper: */
struct __ns1__DeleteFileContainerVersion
{
public:
	ns1__DeleteFileContainerVersion *ns1__DeleteFileContainerVersion_;	/* optional element of type ns1:DeleteFileContainerVersion */
public:
	int soap_type() const { return 1820; } /* = unique id SOAP_TYPE___ns1__DeleteFileContainerVersion */
};
#endif

#ifndef SOAP_TYPE___ns1__InsertFile
#define SOAP_TYPE___ns1__InsertFile (1824)
/* Operation wrapper: */
struct __ns1__InsertFile
{
public:
	ns1__InsertFile *ns1__InsertFile_;	/* optional element of type ns1:InsertFile */
public:
	int soap_type() const { return 1824; } /* = unique id SOAP_TYPE___ns1__InsertFile */
};
#endif

#ifndef SOAP_TYPE___ns1__InsertFileContainer
#define SOAP_TYPE___ns1__InsertFileContainer (1828)
/* Operation wrapper: */
struct __ns1__InsertFileContainer
{
public:
	ns1__InsertFileContainer *ns1__InsertFileContainer_;	/* optional element of type ns1:InsertFileContainer */
public:
	int soap_type() const { return 1828; } /* = unique id SOAP_TYPE___ns1__InsertFileContainer */
};
#endif

#ifndef SOAP_TYPE___ns1__CanInsertFile
#define SOAP_TYPE___ns1__CanInsertFile (1832)
/* Operation wrapper: */
struct __ns1__CanInsertFile
{
public:
	ns1__CanInsertFile *ns1__CanInsertFile_;	/* optional element of type ns1:CanInsertFile */
public:
	int soap_type() const { return 1832; } /* = unique id SOAP_TYPE___ns1__CanInsertFile */
};
#endif

#ifndef SOAP_TYPE___ns1__CanInsertFileContainer
#define SOAP_TYPE___ns1__CanInsertFileContainer (1836)
/* Operation wrapper: */
struct __ns1__CanInsertFileContainer
{
public:
	ns1__CanInsertFileContainer *ns1__CanInsertFileContainer_;	/* optional element of type ns1:CanInsertFileContainer */
public:
	int soap_type() const { return 1836; } /* = unique id SOAP_TYPE___ns1__CanInsertFileContainer */
};
#endif

#ifndef SOAP_TYPE___ns1__CanModifyFile
#define SOAP_TYPE___ns1__CanModifyFile (1840)
/* Operation wrapper: */
struct __ns1__CanModifyFile
{
public:
	ns1__CanModifyFile *ns1__CanModifyFile_;	/* optional element of type ns1:CanModifyFile */
public:
	int soap_type() const { return 1840; } /* = unique id SOAP_TYPE___ns1__CanModifyFile */
};
#endif

#ifndef SOAP_TYPE___ns1__CanShowFile
#define SOAP_TYPE___ns1__CanShowFile (1844)
/* Operation wrapper: */
struct __ns1__CanShowFile
{
public:
	ns1__CanShowFile *ns1__CanShowFile_;	/* optional element of type ns1:CanShowFile */
public:
	int soap_type() const { return 1844; } /* = unique id SOAP_TYPE___ns1__CanShowFile */
};
#endif

#ifndef SOAP_TYPE___ns1__GetFileListByCode
#define SOAP_TYPE___ns1__GetFileListByCode (1848)
/* Operation wrapper: */
struct __ns1__GetFileListByCode
{
public:
	ns1__GetFileListByCode *ns1__GetFileListByCode_;	/* optional element of type ns1:GetFileListByCode */
public:
	int soap_type() const { return 1848; } /* = unique id SOAP_TYPE___ns1__GetFileListByCode */
};
#endif

#ifndef SOAP_TYPE___ns1__GetFileListByCodeForSecurity
#define SOAP_TYPE___ns1__GetFileListByCodeForSecurity (1852)
/* Operation wrapper: */
struct __ns1__GetFileListByCodeForSecurity
{
public:
	ns1__GetFileListByCodeForSecurity *ns1__GetFileListByCodeForSecurity_;	/* optional element of type ns1:GetFileListByCodeForSecurity */
public:
	int soap_type() const { return 1852; } /* = unique id SOAP_TYPE___ns1__GetFileListByCodeForSecurity */
};
#endif

#ifndef SOAP_TYPE___ns1__GetDataFileListContainer
#define SOAP_TYPE___ns1__GetDataFileListContainer (1856)
/* Operation wrapper: */
struct __ns1__GetDataFileListContainer
{
public:
	ns1__GetDataFileListContainer *ns1__GetDataFileListContainer_;	/* optional element of type ns1:GetDataFileListContainer */
public:
	int soap_type() const { return 1856; } /* = unique id SOAP_TYPE___ns1__GetDataFileListContainer */
};
#endif

#ifndef SOAP_TYPE___ns1__GetDataFileListOnlyLastVersion
#define SOAP_TYPE___ns1__GetDataFileListOnlyLastVersion (1860)
/* Operation wrapper: */
struct __ns1__GetDataFileListOnlyLastVersion
{
public:
	ns1__GetDataFileListOnlyLastVersion *ns1__GetDataFileListOnlyLastVersion_;	/* optional element of type ns1:GetDataFileListOnlyLastVersion */
public:
	int soap_type() const { return 1860; } /* = unique id SOAP_TYPE___ns1__GetDataFileListOnlyLastVersion */
};
#endif

#ifndef SOAP_TYPE___ns1__GetDataFileList
#define SOAP_TYPE___ns1__GetDataFileList (1864)
/* Operation wrapper: */
struct __ns1__GetDataFileList
{
public:
	ns1__GetDataFileList *ns1__GetDataFileList_;	/* optional element of type ns1:GetDataFileList */
public:
	int soap_type() const { return 1864; } /* = unique id SOAP_TYPE___ns1__GetDataFileList */
};
#endif

#ifndef SOAP_TYPE___ns1__GetDataFileListForSecurity
#define SOAP_TYPE___ns1__GetDataFileListForSecurity (1868)
/* Operation wrapper: */
struct __ns1__GetDataFileListForSecurity
{
public:
	ns1__GetDataFileListForSecurity *ns1__GetDataFileListForSecurity_;	/* optional element of type ns1:GetDataFileListForSecurity */
public:
	int soap_type() const { return 1868; } /* = unique id SOAP_TYPE___ns1__GetDataFileListForSecurity */
};
#endif

#ifndef SOAP_TYPE___ns1__GetDataFileDetail
#define SOAP_TYPE___ns1__GetDataFileDetail (1872)
/* Operation wrapper: */
struct __ns1__GetDataFileDetail
{
public:
	ns1__GetDataFileDetail *ns1__GetDataFileDetail_;	/* optional element of type ns1:GetDataFileDetail */
public:
	int soap_type() const { return 1872; } /* = unique id SOAP_TYPE___ns1__GetDataFileDetail */
};
#endif

#ifndef SOAP_TYPE___ns1__GetDataFileContainerDetail
#define SOAP_TYPE___ns1__GetDataFileContainerDetail (1876)
/* Operation wrapper: */
struct __ns1__GetDataFileContainerDetail
{
public:
	ns1__GetDataFileContainerDetail *ns1__GetDataFileContainerDetail_;	/* optional element of type ns1:GetDataFileContainerDetail */
public:
	int soap_type() const { return 1876; } /* = unique id SOAP_TYPE___ns1__GetDataFileContainerDetail */
};
#endif

#ifndef SOAP_TYPE___ns1__DownloadFile
#define SOAP_TYPE___ns1__DownloadFile (1880)
/* Operation wrapper: */
struct __ns1__DownloadFile
{
public:
	ns1__DownloadFile *ns1__DownloadFile_;	/* optional element of type ns1:DownloadFile */
public:
	int soap_type() const { return 1880; } /* = unique id SOAP_TYPE___ns1__DownloadFile */
};
#endif

#ifndef SOAP_TYPE___ns1__DownloadFileByFileUniqueCode
#define SOAP_TYPE___ns1__DownloadFileByFileUniqueCode (1884)
/* Operation wrapper: */
struct __ns1__DownloadFileByFileUniqueCode
{
public:
	ns1__DownloadFileByFileUniqueCode *ns1__DownloadFileByFileUniqueCode_;	/* optional element of type ns1:DownloadFileByFileUniqueCode */
public:
	int soap_type() const { return 1884; } /* = unique id SOAP_TYPE___ns1__DownloadFileByFileUniqueCode */
};
#endif

#ifndef SOAP_TYPE___ns1__DownloadFileUnc
#define SOAP_TYPE___ns1__DownloadFileUnc (1888)
/* Operation wrapper: */
struct __ns1__DownloadFileUnc
{
public:
	ns1__DownloadFileUnc *ns1__DownloadFileUnc_;	/* optional element of type ns1:DownloadFileUnc */
public:
	int soap_type() const { return 1888; } /* = unique id SOAP_TYPE___ns1__DownloadFileUnc */
};
#endif

#ifndef SOAP_TYPE___ns1__DownloadFileContainerUnc
#define SOAP_TYPE___ns1__DownloadFileContainerUnc (1892)
/* Operation wrapper: */
struct __ns1__DownloadFileContainerUnc
{
public:
	ns1__DownloadFileContainerUnc *ns1__DownloadFileContainerUnc_;	/* optional element of type ns1:DownloadFileContainerUnc */
public:
	int soap_type() const { return 1892; } /* = unique id SOAP_TYPE___ns1__DownloadFileContainerUnc */
};
#endif

#ifndef SOAP_TYPE___ns1__DownloadGetChunk
#define SOAP_TYPE___ns1__DownloadGetChunk (1896)
/* Operation wrapper: */
struct __ns1__DownloadGetChunk
{
public:
	ns1__DownloadGetChunk *ns1__DownloadGetChunk_;	/* optional element of type ns1:DownloadGetChunk */
public:
	int soap_type() const { return 1896; } /* = unique id SOAP_TYPE___ns1__DownloadGetChunk */
};
#endif

#ifndef SOAP_TYPE___ns1__DownloadGetNext
#define SOAP_TYPE___ns1__DownloadGetNext (1900)
/* Operation wrapper: */
struct __ns1__DownloadGetNext
{
public:
	ns1__DownloadGetNext *ns1__DownloadGetNext_;	/* optional element of type ns1:DownloadGetNext */
public:
	int soap_type() const { return 1900; } /* = unique id SOAP_TYPE___ns1__DownloadGetNext */
};
#endif

#ifndef SOAP_TYPE___ns1__UploadSendChunk
#define SOAP_TYPE___ns1__UploadSendChunk (1904)
/* Operation wrapper: */
struct __ns1__UploadSendChunk
{
public:
	ns1__UploadSendChunk *ns1__UploadSendChunk_;	/* optional element of type ns1:UploadSendChunk */
public:
	int soap_type() const { return 1904; } /* = unique id SOAP_TYPE___ns1__UploadSendChunk */
};
#endif

#ifndef SOAP_TYPE___ns1__DownloadFileContainer
#define SOAP_TYPE___ns1__DownloadFileContainer (1908)
/* Operation wrapper: */
struct __ns1__DownloadFileContainer
{
public:
	ns1__DownloadFileContainer *ns1__DownloadFileContainer_;	/* optional element of type ns1:DownloadFileContainer */
public:
	int soap_type() const { return 1908; } /* = unique id SOAP_TYPE___ns1__DownloadFileContainer */
};
#endif

#ifndef SOAP_TYPE___ns1__DownloadFilePreview
#define SOAP_TYPE___ns1__DownloadFilePreview (1912)
/* Operation wrapper: */
struct __ns1__DownloadFilePreview
{
public:
	ns1__DownloadFilePreview *ns1__DownloadFilePreview_;	/* optional element of type ns1:DownloadFilePreview */
public:
	int soap_type() const { return 1912; } /* = unique id SOAP_TYPE___ns1__DownloadFilePreview */
};
#endif

#ifndef SOAP_TYPE___ns1__GetUploadDetailByFilecode
#define SOAP_TYPE___ns1__GetUploadDetailByFilecode (1916)
/* Operation wrapper: */
struct __ns1__GetUploadDetailByFilecode
{
public:
	ns1__GetUploadDetailByFilecode *ns1__GetUploadDetailByFilecode_;	/* optional element of type ns1:GetUploadDetailByFilecode */
public:
	int soap_type() const { return 1916; } /* = unique id SOAP_TYPE___ns1__GetUploadDetailByFilecode */
};
#endif

#ifndef SOAP_TYPE___ns1__GetUploadDetailByDataId
#define SOAP_TYPE___ns1__GetUploadDetailByDataId (1920)
/* Operation wrapper: */
struct __ns1__GetUploadDetailByDataId
{
public:
	ns1__GetUploadDetailByDataId *ns1__GetUploadDetailByDataId_;	/* optional element of type ns1:GetUploadDetailByDataId */
public:
	int soap_type() const { return 1920; } /* = unique id SOAP_TYPE___ns1__GetUploadDetailByDataId */
};
#endif

#ifndef SOAP_TYPE___ns1__GetUploadDetailByData
#define SOAP_TYPE___ns1__GetUploadDetailByData (1924)
/* Operation wrapper: */
struct __ns1__GetUploadDetailByData
{
public:
	ns1__GetUploadDetailByData *ns1__GetUploadDetailByData_;	/* optional element of type ns1:GetUploadDetailByData */
public:
	int soap_type() const { return 1924; } /* = unique id SOAP_TYPE___ns1__GetUploadDetailByData */
};
#endif

#ifndef SOAP_TYPE___ns1__GetUploadDetailByContId
#define SOAP_TYPE___ns1__GetUploadDetailByContId (1928)
/* Operation wrapper: */
struct __ns1__GetUploadDetailByContId
{
public:
	ns1__GetUploadDetailByContId *ns1__GetUploadDetailByContId_;	/* optional element of type ns1:GetUploadDetailByContId */
public:
	int soap_type() const { return 1928; } /* = unique id SOAP_TYPE___ns1__GetUploadDetailByContId */
};
#endif

#ifndef SOAP_TYPE___ns1__GetUploadDetailByCont
#define SOAP_TYPE___ns1__GetUploadDetailByCont (1932)
/* Operation wrapper: */
struct __ns1__GetUploadDetailByCont
{
public:
	ns1__GetUploadDetailByCont *ns1__GetUploadDetailByCont_;	/* optional element of type ns1:GetUploadDetailByCont */
public:
	int soap_type() const { return 1932; } /* = unique id SOAP_TYPE___ns1__GetUploadDetailByCont */
};
#endif

#ifndef SOAP_TYPE___ns1__UploadEndFile
#define SOAP_TYPE___ns1__UploadEndFile (1936)
/* Operation wrapper: */
struct __ns1__UploadEndFile
{
public:
	ns1__UploadEndFile *ns1__UploadEndFile_;	/* optional element of type ns1:UploadEndFile */
public:
	int soap_type() const { return 1936; } /* = unique id SOAP_TYPE___ns1__UploadEndFile */
};
#endif

#ifndef SOAP_TYPE___ns1__UploadEndFileContainer
#define SOAP_TYPE___ns1__UploadEndFileContainer (1940)
/* Operation wrapper: */
struct __ns1__UploadEndFileContainer
{
public:
	ns1__UploadEndFileContainer *ns1__UploadEndFileContainer_;	/* optional element of type ns1:UploadEndFileContainer */
public:
	int soap_type() const { return 1940; } /* = unique id SOAP_TYPE___ns1__UploadEndFileContainer */
};
#endif

#ifndef SOAP_TYPE___ns1__SetTmpUploadPath
#define SOAP_TYPE___ns1__SetTmpUploadPath (1944)
/* Operation wrapper: */
struct __ns1__SetTmpUploadPath
{
public:
	ns1__SetTmpUploadPath *ns1__SetTmpUploadPath_;	/* optional element of type ns1:SetTmpUploadPath */
public:
	int soap_type() const { return 1944; } /* = unique id SOAP_TYPE___ns1__SetTmpUploadPath */
};
#endif

#ifndef SOAP_TYPE___ns1__SetTmpDownloadPath
#define SOAP_TYPE___ns1__SetTmpDownloadPath (1948)
/* Operation wrapper: */
struct __ns1__SetTmpDownloadPath
{
public:
	ns1__SetTmpDownloadPath *ns1__SetTmpDownloadPath_;	/* optional element of type ns1:SetTmpDownloadPath */
public:
	int soap_type() const { return 1948; } /* = unique id SOAP_TYPE___ns1__SetTmpDownloadPath */
};
#endif

#ifndef SOAP_TYPE___ns1__GetDownloadDetailByFilecode
#define SOAP_TYPE___ns1__GetDownloadDetailByFilecode (1952)
/* Operation wrapper: */
struct __ns1__GetDownloadDetailByFilecode
{
public:
	ns1__GetDownloadDetailByFilecode *ns1__GetDownloadDetailByFilecode_;	/* optional element of type ns1:GetDownloadDetailByFilecode */
public:
	int soap_type() const { return 1952; } /* = unique id SOAP_TYPE___ns1__GetDownloadDetailByFilecode */
};
#endif

#ifndef SOAP_TYPE___ns1__GetDownloadDetailByDataId
#define SOAP_TYPE___ns1__GetDownloadDetailByDataId (1956)
/* Operation wrapper: */
struct __ns1__GetDownloadDetailByDataId
{
public:
	ns1__GetDownloadDetailByDataId *ns1__GetDownloadDetailByDataId_;	/* optional element of type ns1:GetDownloadDetailByDataId */
public:
	int soap_type() const { return 1956; } /* = unique id SOAP_TYPE___ns1__GetDownloadDetailByDataId */
};
#endif

#ifndef SOAP_TYPE___ns1__GetDownloadDetailByData
#define SOAP_TYPE___ns1__GetDownloadDetailByData (1960)
/* Operation wrapper: */
struct __ns1__GetDownloadDetailByData
{
public:
	ns1__GetDownloadDetailByData *ns1__GetDownloadDetailByData_;	/* optional element of type ns1:GetDownloadDetailByData */
public:
	int soap_type() const { return 1960; } /* = unique id SOAP_TYPE___ns1__GetDownloadDetailByData */
};
#endif

#ifndef SOAP_TYPE___ns1__GetDownloadDetailByContId
#define SOAP_TYPE___ns1__GetDownloadDetailByContId (1964)
/* Operation wrapper: */
struct __ns1__GetDownloadDetailByContId
{
public:
	ns1__GetDownloadDetailByContId *ns1__GetDownloadDetailByContId_;	/* optional element of type ns1:GetDownloadDetailByContId */
public:
	int soap_type() const { return 1964; } /* = unique id SOAP_TYPE___ns1__GetDownloadDetailByContId */
};
#endif

#ifndef SOAP_TYPE___ns1__GetDownloadDetailByCont
#define SOAP_TYPE___ns1__GetDownloadDetailByCont (1968)
/* Operation wrapper: */
struct __ns1__GetDownloadDetailByCont
{
public:
	ns1__GetDownloadDetailByCont *ns1__GetDownloadDetailByCont_;	/* optional element of type ns1:GetDownloadDetailByCont */
public:
	int soap_type() const { return 1968; } /* = unique id SOAP_TYPE___ns1__GetDownloadDetailByCont */
};
#endif

#ifndef SOAP_TYPE___ns1__GetCountFileList
#define SOAP_TYPE___ns1__GetCountFileList (1972)
/* Operation wrapper: */
struct __ns1__GetCountFileList
{
public:
	ns1__GetCountFileList *ns1__GetCountFileList_;	/* optional element of type ns1:GetCountFileList */
public:
	int soap_type() const { return 1972; } /* = unique id SOAP_TYPE___ns1__GetCountFileList */
};
#endif

#ifndef SOAP_TYPE___ns1__ModifyFileDescription
#define SOAP_TYPE___ns1__ModifyFileDescription (1976)
/* Operation wrapper: */
struct __ns1__ModifyFileDescription
{
public:
	ns1__ModifyFileDescription *ns1__ModifyFileDescription_;	/* optional element of type ns1:ModifyFileDescription */
public:
	int soap_type() const { return 1976; } /* = unique id SOAP_TYPE___ns1__ModifyFileDescription */
};
#endif

#ifndef SOAP_TYPE___ns1__CopyFile
#define SOAP_TYPE___ns1__CopyFile (1980)
/* Operation wrapper: */
struct __ns1__CopyFile
{
public:
	ns1__CopyFile *ns1__CopyFile_;	/* optional element of type ns1:CopyFile */
public:
	int soap_type() const { return 1980; } /* = unique id SOAP_TYPE___ns1__CopyFile */
};
#endif

#ifndef SOAP_TYPE___ns1__IfFileExist
#define SOAP_TYPE___ns1__IfFileExist (1984)
/* Operation wrapper: */
struct __ns1__IfFileExist
{
public:
	ns1__IfFileExist *ns1__IfFileExist_;	/* optional element of type ns1:IfFileExist */
public:
	int soap_type() const { return 1984; } /* = unique id SOAP_TYPE___ns1__IfFileExist */
};
#endif

#ifndef SOAP_TYPE___ns1__SetFileAvailable
#define SOAP_TYPE___ns1__SetFileAvailable (1988)
/* Operation wrapper: */
struct __ns1__SetFileAvailable
{
public:
	ns1__SetFileAvailable *ns1__SetFileAvailable_;	/* optional element of type ns1:SetFileAvailable */
public:
	int soap_type() const { return 1988; } /* = unique id SOAP_TYPE___ns1__SetFileAvailable */
};
#endif

#ifndef SOAP_TYPE___ns1__GetFileAvailable
#define SOAP_TYPE___ns1__GetFileAvailable (1992)
/* Operation wrapper: */
struct __ns1__GetFileAvailable
{
public:
	ns1__GetFileAvailable *ns1__GetFileAvailable_;	/* optional element of type ns1:GetFileAvailable */
public:
	int soap_type() const { return 1992; } /* = unique id SOAP_TYPE___ns1__GetFileAvailable */
};
#endif

#ifndef SOAP_TYPE___ns1__AddFileToSyncByArcCue
#define SOAP_TYPE___ns1__AddFileToSyncByArcCue (1996)
/* Operation wrapper: */
struct __ns1__AddFileToSyncByArcCue
{
public:
	ns1__AddFileToSyncByArcCue *ns1__AddFileToSyncByArcCue_;	/* optional element of type ns1:AddFileToSyncByArcCue */
public:
	int soap_type() const { return 1996; } /* = unique id SOAP_TYPE___ns1__AddFileToSyncByArcCue */
};
#endif

#ifndef SOAP_TYPE___ns1__Fk_USCOREDB_USCOREtestConnection
#define SOAP_TYPE___ns1__Fk_USCOREDB_USCOREtestConnection (2000)
/* Operation wrapper: */
struct __ns1__Fk_USCOREDB_USCOREtestConnection
{
public:
	ns1__Fk_USCOREDB_USCOREtestConnection *ns1__Fk_USCOREDB_USCOREtestConnection_;	/* optional element of type ns1:Fk_DB_testConnection */
public:
	int soap_type() const { return 2000; } /* = unique id SOAP_TYPE___ns1__Fk_USCOREDB_USCOREtestConnection */
};
#endif

#ifndef SOAP_TYPE___ns1__Fk_USCOREWS_USCOREinsert
#define SOAP_TYPE___ns1__Fk_USCOREWS_USCOREinsert (2004)
/* Operation wrapper: */
struct __ns1__Fk_USCOREWS_USCOREinsert
{
public:
	ns1__Fk_USCOREWS_USCOREinsert *ns1__Fk_USCOREWS_USCOREinsert_;	/* optional element of type ns1:Fk_WS_insert */
public:
	int soap_type() const { return 2004; } /* = unique id SOAP_TYPE___ns1__Fk_USCOREWS_USCOREinsert */
};
#endif

#ifndef SOAP_TYPE___ns1__Fk_USCOREDB_USCOREmodify
#define SOAP_TYPE___ns1__Fk_USCOREDB_USCOREmodify (2008)
/* Operation wrapper: */
struct __ns1__Fk_USCOREDB_USCOREmodify
{
public:
	ns1__Fk_USCOREDB_USCOREmodify *ns1__Fk_USCOREDB_USCOREmodify_;	/* optional element of type ns1:Fk_DB_modify */
public:
	int soap_type() const { return 2008; } /* = unique id SOAP_TYPE___ns1__Fk_USCOREDB_USCOREmodify */
};
#endif

#ifndef SOAP_TYPE___ns1__Fk_USCOREDB_USCOREdelete
#define SOAP_TYPE___ns1__Fk_USCOREDB_USCOREdelete (2012)
/* Operation wrapper: */
struct __ns1__Fk_USCOREDB_USCOREdelete
{
public:
	ns1__Fk_USCOREDB_USCOREdelete *ns1__Fk_USCOREDB_USCOREdelete_;	/* optional element of type ns1:Fk_DB_delete */
public:
	int soap_type() const { return 2012; } /* = unique id SOAP_TYPE___ns1__Fk_USCOREDB_USCOREdelete */
};
#endif

#ifndef SOAP_TYPE___ns1__Fk_USCOREgetParsAllFk
#define SOAP_TYPE___ns1__Fk_USCOREgetParsAllFk (2016)
/* Operation wrapper: */
struct __ns1__Fk_USCOREgetParsAllFk
{
public:
	ns1__Fk_USCOREgetParsAllFk *ns1__Fk_USCOREgetParsAllFk_;	/* optional element of type ns1:Fk_getParsAllFk */
public:
	int soap_type() const { return 2016; } /* = unique id SOAP_TYPE___ns1__Fk_USCOREgetParsAllFk */
};
#endif

#ifndef SOAP_TYPE___ns1__Fk_USCOREgetPars
#define SOAP_TYPE___ns1__Fk_USCOREgetPars (2020)
/* Operation wrapper: */
struct __ns1__Fk_USCOREgetPars
{
public:
	ns1__Fk_USCOREgetPars *ns1__Fk_USCOREgetPars_;	/* optional element of type ns1:Fk_getPars */
public:
	int soap_type() const { return 2020; } /* = unique id SOAP_TYPE___ns1__Fk_USCOREgetPars */
};
#endif

#ifndef SOAP_TYPE___ns1__Fk_USCOREcreate
#define SOAP_TYPE___ns1__Fk_USCOREcreate (2024)
/* Operation wrapper: */
struct __ns1__Fk_USCOREcreate
{
public:
	ns1__Fk_USCOREcreate *ns1__Fk_USCOREcreate_;	/* optional element of type ns1:Fk_create */
public:
	int soap_type() const { return 2024; } /* = unique id SOAP_TYPE___ns1__Fk_USCOREcreate */
};
#endif

#ifndef SOAP_TYPE___ns1__GetLanguages
#define SOAP_TYPE___ns1__GetLanguages (2028)
/* Operation wrapper: */
struct __ns1__GetLanguages
{
public:
	ns1__GetLanguages *ns1__GetLanguages_;	/* optional element of type ns1:GetLanguages */
public:
	int soap_type() const { return 2028; } /* = unique id SOAP_TYPE___ns1__GetLanguages */
};
#endif

#ifndef SOAP_TYPE___ns1__AddLogSDK
#define SOAP_TYPE___ns1__AddLogSDK (2032)
/* Operation wrapper: */
struct __ns1__AddLogSDK
{
public:
	ns1__AddLogSDK *ns1__AddLogSDK_;	/* optional element of type ns1:AddLogSDK */
public:
	int soap_type() const { return 2032; } /* = unique id SOAP_TYPE___ns1__AddLogSDK */
};
#endif

#ifndef SOAP_TYPE___ns1__GetSDKLogList
#define SOAP_TYPE___ns1__GetSDKLogList (2036)
/* Operation wrapper: */
struct __ns1__GetSDKLogList
{
public:
	ns1__GetSDKLogList *ns1__GetSDKLogList_;	/* optional element of type ns1:GetSDKLogList */
public:
	int soap_type() const { return 2036; } /* = unique id SOAP_TYPE___ns1__GetSDKLogList */
};
#endif

#ifndef SOAP_TYPE___ns1__DeleteSDKLog
#define SOAP_TYPE___ns1__DeleteSDKLog (2040)
/* Operation wrapper: */
struct __ns1__DeleteSDKLog
{
public:
	ns1__DeleteSDKLog *ns1__DeleteSDKLog_;	/* optional element of type ns1:DeleteSDKLog */
public:
	int soap_type() const { return 2040; } /* = unique id SOAP_TYPE___ns1__DeleteSDKLog */
};
#endif

#ifndef SOAP_TYPE___ns1__ResetUserSessions
#define SOAP_TYPE___ns1__ResetUserSessions (2044)
/* Operation wrapper: */
struct __ns1__ResetUserSessions
{
public:
	ns1__ResetUserSessions *ns1__ResetUserSessions_;	/* optional element of type ns1:ResetUserSessions */
public:
	int soap_type() const { return 2044; } /* = unique id SOAP_TYPE___ns1__ResetUserSessions */
};
#endif

#ifndef SOAP_TYPE___ns1__ValidateSession
#define SOAP_TYPE___ns1__ValidateSession (2048)
/* Operation wrapper: */
struct __ns1__ValidateSession
{
public:
	ns1__ValidateSession *ns1__ValidateSession_;	/* optional element of type ns1:ValidateSession */
public:
	int soap_type() const { return 2048; } /* = unique id SOAP_TYPE___ns1__ValidateSession */
};
#endif

#ifndef SOAP_TYPE___ns1__GetUserList
#define SOAP_TYPE___ns1__GetUserList (2052)
/* Operation wrapper: */
struct __ns1__GetUserList
{
public:
	ns1__GetUserList *ns1__GetUserList_;	/* optional element of type ns1:GetUserList */
public:
	int soap_type() const { return 2052; } /* = unique id SOAP_TYPE___ns1__GetUserList */
};
#endif

#ifndef SOAP_TYPE___ns1__GetUserListActiveDirectory
#define SOAP_TYPE___ns1__GetUserListActiveDirectory (2056)
/* Operation wrapper: */
struct __ns1__GetUserListActiveDirectory
{
public:
	ns1__GetUserListActiveDirectory *ns1__GetUserListActiveDirectory_;	/* optional element of type ns1:GetUserListActiveDirectory */
public:
	int soap_type() const { return 2056; } /* = unique id SOAP_TYPE___ns1__GetUserListActiveDirectory */
};
#endif

#ifndef SOAP_TYPE___ns1__InsertUser
#define SOAP_TYPE___ns1__InsertUser (2060)
/* Operation wrapper: */
struct __ns1__InsertUser
{
public:
	ns1__InsertUser *ns1__InsertUser_;	/* optional element of type ns1:InsertUser */
public:
	int soap_type() const { return 2060; } /* = unique id SOAP_TYPE___ns1__InsertUser */
};
#endif

#ifndef SOAP_TYPE___ns1__ModifyUser
#define SOAP_TYPE___ns1__ModifyUser (2064)
/* Operation wrapper: */
struct __ns1__ModifyUser
{
public:
	ns1__ModifyUser *ns1__ModifyUser_;	/* optional element of type ns1:ModifyUser */
public:
	int soap_type() const { return 2064; } /* = unique id SOAP_TYPE___ns1__ModifyUser */
};
#endif

#ifndef SOAP_TYPE___ns1__InsertUserConfig
#define SOAP_TYPE___ns1__InsertUserConfig (2068)
/* Operation wrapper: */
struct __ns1__InsertUserConfig
{
public:
	ns1__InsertUserConfig *ns1__InsertUserConfig_;	/* optional element of type ns1:InsertUserConfig */
public:
	int soap_type() const { return 2068; } /* = unique id SOAP_TYPE___ns1__InsertUserConfig */
};
#endif

#ifndef SOAP_TYPE___ns1__ModifyUserConfig
#define SOAP_TYPE___ns1__ModifyUserConfig (2072)
/* Operation wrapper: */
struct __ns1__ModifyUserConfig
{
public:
	ns1__ModifyUserConfig *ns1__ModifyUserConfig_;	/* optional element of type ns1:ModifyUserConfig */
public:
	int soap_type() const { return 2072; } /* = unique id SOAP_TYPE___ns1__ModifyUserConfig */
};
#endif

#ifndef SOAP_TYPE___ns1__GetUserDetailByUsername
#define SOAP_TYPE___ns1__GetUserDetailByUsername (2076)
/* Operation wrapper: */
struct __ns1__GetUserDetailByUsername
{
public:
	ns1__GetUserDetailByUsername *ns1__GetUserDetailByUsername_;	/* optional element of type ns1:GetUserDetailByUsername */
public:
	int soap_type() const { return 2076; } /* = unique id SOAP_TYPE___ns1__GetUserDetailByUsername */
};
#endif

#ifndef SOAP_TYPE___ns1__GetUserDetailByUserId
#define SOAP_TYPE___ns1__GetUserDetailByUserId (2080)
/* Operation wrapper: */
struct __ns1__GetUserDetailByUserId
{
public:
	ns1__GetUserDetailByUserId *ns1__GetUserDetailByUserId_;	/* optional element of type ns1:GetUserDetailByUserId */
public:
	int soap_type() const { return 2080; } /* = unique id SOAP_TYPE___ns1__GetUserDetailByUserId */
};
#endif

#ifndef SOAP_TYPE___ns1__DeleteGroup
#define SOAP_TYPE___ns1__DeleteGroup (2084)
/* Operation wrapper: */
struct __ns1__DeleteGroup
{
public:
	ns1__DeleteGroup *ns1__DeleteGroup_;	/* optional element of type ns1:DeleteGroup */
public:
	int soap_type() const { return 2084; } /* = unique id SOAP_TYPE___ns1__DeleteGroup */
};
#endif

#ifndef SOAP_TYPE___ns1__Ping
#define SOAP_TYPE___ns1__Ping (2088)
/* Operation wrapper: */
struct __ns1__Ping
{
public:
	ns1__Ping *ns1__Ping_;	/* optional element of type ns1:Ping */
public:
	int soap_type() const { return 2088; } /* = unique id SOAP_TYPE___ns1__Ping */
};
#endif

#ifndef SOAP_TYPE___ns1__ExistUserByUsername
#define SOAP_TYPE___ns1__ExistUserByUsername (2092)
/* Operation wrapper: */
struct __ns1__ExistUserByUsername
{
public:
	ns1__ExistUserByUsername *ns1__ExistUserByUsername_;	/* optional element of type ns1:ExistUserByUsername */
public:
	int soap_type() const { return 2092; } /* = unique id SOAP_TYPE___ns1__ExistUserByUsername */
};
#endif

#ifndef SOAP_TYPE___ns1__DeleteUserByUsername
#define SOAP_TYPE___ns1__DeleteUserByUsername (2096)
/* Operation wrapper: */
struct __ns1__DeleteUserByUsername
{
public:
	ns1__DeleteUserByUsername *ns1__DeleteUserByUsername_;	/* optional element of type ns1:DeleteUserByUsername */
public:
	int soap_type() const { return 2096; } /* = unique id SOAP_TYPE___ns1__DeleteUserByUsername */
};
#endif

#ifndef SOAP_TYPE___ns1__InsertGroup
#define SOAP_TYPE___ns1__InsertGroup (2100)
/* Operation wrapper: */
struct __ns1__InsertGroup
{
public:
	ns1__InsertGroup *ns1__InsertGroup_;	/* optional element of type ns1:InsertGroup */
public:
	int soap_type() const { return 2100; } /* = unique id SOAP_TYPE___ns1__InsertGroup */
};
#endif

#ifndef SOAP_TYPE___ns1__ModifyGroup
#define SOAP_TYPE___ns1__ModifyGroup (2104)
/* Operation wrapper: */
struct __ns1__ModifyGroup
{
public:
	ns1__ModifyGroup *ns1__ModifyGroup_;	/* optional element of type ns1:ModifyGroup */
public:
	int soap_type() const { return 2104; } /* = unique id SOAP_TYPE___ns1__ModifyGroup */
};
#endif

#ifndef SOAP_TYPE___ns1__GetGroupList
#define SOAP_TYPE___ns1__GetGroupList (2108)
/* Operation wrapper: */
struct __ns1__GetGroupList
{
public:
	ns1__GetGroupList *ns1__GetGroupList_;	/* optional element of type ns1:GetGroupList */
public:
	int soap_type() const { return 2108; } /* = unique id SOAP_TYPE___ns1__GetGroupList */
};
#endif

#ifndef SOAP_TYPE___ns1__InsertUserInGroup
#define SOAP_TYPE___ns1__InsertUserInGroup (2112)
/* Operation wrapper: */
struct __ns1__InsertUserInGroup
{
public:
	ns1__InsertUserInGroup *ns1__InsertUserInGroup_;	/* optional element of type ns1:InsertUserInGroup */
public:
	int soap_type() const { return 2112; } /* = unique id SOAP_TYPE___ns1__InsertUserInGroup */
};
#endif

#ifndef SOAP_TYPE___ns1__RemoveUserByAllGroups
#define SOAP_TYPE___ns1__RemoveUserByAllGroups (2116)
/* Operation wrapper: */
struct __ns1__RemoveUserByAllGroups
{
public:
	ns1__RemoveUserByAllGroups *ns1__RemoveUserByAllGroups_;	/* optional element of type ns1:RemoveUserByAllGroups */
public:
	int soap_type() const { return 2116; } /* = unique id SOAP_TYPE___ns1__RemoveUserByAllGroups */
};
#endif

#ifndef SOAP_TYPE___ns1__RemoveUserByGroup
#define SOAP_TYPE___ns1__RemoveUserByGroup (2120)
/* Operation wrapper: */
struct __ns1__RemoveUserByGroup
{
public:
	ns1__RemoveUserByGroup *ns1__RemoveUserByGroup_;	/* optional element of type ns1:RemoveUserByGroup */
public:
	int soap_type() const { return 2120; } /* = unique id SOAP_TYPE___ns1__RemoveUserByGroup */
};
#endif

#ifndef SOAP_TYPE___ns1__GetGroupsListByUser
#define SOAP_TYPE___ns1__GetGroupsListByUser (2124)
/* Operation wrapper: */
struct __ns1__GetGroupsListByUser
{
public:
	ns1__GetGroupsListByUser *ns1__GetGroupsListByUser_;	/* optional element of type ns1:GetGroupsListByUser */
public:
	int soap_type() const { return 2124; } /* = unique id SOAP_TYPE___ns1__GetGroupsListByUser */
};
#endif

#ifndef SOAP_TYPE___ns1__GetUsersListByGroup
#define SOAP_TYPE___ns1__GetUsersListByGroup (2128)
/* Operation wrapper: */
struct __ns1__GetUsersListByGroup
{
public:
	ns1__GetUsersListByGroup *ns1__GetUsersListByGroup_;	/* optional element of type ns1:GetUsersListByGroup */
public:
	int soap_type() const { return 2128; } /* = unique id SOAP_TYPE___ns1__GetUsersListByGroup */
};
#endif

#ifndef SOAP_TYPE___ns1__ModifyTranslation
#define SOAP_TYPE___ns1__ModifyTranslation (2132)
/* Operation wrapper: */
struct __ns1__ModifyTranslation
{
public:
	ns1__ModifyTranslation *ns1__ModifyTranslation_;	/* optional element of type ns1:ModifyTranslation */
public:
	int soap_type() const { return 2132; } /* = unique id SOAP_TYPE___ns1__ModifyTranslation */
};
#endif

#ifndef SOAP_TYPE___ns1__DeleteTranslation
#define SOAP_TYPE___ns1__DeleteTranslation (2136)
/* Operation wrapper: */
struct __ns1__DeleteTranslation
{
public:
	ns1__DeleteTranslation *ns1__DeleteTranslation_;	/* optional element of type ns1:DeleteTranslation */
public:
	int soap_type() const { return 2136; } /* = unique id SOAP_TYPE___ns1__DeleteTranslation */
};
#endif

#ifndef SOAP_TYPE___ns1__InsertTranslation
#define SOAP_TYPE___ns1__InsertTranslation (2140)
/* Operation wrapper: */
struct __ns1__InsertTranslation
{
public:
	ns1__InsertTranslation *ns1__InsertTranslation_;	/* optional element of type ns1:InsertTranslation */
public:
	int soap_type() const { return 2140; } /* = unique id SOAP_TYPE___ns1__InsertTranslation */
};
#endif

#ifndef SOAP_TYPE___ns1__InsertTranslationCode
#define SOAP_TYPE___ns1__InsertTranslationCode (2144)
/* Operation wrapper: */
struct __ns1__InsertTranslationCode
{
public:
	ns1__InsertTranslationCode *ns1__InsertTranslationCode_;	/* optional element of type ns1:InsertTranslationCode */
public:
	int soap_type() const { return 2144; } /* = unique id SOAP_TYPE___ns1__InsertTranslationCode */
};
#endif

#ifndef SOAP_TYPE___ns1__InsertTranslationDecimalCode
#define SOAP_TYPE___ns1__InsertTranslationDecimalCode (2148)
/* Operation wrapper: */
struct __ns1__InsertTranslationDecimalCode
{
public:
	ns1__InsertTranslationDecimalCode *ns1__InsertTranslationDecimalCode_;	/* optional element of type ns1:InsertTranslationDecimalCode */
public:
	int soap_type() const { return 2148; } /* = unique id SOAP_TYPE___ns1__InsertTranslationDecimalCode */
};
#endif

#ifndef SOAP_TYPE___ns1__GetTranslationByMessageId
#define SOAP_TYPE___ns1__GetTranslationByMessageId (2152)
/* Operation wrapper: */
struct __ns1__GetTranslationByMessageId
{
public:
	ns1__GetTranslationByMessageId *ns1__GetTranslationByMessageId_;	/* optional element of type ns1:GetTranslationByMessageId */
public:
	int soap_type() const { return 2152; } /* = unique id SOAP_TYPE___ns1__GetTranslationByMessageId */
};
#endif

#ifndef SOAP_TYPE___ns1__GetTranslationByLabelCode
#define SOAP_TYPE___ns1__GetTranslationByLabelCode (2156)
/* Operation wrapper: */
struct __ns1__GetTranslationByLabelCode
{
public:
	ns1__GetTranslationByLabelCode *ns1__GetTranslationByLabelCode_;	/* optional element of type ns1:GetTranslationByLabelCode */
public:
	int soap_type() const { return 2156; } /* = unique id SOAP_TYPE___ns1__GetTranslationByLabelCode */
};
#endif

#ifndef SOAP_TYPE___ns1__GetTranslationByRangeLabelCode
#define SOAP_TYPE___ns1__GetTranslationByRangeLabelCode (2160)
/* Operation wrapper: */
struct __ns1__GetTranslationByRangeLabelCode
{
public:
	ns1__GetTranslationByRangeLabelCode *ns1__GetTranslationByRangeLabelCode_;	/* optional element of type ns1:GetTranslationByRangeLabelCode */
public:
	int soap_type() const { return 2160; } /* = unique id SOAP_TYPE___ns1__GetTranslationByRangeLabelCode */
};
#endif

#ifndef SOAP_TYPE___ns1__GetTranslationBySourceSuffix
#define SOAP_TYPE___ns1__GetTranslationBySourceSuffix (2164)
/* Operation wrapper: */
struct __ns1__GetTranslationBySourceSuffix
{
public:
	ns1__GetTranslationBySourceSuffix *ns1__GetTranslationBySourceSuffix_;	/* optional element of type ns1:GetTranslationBySourceSuffix */
public:
	int soap_type() const { return 2164; } /* = unique id SOAP_TYPE___ns1__GetTranslationBySourceSuffix */
};
#endif

#ifndef SOAP_TYPE___ns1__DeleteTranslationByCode
#define SOAP_TYPE___ns1__DeleteTranslationByCode (2168)
/* Operation wrapper: */
struct __ns1__DeleteTranslationByCode
{
public:
	ns1__DeleteTranslationByCode *ns1__DeleteTranslationByCode_;	/* optional element of type ns1:DeleteTranslationByCode */
public:
	int soap_type() const { return 2168; } /* = unique id SOAP_TYPE___ns1__DeleteTranslationByCode */
};
#endif

#ifndef SOAP_TYPE___ns1__AddDefaultProcess
#define SOAP_TYPE___ns1__AddDefaultProcess (2172)
/* Operation wrapper: */
struct __ns1__AddDefaultProcess
{
public:
	ns1__AddDefaultProcess *ns1__AddDefaultProcess_;	/* optional element of type ns1:AddDefaultProcess */
public:
	int soap_type() const { return 2172; } /* = unique id SOAP_TYPE___ns1__AddDefaultProcess */
};
#endif

#ifndef SOAP_TYPE___ns1__ModDefaultProcess
#define SOAP_TYPE___ns1__ModDefaultProcess (2176)
/* Operation wrapper: */
struct __ns1__ModDefaultProcess
{
public:
	ns1__ModDefaultProcess *ns1__ModDefaultProcess_;	/* optional element of type ns1:ModDefaultProcess */
public:
	int soap_type() const { return 2176; } /* = unique id SOAP_TYPE___ns1__ModDefaultProcess */
};
#endif

#ifndef SOAP_TYPE___ns1__DelDefaultProcess
#define SOAP_TYPE___ns1__DelDefaultProcess (2180)
/* Operation wrapper: */
struct __ns1__DelDefaultProcess
{
public:
	ns1__DelDefaultProcess *ns1__DelDefaultProcess_;	/* optional element of type ns1:DelDefaultProcess */
public:
	int soap_type() const { return 2180; } /* = unique id SOAP_TYPE___ns1__DelDefaultProcess */
};
#endif

#ifndef SOAP_TYPE___ns1__GetDefaultProcess
#define SOAP_TYPE___ns1__GetDefaultProcess (2184)
/* Operation wrapper: */
struct __ns1__GetDefaultProcess
{
public:
	ns1__GetDefaultProcess *ns1__GetDefaultProcess_;	/* optional element of type ns1:GetDefaultProcess */
public:
	int soap_type() const { return 2184; } /* = unique id SOAP_TYPE___ns1__GetDefaultProcess */
};
#endif

#ifndef SOAP_TYPE___ns1__AddMarker
#define SOAP_TYPE___ns1__AddMarker (2188)
/* Operation wrapper: */
struct __ns1__AddMarker
{
public:
	ns1__AddMarker *ns1__AddMarker_;	/* optional element of type ns1:AddMarker */
public:
	int soap_type() const { return 2188; } /* = unique id SOAP_TYPE___ns1__AddMarker */
};
#endif

#ifndef SOAP_TYPE___ns1__DelMarker
#define SOAP_TYPE___ns1__DelMarker (2192)
/* Operation wrapper: */
struct __ns1__DelMarker
{
public:
	ns1__DelMarker *ns1__DelMarker_;	/* optional element of type ns1:DelMarker */
public:
	int soap_type() const { return 2192; } /* = unique id SOAP_TYPE___ns1__DelMarker */
};
#endif

#ifndef SOAP_TYPE___ns1__GetListMarker
#define SOAP_TYPE___ns1__GetListMarker (2196)
/* Operation wrapper: */
struct __ns1__GetListMarker
{
public:
	ns1__GetListMarker *ns1__GetListMarker_;	/* optional element of type ns1:GetListMarker */
public:
	int soap_type() const { return 2196; } /* = unique id SOAP_TYPE___ns1__GetListMarker */
};
#endif

#ifndef SOAP_TYPE___ns1__GetWorkflowVariables
#define SOAP_TYPE___ns1__GetWorkflowVariables (2200)
/* Operation wrapper: */
struct __ns1__GetWorkflowVariables
{
public:
	ns1__GetWorkflowVariables *ns1__GetWorkflowVariables_;	/* optional element of type ns1:GetWorkflowVariables */
public:
	int soap_type() const { return 2200; } /* = unique id SOAP_TYPE___ns1__GetWorkflowVariables */
};
#endif

#ifndef SOAP_TYPE___ns1__AddSign
#define SOAP_TYPE___ns1__AddSign (2204)
/* Operation wrapper: */
struct __ns1__AddSign
{
public:
	ns1__AddSign *ns1__AddSign_;	/* optional element of type ns1:AddSign */
public:
	int soap_type() const { return 2204; } /* = unique id SOAP_TYPE___ns1__AddSign */
};
#endif

#ifndef SOAP_TYPE___ns1__DelSign
#define SOAP_TYPE___ns1__DelSign (2208)
/* Operation wrapper: */
struct __ns1__DelSign
{
public:
	ns1__DelSign *ns1__DelSign_;	/* optional element of type ns1:DelSign */
public:
	int soap_type() const { return 2208; } /* = unique id SOAP_TYPE___ns1__DelSign */
};
#endif

#ifndef SOAP_TYPE___ns1__GetSign
#define SOAP_TYPE___ns1__GetSign (2212)
/* Operation wrapper: */
struct __ns1__GetSign
{
public:
	ns1__GetSign *ns1__GetSign_;	/* optional element of type ns1:GetSign */
public:
	int soap_type() const { return 2212; } /* = unique id SOAP_TYPE___ns1__GetSign */
};
#endif

#ifndef SOAP_TYPE___ns1__GetContSign
#define SOAP_TYPE___ns1__GetContSign (2216)
/* Operation wrapper: */
struct __ns1__GetContSign
{
public:
	ns1__GetContSign *ns1__GetContSign_;	/* optional element of type ns1:GetContSign */
public:
	int soap_type() const { return 2216; } /* = unique id SOAP_TYPE___ns1__GetContSign */
};
#endif

#ifndef SOAP_TYPE___ns1__GetContSignByUser
#define SOAP_TYPE___ns1__GetContSignByUser (2220)
/* Operation wrapper: */
struct __ns1__GetContSignByUser
{
public:
	ns1__GetContSignByUser *ns1__GetContSignByUser_;	/* optional element of type ns1:GetContSignByUser */
public:
	int soap_type() const { return 2220; } /* = unique id SOAP_TYPE___ns1__GetContSignByUser */
};
#endif

#ifndef SOAP_TYPE___ns1__ModSign
#define SOAP_TYPE___ns1__ModSign (2224)
/* Operation wrapper: */
struct __ns1__ModSign
{
public:
	ns1__ModSign *ns1__ModSign_;	/* optional element of type ns1:ModSign */
public:
	int soap_type() const { return 2224; } /* = unique id SOAP_TYPE___ns1__ModSign */
};
#endif

#ifndef SOAP_TYPE___ns1__AddUserSettings
#define SOAP_TYPE___ns1__AddUserSettings (2228)
/* Operation wrapper: */
struct __ns1__AddUserSettings
{
public:
	ns1__AddUserSettings *ns1__AddUserSettings_;	/* optional element of type ns1:AddUserSettings */
public:
	int soap_type() const { return 2228; } /* = unique id SOAP_TYPE___ns1__AddUserSettings */
};
#endif

#ifndef SOAP_TYPE___ns1__ModUserSettings
#define SOAP_TYPE___ns1__ModUserSettings (2232)
/* Operation wrapper: */
struct __ns1__ModUserSettings
{
public:
	ns1__ModUserSettings *ns1__ModUserSettings_;	/* optional element of type ns1:ModUserSettings */
public:
	int soap_type() const { return 2232; } /* = unique id SOAP_TYPE___ns1__ModUserSettings */
};
#endif

#ifndef SOAP_TYPE___ns1__DelUserSettings
#define SOAP_TYPE___ns1__DelUserSettings (2236)
/* Operation wrapper: */
struct __ns1__DelUserSettings
{
public:
	ns1__DelUserSettings *ns1__DelUserSettings_;	/* optional element of type ns1:DelUserSettings */
public:
	int soap_type() const { return 2236; } /* = unique id SOAP_TYPE___ns1__DelUserSettings */
};
#endif

#ifndef SOAP_TYPE___ns1__GetUserSettings
#define SOAP_TYPE___ns1__GetUserSettings (2240)
/* Operation wrapper: */
struct __ns1__GetUserSettings
{
public:
	ns1__GetUserSettings *ns1__GetUserSettings_;	/* optional element of type ns1:GetUserSettings */
public:
	int soap_type() const { return 2240; } /* = unique id SOAP_TYPE___ns1__GetUserSettings */
};
#endif

#ifndef SOAP_TYPE___ns1__InsertData
#define SOAP_TYPE___ns1__InsertData (2244)
/* Operation wrapper: */
struct __ns1__InsertData
{
public:
	ns1__InsertData *ns1__InsertData_;	/* optional element of type ns1:InsertData */
public:
	int soap_type() const { return 2244; } /* = unique id SOAP_TYPE___ns1__InsertData */
};
#endif

#ifndef SOAP_TYPE___ns1__CanInsertData
#define SOAP_TYPE___ns1__CanInsertData (2248)
/* Operation wrapper: */
struct __ns1__CanInsertData
{
public:
	ns1__CanInsertData *ns1__CanInsertData_;	/* optional element of type ns1:CanInsertData */
public:
	int soap_type() const { return 2248; } /* = unique id SOAP_TYPE___ns1__CanInsertData */
};
#endif

#ifndef SOAP_TYPE___ns1__CopyData
#define SOAP_TYPE___ns1__CopyData (2252)
/* Operation wrapper: */
struct __ns1__CopyData
{
public:
	ns1__CopyData *ns1__CopyData_;	/* optional element of type ns1:CopyData */
public:
	int soap_type() const { return 2252; } /* = unique id SOAP_TYPE___ns1__CopyData */
};
#endif

#ifndef SOAP_TYPE___ns1__MoveData
#define SOAP_TYPE___ns1__MoveData (2256)
/* Operation wrapper: */
struct __ns1__MoveData
{
public:
	ns1__MoveData *ns1__MoveData_;	/* optional element of type ns1:MoveData */
public:
	int soap_type() const { return 2256; } /* = unique id SOAP_TYPE___ns1__MoveData */
};
#endif

#ifndef SOAP_TYPE___ns1__ModifyData
#define SOAP_TYPE___ns1__ModifyData (2260)
/* Operation wrapper: */
struct __ns1__ModifyData
{
public:
	ns1__ModifyData *ns1__ModifyData_;	/* optional element of type ns1:ModifyData */
public:
	int soap_type() const { return 2260; } /* = unique id SOAP_TYPE___ns1__ModifyData */
};
#endif

#ifndef SOAP_TYPE___ns1__CanModifyData
#define SOAP_TYPE___ns1__CanModifyData (2264)
/* Operation wrapper: */
struct __ns1__CanModifyData
{
public:
	ns1__CanModifyData *ns1__CanModifyData_;	/* optional element of type ns1:CanModifyData */
public:
	int soap_type() const { return 2264; } /* = unique id SOAP_TYPE___ns1__CanModifyData */
};
#endif

#ifndef SOAP_TYPE___ns1__DeleteData
#define SOAP_TYPE___ns1__DeleteData (2268)
/* Operation wrapper: */
struct __ns1__DeleteData
{
public:
	ns1__DeleteData *ns1__DeleteData_;	/* optional element of type ns1:DeleteData */
public:
	int soap_type() const { return 2268; } /* = unique id SOAP_TYPE___ns1__DeleteData */
};
#endif

#ifndef SOAP_TYPE___ns1__CanDeleteData
#define SOAP_TYPE___ns1__CanDeleteData (2272)
/* Operation wrapper: */
struct __ns1__CanDeleteData
{
public:
	ns1__CanDeleteData *ns1__CanDeleteData_;	/* optional element of type ns1:CanDeleteData */
public:
	int soap_type() const { return 2272; } /* = unique id SOAP_TYPE___ns1__CanDeleteData */
};
#endif

#ifndef SOAP_TYPE___ns1__GetData
#define SOAP_TYPE___ns1__GetData (2276)
/* Operation wrapper: */
struct __ns1__GetData
{
public:
	ns1__GetData *ns1__GetData_;	/* optional element of type ns1:GetData */
public:
	int soap_type() const { return 2276; } /* = unique id SOAP_TYPE___ns1__GetData */
};
#endif

#ifndef SOAP_TYPE___ns1__GetDataLimit
#define SOAP_TYPE___ns1__GetDataLimit (2280)
/* Operation wrapper: */
struct __ns1__GetDataLimit
{
public:
	ns1__GetDataLimit *ns1__GetDataLimit_;	/* optional element of type ns1:GetDataLimit */
public:
	int soap_type() const { return 2280; } /* = unique id SOAP_TYPE___ns1__GetDataLimit */
};
#endif

#ifndef SOAP_TYPE___ns1__GetDataByIdForSecurity
#define SOAP_TYPE___ns1__GetDataByIdForSecurity (2284)
/* Operation wrapper: */
struct __ns1__GetDataByIdForSecurity
{
public:
	ns1__GetDataByIdForSecurity *ns1__GetDataByIdForSecurity_;	/* optional element of type ns1:GetDataByIdForSecurity */
public:
	int soap_type() const { return 2284; } /* = unique id SOAP_TYPE___ns1__GetDataByIdForSecurity */
};
#endif

#ifndef SOAP_TYPE___ns1__GetDataById
#define SOAP_TYPE___ns1__GetDataById (2288)
/* Operation wrapper: */
struct __ns1__GetDataById
{
public:
	ns1__GetDataById *ns1__GetDataById_;	/* optional element of type ns1:GetDataById */
public:
	int soap_type() const { return 2288; } /* = unique id SOAP_TYPE___ns1__GetDataById */
};
#endif

#ifndef SOAP_TYPE___ns1__GetDataCountWithoutPermission
#define SOAP_TYPE___ns1__GetDataCountWithoutPermission (2292)
/* Operation wrapper: */
struct __ns1__GetDataCountWithoutPermission
{
public:
	ns1__GetDataCountWithoutPermission *ns1__GetDataCountWithoutPermission_;	/* optional element of type ns1:GetDataCountWithoutPermission */
public:
	int soap_type() const { return 2292; } /* = unique id SOAP_TYPE___ns1__GetDataCountWithoutPermission */
};
#endif

#ifndef SOAP_TYPE___ns1__GetDataCountWithPermission
#define SOAP_TYPE___ns1__GetDataCountWithPermission (2296)
/* Operation wrapper: */
struct __ns1__GetDataCountWithPermission
{
public:
	ns1__GetDataCountWithPermission *ns1__GetDataCountWithPermission_;	/* optional element of type ns1:GetDataCountWithPermission */
public:
	int soap_type() const { return 2296; } /* = unique id SOAP_TYPE___ns1__GetDataCountWithPermission */
};
#endif

#ifndef SOAP_TYPE___ns1__InsertProtocol
#define SOAP_TYPE___ns1__InsertProtocol (2300)
/* Operation wrapper: */
struct __ns1__InsertProtocol
{
public:
	ns1__InsertProtocol *ns1__InsertProtocol_;	/* optional element of type ns1:InsertProtocol */
public:
	int soap_type() const { return 2300; } /* = unique id SOAP_TYPE___ns1__InsertProtocol */
};
#endif

#ifndef SOAP_TYPE___ns1__EditProtocol
#define SOAP_TYPE___ns1__EditProtocol (2304)
/* Operation wrapper: */
struct __ns1__EditProtocol
{
public:
	ns1__EditProtocol *ns1__EditProtocol_;	/* optional element of type ns1:EditProtocol */
public:
	int soap_type() const { return 2304; } /* = unique id SOAP_TYPE___ns1__EditProtocol */
};
#endif

#ifndef SOAP_TYPE___ns1__DeleteProtocol
#define SOAP_TYPE___ns1__DeleteProtocol (2308)
/* Operation wrapper: */
struct __ns1__DeleteProtocol
{
public:
	ns1__DeleteProtocol *ns1__DeleteProtocol_;	/* optional element of type ns1:DeleteProtocol */
public:
	int soap_type() const { return 2308; } /* = unique id SOAP_TYPE___ns1__DeleteProtocol */
};
#endif

#ifndef SOAP_TYPE___ns1__ShowProtocol
#define SOAP_TYPE___ns1__ShowProtocol (2312)
/* Operation wrapper: */
struct __ns1__ShowProtocol
{
public:
	ns1__ShowProtocol *ns1__ShowProtocol_;	/* optional element of type ns1:ShowProtocol */
public:
	int soap_type() const { return 2312; } /* = unique id SOAP_TYPE___ns1__ShowProtocol */
};
#endif

#ifndef SOAP_TYPE___ns1__GetProtocolList
#define SOAP_TYPE___ns1__GetProtocolList (2316)
/* Operation wrapper: */
struct __ns1__GetProtocolList
{
public:
	ns1__GetProtocolList *ns1__GetProtocolList_;	/* optional element of type ns1:GetProtocolList */
public:
	int soap_type() const { return 2316; } /* = unique id SOAP_TYPE___ns1__GetProtocolList */
};
#endif

#ifndef SOAP_TYPE___ns1__GetProtocolById
#define SOAP_TYPE___ns1__GetProtocolById (2320)
/* Operation wrapper: */
struct __ns1__GetProtocolById
{
public:
	ns1__GetProtocolById *ns1__GetProtocolById_;	/* optional element of type ns1:GetProtocolById */
public:
	int soap_type() const { return 2320; } /* = unique id SOAP_TYPE___ns1__GetProtocolById */
};
#endif

#ifndef SOAP_TYPE___ns1__GetProtocolByName
#define SOAP_TYPE___ns1__GetProtocolByName (2324)
/* Operation wrapper: */
struct __ns1__GetProtocolByName
{
public:
	ns1__GetProtocolByName *ns1__GetProtocolByName_;	/* optional element of type ns1:GetProtocolByName */
public:
	int soap_type() const { return 2324; } /* = unique id SOAP_TYPE___ns1__GetProtocolByName */
};
#endif

#ifndef SOAP_TYPE___ns1__GetProtocolByDesc
#define SOAP_TYPE___ns1__GetProtocolByDesc (2328)
/* Operation wrapper: */
struct __ns1__GetProtocolByDesc
{
public:
	ns1__GetProtocolByDesc *ns1__GetProtocolByDesc_;	/* optional element of type ns1:GetProtocolByDesc */
public:
	int soap_type() const { return 2328; } /* = unique id SOAP_TYPE___ns1__GetProtocolByDesc */
};
#endif

#ifndef SOAP_TYPE___ns1__GetProtocolByNameDesc
#define SOAP_TYPE___ns1__GetProtocolByNameDesc (2332)
/* Operation wrapper: */
struct __ns1__GetProtocolByNameDesc
{
public:
	ns1__GetProtocolByNameDesc *ns1__GetProtocolByNameDesc_;	/* optional element of type ns1:GetProtocolByNameDesc */
public:
	int soap_type() const { return 2332; } /* = unique id SOAP_TYPE___ns1__GetProtocolByNameDesc */
};
#endif

#ifndef SOAP_TYPE___ns1__CanUseProtocol
#define SOAP_TYPE___ns1__CanUseProtocol (2336)
/* Operation wrapper: */
struct __ns1__CanUseProtocol
{
public:
	ns1__CanUseProtocol *ns1__CanUseProtocol_;	/* optional element of type ns1:CanUseProtocol */
public:
	int soap_type() const { return 2336; } /* = unique id SOAP_TYPE___ns1__CanUseProtocol */
};
#endif

#ifndef SOAP_TYPE___ns1__CanAddNewYear
#define SOAP_TYPE___ns1__CanAddNewYear (2340)
/* Operation wrapper: */
struct __ns1__CanAddNewYear
{
public:
	ns1__CanAddNewYear *ns1__CanAddNewYear_;	/* optional element of type ns1:CanAddNewYear */
public:
	int soap_type() const { return 2340; } /* = unique id SOAP_TYPE___ns1__CanAddNewYear */
};
#endif

#ifndef SOAP_TYPE___ns1__CanAddNewDate
#define SOAP_TYPE___ns1__CanAddNewDate (2344)
/* Operation wrapper: */
struct __ns1__CanAddNewDate
{
public:
	ns1__CanAddNewDate *ns1__CanAddNewDate_;	/* optional element of type ns1:CanAddNewDate */
public:
	int soap_type() const { return 2344; } /* = unique id SOAP_TYPE___ns1__CanAddNewDate */
};
#endif

#ifndef SOAP_TYPE___ns1__CanInsertProtocol
#define SOAP_TYPE___ns1__CanInsertProtocol (2348)
/* Operation wrapper: */
struct __ns1__CanInsertProtocol
{
public:
	ns1__CanInsertProtocol *ns1__CanInsertProtocol_;	/* optional element of type ns1:CanInsertProtocol */
public:
	int soap_type() const { return 2348; } /* = unique id SOAP_TYPE___ns1__CanInsertProtocol */
};
#endif

#ifndef SOAP_TYPE___ns1__CanEditProtocol
#define SOAP_TYPE___ns1__CanEditProtocol (2352)
/* Operation wrapper: */
struct __ns1__CanEditProtocol
{
public:
	ns1__CanEditProtocol *ns1__CanEditProtocol_;	/* optional element of type ns1:CanEditProtocol */
public:
	int soap_type() const { return 2352; } /* = unique id SOAP_TYPE___ns1__CanEditProtocol */
};
#endif

#ifndef SOAP_TYPE___ns1__CanDeleteProtocol
#define SOAP_TYPE___ns1__CanDeleteProtocol (2356)
/* Operation wrapper: */
struct __ns1__CanDeleteProtocol
{
public:
	ns1__CanDeleteProtocol *ns1__CanDeleteProtocol_;	/* optional element of type ns1:CanDeleteProtocol */
public:
	int soap_type() const { return 2356; } /* = unique id SOAP_TYPE___ns1__CanDeleteProtocol */
};
#endif

#ifndef SOAP_TYPE___ns1__GetNewProtocolNumber
#define SOAP_TYPE___ns1__GetNewProtocolNumber (2360)
/* Operation wrapper: */
struct __ns1__GetNewProtocolNumber
{
public:
	ns1__GetNewProtocolNumber *ns1__GetNewProtocolNumber_;	/* optional element of type ns1:GetNewProtocolNumber */
public:
	int soap_type() const { return 2360; } /* = unique id SOAP_TYPE___ns1__GetNewProtocolNumber */
};
#endif

#ifndef SOAP_TYPE___ns1__SetTmpUSDownloadPath
#define SOAP_TYPE___ns1__SetTmpUSDownloadPath (2364)
/* Operation wrapper: */
struct __ns1__SetTmpUSDownloadPath
{
public:
	ns1__SetTmpUSDownloadPath *ns1__SetTmpUSDownloadPath_;	/* optional element of type ns1:SetTmpUSDownloadPath */
public:
	int soap_type() const { return 2364; } /* = unique id SOAP_TYPE___ns1__SetTmpUSDownloadPath */
};
#endif

#ifndef SOAP_TYPE___ns1__SetTmpUSUploadPath
#define SOAP_TYPE___ns1__SetTmpUSUploadPath (2368)
/* Operation wrapper: */
struct __ns1__SetTmpUSUploadPath
{
public:
	ns1__SetTmpUSUploadPath *ns1__SetTmpUSUploadPath_;	/* optional element of type ns1:SetTmpUSUploadPath */
public:
	int soap_type() const { return 2368; } /* = unique id SOAP_TYPE___ns1__SetTmpUSUploadPath */
};
#endif

#ifndef SOAP_TYPE___ns1__UploadUSEndFile
#define SOAP_TYPE___ns1__UploadUSEndFile (2372)
/* Operation wrapper: */
struct __ns1__UploadUSEndFile
{
public:
	ns1__UploadUSEndFile *ns1__UploadUSEndFile_;	/* optional element of type ns1:UploadUSEndFile */
public:
	int soap_type() const { return 2372; } /* = unique id SOAP_TYPE___ns1__UploadUSEndFile */
};
#endif

#ifndef SOAP_TYPE___ns1__UploadUSEndFileWithUser
#define SOAP_TYPE___ns1__UploadUSEndFileWithUser (2376)
/* Operation wrapper: */
struct __ns1__UploadUSEndFileWithUser
{
public:
	ns1__UploadUSEndFileWithUser *ns1__UploadUSEndFileWithUser_;	/* optional element of type ns1:UploadUSEndFileWithUser */
public:
	int soap_type() const { return 2376; } /* = unique id SOAP_TYPE___ns1__UploadUSEndFileWithUser */
};
#endif

#ifndef SOAP_TYPE___ns1__UploadUSSendChunk
#define SOAP_TYPE___ns1__UploadUSSendChunk (2380)
/* Operation wrapper: */
struct __ns1__UploadUSSendChunk
{
public:
	ns1__UploadUSSendChunk *ns1__UploadUSSendChunk_;	/* optional element of type ns1:UploadUSSendChunk */
public:
	int soap_type() const { return 2380; } /* = unique id SOAP_TYPE___ns1__UploadUSSendChunk */
};
#endif

#ifndef SOAP_TYPE___ns1__DownloadUSGetNext
#define SOAP_TYPE___ns1__DownloadUSGetNext (2384)
/* Operation wrapper: */
struct __ns1__DownloadUSGetNext
{
public:
	ns1__DownloadUSGetNext *ns1__DownloadUSGetNext_;	/* optional element of type ns1:DownloadUSGetNext */
public:
	int soap_type() const { return 2384; } /* = unique id SOAP_TYPE___ns1__DownloadUSGetNext */
};
#endif

#ifndef SOAP_TYPE___ns1__DownloadUSGetChunk
#define SOAP_TYPE___ns1__DownloadUSGetChunk (2388)
/* Operation wrapper: */
struct __ns1__DownloadUSGetChunk
{
public:
	ns1__DownloadUSGetChunk *ns1__DownloadUSGetChunk_;	/* optional element of type ns1:DownloadUSGetChunk */
public:
	int soap_type() const { return 2388; } /* = unique id SOAP_TYPE___ns1__DownloadUSGetChunk */
};
#endif

#ifndef SOAP_TYPE___ns1__DownloadUSFile
#define SOAP_TYPE___ns1__DownloadUSFile (2392)
/* Operation wrapper: */
struct __ns1__DownloadUSFile
{
public:
	ns1__DownloadUSFile *ns1__DownloadUSFile_;	/* optional element of type ns1:DownloadUSFile */
public:
	int soap_type() const { return 2392; } /* = unique id SOAP_TYPE___ns1__DownloadUSFile */
};
#endif

#ifndef SOAP_TYPE___ns1__GetDataUSFileDetail
#define SOAP_TYPE___ns1__GetDataUSFileDetail (2396)
/* Operation wrapper: */
struct __ns1__GetDataUSFileDetail
{
public:
	ns1__GetDataUSFileDetail *ns1__GetDataUSFileDetail_;	/* optional element of type ns1:GetDataUSFileDetail */
public:
	int soap_type() const { return 2396; } /* = unique id SOAP_TYPE___ns1__GetDataUSFileDetail */
};
#endif

#ifndef SOAP_TYPE___ns1__GetDataUSFileList
#define SOAP_TYPE___ns1__GetDataUSFileList (2400)
/* Operation wrapper: */
struct __ns1__GetDataUSFileList
{
public:
	ns1__GetDataUSFileList *ns1__GetDataUSFileList_;	/* optional element of type ns1:GetDataUSFileList */
public:
	int soap_type() const { return 2400; } /* = unique id SOAP_TYPE___ns1__GetDataUSFileList */
};
#endif

#ifndef SOAP_TYPE___ns1__GetDataUSFileListByUsername
#define SOAP_TYPE___ns1__GetDataUSFileListByUsername (2404)
/* Operation wrapper: */
struct __ns1__GetDataUSFileListByUsername
{
public:
	ns1__GetDataUSFileListByUsername *ns1__GetDataUSFileListByUsername_;	/* optional element of type ns1:GetDataUSFileListByUsername */
public:
	int soap_type() const { return 2404; } /* = unique id SOAP_TYPE___ns1__GetDataUSFileListByUsername */
};
#endif

#ifndef SOAP_TYPE___ns1__InsertUSFile
#define SOAP_TYPE___ns1__InsertUSFile (2408)
/* Operation wrapper: */
struct __ns1__InsertUSFile
{
public:
	ns1__InsertUSFile *ns1__InsertUSFile_;	/* optional element of type ns1:InsertUSFile */
public:
	int soap_type() const { return 2408; } /* = unique id SOAP_TYPE___ns1__InsertUSFile */
};
#endif

#ifndef SOAP_TYPE___ns1__InsertUSFileWithUser
#define SOAP_TYPE___ns1__InsertUSFileWithUser (2412)
/* Operation wrapper: */
struct __ns1__InsertUSFileWithUser
{
public:
	ns1__InsertUSFileWithUser *ns1__InsertUSFileWithUser_;	/* optional element of type ns1:InsertUSFileWithUser */
public:
	int soap_type() const { return 2412; } /* = unique id SOAP_TYPE___ns1__InsertUSFileWithUser */
};
#endif

#ifndef SOAP_TYPE___ns1__DeleteUSFileById
#define SOAP_TYPE___ns1__DeleteUSFileById (2416)
/* Operation wrapper: */
struct __ns1__DeleteUSFileById
{
public:
	ns1__DeleteUSFileById *ns1__DeleteUSFileById_;	/* optional element of type ns1:DeleteUSFileById */
public:
	int soap_type() const { return 2416; } /* = unique id SOAP_TYPE___ns1__DeleteUSFileById */
};
#endif

#ifndef SOAP_TYPE___ns1__DeleteUSFileByCode
#define SOAP_TYPE___ns1__DeleteUSFileByCode (2420)
/* Operation wrapper: */
struct __ns1__DeleteUSFileByCode
{
public:
	ns1__DeleteUSFileByCode *ns1__DeleteUSFileByCode_;	/* optional element of type ns1:DeleteUSFileByCode */
public:
	int soap_type() const { return 2420; } /* = unique id SOAP_TYPE___ns1__DeleteUSFileByCode */
};
#endif

#ifndef SOAP_TYPE___ns1__SetTmpWFDownloadPath
#define SOAP_TYPE___ns1__SetTmpWFDownloadPath (2424)
/* Operation wrapper: */
struct __ns1__SetTmpWFDownloadPath
{
public:
	ns1__SetTmpWFDownloadPath *ns1__SetTmpWFDownloadPath_;	/* optional element of type ns1:SetTmpWFDownloadPath */
public:
	int soap_type() const { return 2424; } /* = unique id SOAP_TYPE___ns1__SetTmpWFDownloadPath */
};
#endif

#ifndef SOAP_TYPE___ns1__SetTmpWFUploadPath
#define SOAP_TYPE___ns1__SetTmpWFUploadPath (2428)
/* Operation wrapper: */
struct __ns1__SetTmpWFUploadPath
{
public:
	ns1__SetTmpWFUploadPath *ns1__SetTmpWFUploadPath_;	/* optional element of type ns1:SetTmpWFUploadPath */
public:
	int soap_type() const { return 2428; } /* = unique id SOAP_TYPE___ns1__SetTmpWFUploadPath */
};
#endif

#ifndef SOAP_TYPE___ns1__UploadWFEndFile
#define SOAP_TYPE___ns1__UploadWFEndFile (2432)
/* Operation wrapper: */
struct __ns1__UploadWFEndFile
{
public:
	ns1__UploadWFEndFile *ns1__UploadWFEndFile_;	/* optional element of type ns1:UploadWFEndFile */
public:
	int soap_type() const { return 2432; } /* = unique id SOAP_TYPE___ns1__UploadWFEndFile */
};
#endif

#ifndef SOAP_TYPE___ns1__UploadWFSendChunk
#define SOAP_TYPE___ns1__UploadWFSendChunk (2436)
/* Operation wrapper: */
struct __ns1__UploadWFSendChunk
{
public:
	ns1__UploadWFSendChunk *ns1__UploadWFSendChunk_;	/* optional element of type ns1:UploadWFSendChunk */
public:
	int soap_type() const { return 2436; } /* = unique id SOAP_TYPE___ns1__UploadWFSendChunk */
};
#endif

#ifndef SOAP_TYPE___ns1__DownloadWFEndFile
#define SOAP_TYPE___ns1__DownloadWFEndFile (2440)
/* Operation wrapper: */
struct __ns1__DownloadWFEndFile
{
public:
	ns1__DownloadWFEndFile *ns1__DownloadWFEndFile_;	/* optional element of type ns1:DownloadWFEndFile */
public:
	int soap_type() const { return 2440; } /* = unique id SOAP_TYPE___ns1__DownloadWFEndFile */
};
#endif

#ifndef SOAP_TYPE___ns1__DownloadWFFile
#define SOAP_TYPE___ns1__DownloadWFFile (2444)
/* Operation wrapper: */
struct __ns1__DownloadWFFile
{
public:
	ns1__DownloadWFFile *ns1__DownloadWFFile_;	/* optional element of type ns1:DownloadWFFile */
public:
	int soap_type() const { return 2444; } /* = unique id SOAP_TYPE___ns1__DownloadWFFile */
};
#endif

#ifndef SOAP_TYPE___ns1__GetDataWFFileDetail
#define SOAP_TYPE___ns1__GetDataWFFileDetail (2448)
/* Operation wrapper: */
struct __ns1__GetDataWFFileDetail
{
public:
	ns1__GetDataWFFileDetail *ns1__GetDataWFFileDetail_;	/* optional element of type ns1:GetDataWFFileDetail */
public:
	int soap_type() const { return 2448; } /* = unique id SOAP_TYPE___ns1__GetDataWFFileDetail */
};
#endif

#ifndef SOAP_TYPE___ns1__GetDataWFFileList
#define SOAP_TYPE___ns1__GetDataWFFileList (2452)
/* Operation wrapper: */
struct __ns1__GetDataWFFileList
{
public:
	ns1__GetDataWFFileList *ns1__GetDataWFFileList_;	/* optional element of type ns1:GetDataWFFileList */
public:
	int soap_type() const { return 2452; } /* = unique id SOAP_TYPE___ns1__GetDataWFFileList */
};
#endif

#ifndef SOAP_TYPE___ns1__InsertWFFile
#define SOAP_TYPE___ns1__InsertWFFile (2456)
/* Operation wrapper: */
struct __ns1__InsertWFFile
{
public:
	ns1__InsertWFFile *ns1__InsertWFFile_;	/* optional element of type ns1:InsertWFFile */
public:
	int soap_type() const { return 2456; } /* = unique id SOAP_TYPE___ns1__InsertWFFile */
};
#endif

#ifndef SOAP_TYPE___ns1__DeleteWFFileById
#define SOAP_TYPE___ns1__DeleteWFFileById (2460)
/* Operation wrapper: */
struct __ns1__DeleteWFFileById
{
public:
	ns1__DeleteWFFileById *ns1__DeleteWFFileById_;	/* optional element of type ns1:DeleteWFFileById */
public:
	int soap_type() const { return 2460; } /* = unique id SOAP_TYPE___ns1__DeleteWFFileById */
};
#endif

#ifndef SOAP_TYPE___ns1__DeleteWFFileByCode
#define SOAP_TYPE___ns1__DeleteWFFileByCode (2464)
/* Operation wrapper: */
struct __ns1__DeleteWFFileByCode
{
public:
	ns1__DeleteWFFileByCode *ns1__DeleteWFFileByCode_;	/* optional element of type ns1:DeleteWFFileByCode */
public:
	int soap_type() const { return 2464; } /* = unique id SOAP_TYPE___ns1__DeleteWFFileByCode */
};
#endif

#ifndef SOAP_TYPE___ns1__TestLettura
#define SOAP_TYPE___ns1__TestLettura (2468)
/* Operation wrapper: */
struct __ns1__TestLettura
{
public:
	ns1__TestLettura *ns1__TestLettura_;	/* optional element of type ns1:TestLettura */
public:
	int soap_type() const { return 2468; } /* = unique id SOAP_TYPE___ns1__TestLettura */
};
#endif

#ifndef SOAP_TYPE___ns1__TestScritturaLettura
#define SOAP_TYPE___ns1__TestScritturaLettura (2472)
/* Operation wrapper: */
struct __ns1__TestScritturaLettura
{
public:
	ns1__TestScritturaLettura *ns1__TestScritturaLettura_;	/* optional element of type ns1:TestScritturaLettura */
public:
	int soap_type() const { return 2472; } /* = unique id SOAP_TYPE___ns1__TestScritturaLettura */
};
#endif

#ifndef SOAP_TYPE___ns1__SaveChars
#define SOAP_TYPE___ns1__SaveChars (2476)
/* Operation wrapper: */
struct __ns1__SaveChars
{
public:
	ns1__SaveChars *ns1__SaveChars_;	/* optional element of type ns1:SaveChars */
public:
	int soap_type() const { return 2476; } /* = unique id SOAP_TYPE___ns1__SaveChars */
};
#endif

#ifndef SOAP_TYPE___ns1__AddUser
#define SOAP_TYPE___ns1__AddUser (2480)
/* Operation wrapper: */
struct __ns1__AddUser
{
public:
	ns1__AddUser *ns1__AddUser_;	/* optional element of type ns1:AddUser */
public:
	int soap_type() const { return 2480; } /* = unique id SOAP_TYPE___ns1__AddUser */
};
#endif

#ifndef SOAP_TYPE___ns1__ModUser
#define SOAP_TYPE___ns1__ModUser (2484)
/* Operation wrapper: */
struct __ns1__ModUser
{
public:
	ns1__ModUser *ns1__ModUser_;	/* optional element of type ns1:ModUser */
public:
	int soap_type() const { return 2484; } /* = unique id SOAP_TYPE___ns1__ModUser */
};
#endif

#ifndef SOAP_TYPE___ns1__VerifyExpression
#define SOAP_TYPE___ns1__VerifyExpression (2488)
/* Operation wrapper: */
struct __ns1__VerifyExpression
{
public:
	ns1__VerifyExpression *ns1__VerifyExpression_;	/* optional element of type ns1:VerifyExpression */
public:
	int soap_type() const { return 2488; } /* = unique id SOAP_TYPE___ns1__VerifyExpression */
};
#endif

#ifndef SOAP_TYPE___ns1__AddExpression
#define SOAP_TYPE___ns1__AddExpression (2492)
/* Operation wrapper: */
struct __ns1__AddExpression
{
public:
	ns1__AddExpression *ns1__AddExpression_;	/* optional element of type ns1:AddExpression */
public:
	int soap_type() const { return 2492; } /* = unique id SOAP_TYPE___ns1__AddExpression */
};
#endif

#ifndef SOAP_TYPE___ns1__ModExpression
#define SOAP_TYPE___ns1__ModExpression (2496)
/* Operation wrapper: */
struct __ns1__ModExpression
{
public:
	ns1__ModExpression *ns1__ModExpression_;	/* optional element of type ns1:ModExpression */
public:
	int soap_type() const { return 2496; } /* = unique id SOAP_TYPE___ns1__ModExpression */
};
#endif

#ifndef SOAP_TYPE___ns1__DelExpression
#define SOAP_TYPE___ns1__DelExpression (2500)
/* Operation wrapper: */
struct __ns1__DelExpression
{
public:
	ns1__DelExpression *ns1__DelExpression_;	/* optional element of type ns1:DelExpression */
public:
	int soap_type() const { return 2500; } /* = unique id SOAP_TYPE___ns1__DelExpression */
};
#endif

#ifndef SOAP_TYPE___ns1__GetExpression
#define SOAP_TYPE___ns1__GetExpression (2504)
/* Operation wrapper: */
struct __ns1__GetExpression
{
public:
	ns1__GetExpression *ns1__GetExpression_;	/* optional element of type ns1:GetExpression */
public:
	int soap_type() const { return 2504; } /* = unique id SOAP_TYPE___ns1__GetExpression */
};
#endif

#ifndef SOAP_TYPE___ns1__GetAllContainerExpressions
#define SOAP_TYPE___ns1__GetAllContainerExpressions (2508)
/* Operation wrapper: */
struct __ns1__GetAllContainerExpressions
{
public:
	ns1__GetAllContainerExpressions *ns1__GetAllContainerExpressions_;	/* optional element of type ns1:GetAllContainerExpressions */
public:
	int soap_type() const { return 2508; } /* = unique id SOAP_TYPE___ns1__GetAllContainerExpressions */
};
#endif

#ifndef SOAP_TYPE___ns1__GetExpressionValue
#define SOAP_TYPE___ns1__GetExpressionValue (2512)
/* Operation wrapper: */
struct __ns1__GetExpressionValue
{
public:
	ns1__GetExpressionValue *ns1__GetExpressionValue_;	/* optional element of type ns1:GetExpressionValue */
public:
	int soap_type() const { return 2512; } /* = unique id SOAP_TYPE___ns1__GetExpressionValue */
};
#endif

#ifndef SOAP_TYPE___ns1__SetTmpTPDownloadPath
#define SOAP_TYPE___ns1__SetTmpTPDownloadPath (2516)
/* Operation wrapper: */
struct __ns1__SetTmpTPDownloadPath
{
public:
	ns1__SetTmpTPDownloadPath *ns1__SetTmpTPDownloadPath_;	/* optional element of type ns1:SetTmpTPDownloadPath */
public:
	int soap_type() const { return 2516; } /* = unique id SOAP_TYPE___ns1__SetTmpTPDownloadPath */
};
#endif

#ifndef SOAP_TYPE___ns1__SetTmpTPUploadPath
#define SOAP_TYPE___ns1__SetTmpTPUploadPath (2520)
/* Operation wrapper: */
struct __ns1__SetTmpTPUploadPath
{
public:
	ns1__SetTmpTPUploadPath *ns1__SetTmpTPUploadPath_;	/* optional element of type ns1:SetTmpTPUploadPath */
public:
	int soap_type() const { return 2520; } /* = unique id SOAP_TYPE___ns1__SetTmpTPUploadPath */
};
#endif

#ifndef SOAP_TYPE___ns1__UploadTPEndFile
#define SOAP_TYPE___ns1__UploadTPEndFile (2524)
/* Operation wrapper: */
struct __ns1__UploadTPEndFile
{
public:
	ns1__UploadTPEndFile *ns1__UploadTPEndFile_;	/* optional element of type ns1:UploadTPEndFile */
public:
	int soap_type() const { return 2524; } /* = unique id SOAP_TYPE___ns1__UploadTPEndFile */
};
#endif

#ifndef SOAP_TYPE___ns1__UploadTPSendChunk
#define SOAP_TYPE___ns1__UploadTPSendChunk (2528)
/* Operation wrapper: */
struct __ns1__UploadTPSendChunk
{
public:
	ns1__UploadTPSendChunk *ns1__UploadTPSendChunk_;	/* optional element of type ns1:UploadTPSendChunk */
public:
	int soap_type() const { return 2528; } /* = unique id SOAP_TYPE___ns1__UploadTPSendChunk */
};
#endif

#ifndef SOAP_TYPE___ns1__DownloadTPEndFile
#define SOAP_TYPE___ns1__DownloadTPEndFile (2532)
/* Operation wrapper: */
struct __ns1__DownloadTPEndFile
{
public:
	ns1__DownloadTPEndFile *ns1__DownloadTPEndFile_;	/* optional element of type ns1:DownloadTPEndFile */
public:
	int soap_type() const { return 2532; } /* = unique id SOAP_TYPE___ns1__DownloadTPEndFile */
};
#endif

#ifndef SOAP_TYPE___ns1__DownloadTPFile
#define SOAP_TYPE___ns1__DownloadTPFile (2536)
/* Operation wrapper: */
struct __ns1__DownloadTPFile
{
public:
	ns1__DownloadTPFile *ns1__DownloadTPFile_;	/* optional element of type ns1:DownloadTPFile */
public:
	int soap_type() const { return 2536; } /* = unique id SOAP_TYPE___ns1__DownloadTPFile */
};
#endif

#ifndef SOAP_TYPE___ns1__GetDataTPFileDetail
#define SOAP_TYPE___ns1__GetDataTPFileDetail (2540)
/* Operation wrapper: */
struct __ns1__GetDataTPFileDetail
{
public:
	ns1__GetDataTPFileDetail *ns1__GetDataTPFileDetail_;	/* optional element of type ns1:GetDataTPFileDetail */
public:
	int soap_type() const { return 2540; } /* = unique id SOAP_TYPE___ns1__GetDataTPFileDetail */
};
#endif

#ifndef SOAP_TYPE___ns1__GetDataTPFileList
#define SOAP_TYPE___ns1__GetDataTPFileList (2544)
/* Operation wrapper: */
struct __ns1__GetDataTPFileList
{
public:
	ns1__GetDataTPFileList *ns1__GetDataTPFileList_;	/* optional element of type ns1:GetDataTPFileList */
public:
	int soap_type() const { return 2544; } /* = unique id SOAP_TYPE___ns1__GetDataTPFileList */
};
#endif

#ifndef SOAP_TYPE___ns1__InsertTPFile
#define SOAP_TYPE___ns1__InsertTPFile (2548)
/* Operation wrapper: */
struct __ns1__InsertTPFile
{
public:
	ns1__InsertTPFile *ns1__InsertTPFile_;	/* optional element of type ns1:InsertTPFile */
public:
	int soap_type() const { return 2548; } /* = unique id SOAP_TYPE___ns1__InsertTPFile */
};
#endif

#ifndef SOAP_TYPE___ns1__DeleteTPFileById
#define SOAP_TYPE___ns1__DeleteTPFileById (2552)
/* Operation wrapper: */
struct __ns1__DeleteTPFileById
{
public:
	ns1__DeleteTPFileById *ns1__DeleteTPFileById_;	/* optional element of type ns1:DeleteTPFileById */
public:
	int soap_type() const { return 2552; } /* = unique id SOAP_TYPE___ns1__DeleteTPFileById */
};
#endif

#ifndef SOAP_TYPE___ns1__DeleteTPFileByCode
#define SOAP_TYPE___ns1__DeleteTPFileByCode (2556)
/* Operation wrapper: */
struct __ns1__DeleteTPFileByCode
{
public:
	ns1__DeleteTPFileByCode *ns1__DeleteTPFileByCode_;	/* optional element of type ns1:DeleteTPFileByCode */
public:
	int soap_type() const { return 2556; } /* = unique id SOAP_TYPE___ns1__DeleteTPFileByCode */
};
#endif

#ifndef SOAP_TYPE___ns1__GetDataTPFileListByUsername
#define SOAP_TYPE___ns1__GetDataTPFileListByUsername (2560)
/* Operation wrapper: */
struct __ns1__GetDataTPFileListByUsername
{
public:
	ns1__GetDataTPFileListByUsername *ns1__GetDataTPFileListByUsername_;	/* optional element of type ns1:GetDataTPFileListByUsername */
public:
	int soap_type() const { return 2560; } /* = unique id SOAP_TYPE___ns1__GetDataTPFileListByUsername */
};
#endif

#ifndef SOAP_TYPE___ns1__GetDataTPFileListByContainer
#define SOAP_TYPE___ns1__GetDataTPFileListByContainer (2564)
/* Operation wrapper: */
struct __ns1__GetDataTPFileListByContainer
{
public:
	ns1__GetDataTPFileListByContainer *ns1__GetDataTPFileListByContainer_;	/* optional element of type ns1:GetDataTPFileListByContainer */
public:
	int soap_type() const { return 2564; } /* = unique id SOAP_TYPE___ns1__GetDataTPFileListByContainer */
};
#endif

#ifndef SOAP_TYPE___ns1__GetDataTPFileListByDocument
#define SOAP_TYPE___ns1__GetDataTPFileListByDocument (2568)
/* Operation wrapper: */
struct __ns1__GetDataTPFileListByDocument
{
public:
	ns1__GetDataTPFileListByDocument *ns1__GetDataTPFileListByDocument_;	/* optional element of type ns1:GetDataTPFileListByDocument */
public:
	int soap_type() const { return 2568; } /* = unique id SOAP_TYPE___ns1__GetDataTPFileListByDocument */
};
#endif

#ifndef SOAP_TYPE___ns1__GetDataTPFileListByName
#define SOAP_TYPE___ns1__GetDataTPFileListByName (2572)
/* Operation wrapper: */
struct __ns1__GetDataTPFileListByName
{
public:
	ns1__GetDataTPFileListByName *ns1__GetDataTPFileListByName_;	/* optional element of type ns1:GetDataTPFileListByName */
public:
	int soap_type() const { return 2572; } /* = unique id SOAP_TYPE___ns1__GetDataTPFileListByName */
};
#endif

#ifndef SOAP_TYPE___ns1__GetDefaultObjActList
#define SOAP_TYPE___ns1__GetDefaultObjActList (2576)
/* Operation wrapper: */
struct __ns1__GetDefaultObjActList
{
public:
	ns1__GetDefaultObjActList *ns1__GetDefaultObjActList_;	/* optional element of type ns1:GetDefaultObjActList */
public:
	int soap_type() const { return 2576; } /* = unique id SOAP_TYPE___ns1__GetDefaultObjActList */
};
#endif

#ifndef SOAP_TYPE___ns1__EndPermissionSettings
#define SOAP_TYPE___ns1__EndPermissionSettings (2580)
/* Operation wrapper: */
struct __ns1__EndPermissionSettings
{
public:
	ns1__EndPermissionSettings *ns1__EndPermissionSettings_;	/* optional element of type ns1:EndPermissionSettings */
public:
	int soap_type() const { return 2580; } /* = unique id SOAP_TYPE___ns1__EndPermissionSettings */
};
#endif

#ifndef SOAP_TYPE___ns1__DownloadGetChunkWA
#define SOAP_TYPE___ns1__DownloadGetChunkWA (2584)
/* Operation wrapper: */
struct __ns1__DownloadGetChunkWA
{
public:
	ns1__DownloadGetChunkWA *ns1__DownloadGetChunkWA_;	/* optional element of type ns1:DownloadGetChunkWA */
public:
	int soap_type() const { return 2584; } /* = unique id SOAP_TYPE___ns1__DownloadGetChunkWA */
};
#endif

#ifndef SOAP_TYPE___ns1__GetSchedulerTaskByTaskTypeId
#define SOAP_TYPE___ns1__GetSchedulerTaskByTaskTypeId (2588)
/* Operation wrapper: */
struct __ns1__GetSchedulerTaskByTaskTypeId
{
public:
	ns1__GetSchedulerTaskByTaskTypeId *ns1__GetSchedulerTaskByTaskTypeId_;	/* optional element of type ns1:GetSchedulerTaskByTaskTypeId */
public:
	int soap_type() const { return 2588; } /* = unique id SOAP_TYPE___ns1__GetSchedulerTaskByTaskTypeId */
};
#endif

#ifndef SOAP_TYPE___ns1__GetAllFilter
#define SOAP_TYPE___ns1__GetAllFilter (2592)
/* Operation wrapper: */
struct __ns1__GetAllFilter
{
public:
	ns1__GetAllFilter *ns1__GetAllFilter_;	/* optional element of type ns1:GetAllFilter */
public:
	int soap_type() const { return 2592; } /* = unique id SOAP_TYPE___ns1__GetAllFilter */
};
#endif

#ifndef SOAP_TYPE___ns1__CanAddDigitalSignature
#define SOAP_TYPE___ns1__CanAddDigitalSignature (2596)
/* Operation wrapper: */
struct __ns1__CanAddDigitalSignature
{
public:
	ns1__CanAddDigitalSignature *ns1__CanAddDigitalSignature_;	/* optional element of type ns1:CanAddDigitalSignature */
public:
	int soap_type() const { return 2596; } /* = unique id SOAP_TYPE___ns1__CanAddDigitalSignature */
};
#endif

#ifndef SOAP_TYPE___ns1__GetSDKTasks
#define SOAP_TYPE___ns1__GetSDKTasks (2600)
/* Operation wrapper: */
struct __ns1__GetSDKTasks
{
public:
	ns1__GetSDKTasks *ns1__GetSDKTasks_;	/* optional element of type ns1:GetSDKTasks */
public:
	int soap_type() const { return 2600; } /* = unique id SOAP_TYPE___ns1__GetSDKTasks */
};
#endif

#ifndef SOAP_TYPE___ns1__GetSDKTaskWatchFolder
#define SOAP_TYPE___ns1__GetSDKTaskWatchFolder (2604)
/* Operation wrapper: */
struct __ns1__GetSDKTaskWatchFolder
{
public:
	ns1__GetSDKTaskWatchFolder *ns1__GetSDKTaskWatchFolder_;	/* optional element of type ns1:GetSDKTaskWatchFolder */
public:
	int soap_type() const { return 2604; } /* = unique id SOAP_TYPE___ns1__GetSDKTaskWatchFolder */
};
#endif

#ifndef SOAP_TYPE___ns1__GetSDKRules
#define SOAP_TYPE___ns1__GetSDKRules (2608)
/* Operation wrapper: */
struct __ns1__GetSDKRules
{
public:
	ns1__GetSDKRules *ns1__GetSDKRules_;	/* optional element of type ns1:GetSDKRules */
public:
	int soap_type() const { return 2608; } /* = unique id SOAP_TYPE___ns1__GetSDKRules */
};
#endif

#ifndef SOAP_TYPE___ns1__CreateSDKTask
#define SOAP_TYPE___ns1__CreateSDKTask (2612)
/* Operation wrapper: */
struct __ns1__CreateSDKTask
{
public:
	ns1__CreateSDKTask *ns1__CreateSDKTask_;	/* optional element of type ns1:CreateSDKTask */
public:
	int soap_type() const { return 2612; } /* = unique id SOAP_TYPE___ns1__CreateSDKTask */
};
#endif

#ifndef SOAP_TYPE___ns1__ModifySDKTask
#define SOAP_TYPE___ns1__ModifySDKTask (2616)
/* Operation wrapper: */
struct __ns1__ModifySDKTask
{
public:
	ns1__ModifySDKTask *ns1__ModifySDKTask_;	/* optional element of type ns1:ModifySDKTask */
public:
	int soap_type() const { return 2616; } /* = unique id SOAP_TYPE___ns1__ModifySDKTask */
};
#endif

#ifndef SOAP_TYPE___ns1__GetSDKTaskFieldMapping
#define SOAP_TYPE___ns1__GetSDKTaskFieldMapping (2620)
/* Operation wrapper: */
struct __ns1__GetSDKTaskFieldMapping
{
public:
	ns1__GetSDKTaskFieldMapping *ns1__GetSDKTaskFieldMapping_;	/* optional element of type ns1:GetSDKTaskFieldMapping */
public:
	int soap_type() const { return 2620; } /* = unique id SOAP_TYPE___ns1__GetSDKTaskFieldMapping */
};
#endif

#ifndef SOAP_TYPE___ns1__CreateSDKTaskFieldMapping
#define SOAP_TYPE___ns1__CreateSDKTaskFieldMapping (2624)
/* Operation wrapper: */
struct __ns1__CreateSDKTaskFieldMapping
{
public:
	ns1__CreateSDKTaskFieldMapping *ns1__CreateSDKTaskFieldMapping_;	/* optional element of type ns1:CreateSDKTaskFieldMapping */
public:
	int soap_type() const { return 2624; } /* = unique id SOAP_TYPE___ns1__CreateSDKTaskFieldMapping */
};
#endif

#ifndef SOAP_TYPE___ns1__DeleteSDKTaskFieldMapping
#define SOAP_TYPE___ns1__DeleteSDKTaskFieldMapping (2628)
/* Operation wrapper: */
struct __ns1__DeleteSDKTaskFieldMapping
{
public:
	ns1__DeleteSDKTaskFieldMapping *ns1__DeleteSDKTaskFieldMapping_;	/* optional element of type ns1:DeleteSDKTaskFieldMapping */
public:
	int soap_type() const { return 2628; } /* = unique id SOAP_TYPE___ns1__DeleteSDKTaskFieldMapping */
};
#endif

#ifndef SOAP_TYPE___ns1__StoreSDKVariable
#define SOAP_TYPE___ns1__StoreSDKVariable (2632)
/* Operation wrapper: */
struct __ns1__StoreSDKVariable
{
public:
	ns1__StoreSDKVariable *ns1__StoreSDKVariable_;	/* optional element of type ns1:StoreSDKVariable */
public:
	int soap_type() const { return 2632; } /* = unique id SOAP_TYPE___ns1__StoreSDKVariable */
};
#endif

#ifndef SOAP_TYPE___ns1__GetSDKVariables
#define SOAP_TYPE___ns1__GetSDKVariables (2636)
/* Operation wrapper: */
struct __ns1__GetSDKVariables
{
public:
	ns1__GetSDKVariables *ns1__GetSDKVariables_;	/* optional element of type ns1:GetSDKVariables */
public:
	int soap_type() const { return 2636; } /* = unique id SOAP_TYPE___ns1__GetSDKVariables */
};
#endif

#ifndef SOAP_TYPE___ns1__GetSDKTaskExcelPreview
#define SOAP_TYPE___ns1__GetSDKTaskExcelPreview (2640)
/* Operation wrapper: */
struct __ns1__GetSDKTaskExcelPreview
{
public:
	ns1__GetSDKTaskExcelPreview *ns1__GetSDKTaskExcelPreview_;	/* optional element of type ns1:GetSDKTaskExcelPreview */
public:
	int soap_type() const { return 2640; } /* = unique id SOAP_TYPE___ns1__GetSDKTaskExcelPreview */
};
#endif

#ifndef SOAP_TYPE___ns1__ValidateSDKTask
#define SOAP_TYPE___ns1__ValidateSDKTask (2644)
/* Operation wrapper: */
struct __ns1__ValidateSDKTask
{
public:
	ns1__ValidateSDKTask *ns1__ValidateSDKTask_;	/* optional element of type ns1:ValidateSDKTask */
public:
	int soap_type() const { return 2644; } /* = unique id SOAP_TYPE___ns1__ValidateSDKTask */
};
#endif

#ifndef SOAP_TYPE___ns1__VerifySDKTaskNameExists
#define SOAP_TYPE___ns1__VerifySDKTaskNameExists (2648)
/* Operation wrapper: */
struct __ns1__VerifySDKTaskNameExists
{
public:
	ns1__VerifySDKTaskNameExists *ns1__VerifySDKTaskNameExists_;	/* optional element of type ns1:VerifySDKTaskNameExists */
public:
	int soap_type() const { return 2648; } /* = unique id SOAP_TYPE___ns1__VerifySDKTaskNameExists */
};
#endif

#ifndef SOAP_TYPE___ns1__UploadPreviewFile
#define SOAP_TYPE___ns1__UploadPreviewFile (2652)
/* Operation wrapper: */
struct __ns1__UploadPreviewFile
{
public:
	ns1__UploadPreviewFile *ns1__UploadPreviewFile_;	/* optional element of type ns1:UploadPreviewFile */
public:
	int soap_type() const { return 2652; } /* = unique id SOAP_TYPE___ns1__UploadPreviewFile */
};
#endif

#ifndef SOAP_TYPE___ns1__CreateSDKTaskWatchFolder
#define SOAP_TYPE___ns1__CreateSDKTaskWatchFolder (2656)
/* Operation wrapper: */
struct __ns1__CreateSDKTaskWatchFolder
{
public:
	ns1__CreateSDKTaskWatchFolder *ns1__CreateSDKTaskWatchFolder_;	/* optional element of type ns1:CreateSDKTaskWatchFolder */
public:
	int soap_type() const { return 2656; } /* = unique id SOAP_TYPE___ns1__CreateSDKTaskWatchFolder */
};
#endif

#ifndef SOAP_TYPE___ns1__ModifySDKTaskWatchFolder
#define SOAP_TYPE___ns1__ModifySDKTaskWatchFolder (2660)
/* Operation wrapper: */
struct __ns1__ModifySDKTaskWatchFolder
{
public:
	ns1__ModifySDKTaskWatchFolder *ns1__ModifySDKTaskWatchFolder_;	/* optional element of type ns1:ModifySDKTaskWatchFolder */
public:
	int soap_type() const { return 2660; } /* = unique id SOAP_TYPE___ns1__ModifySDKTaskWatchFolder */
};
#endif

#ifndef SOAP_TYPE___ns1__GetSDKWatchFolderDirectories
#define SOAP_TYPE___ns1__GetSDKWatchFolderDirectories (2664)
/* Operation wrapper: */
struct __ns1__GetSDKWatchFolderDirectories
{
public:
	ns1__GetSDKWatchFolderDirectories *ns1__GetSDKWatchFolderDirectories_;	/* optional element of type ns1:GetSDKWatchFolderDirectories */
public:
	int soap_type() const { return 2664; } /* = unique id SOAP_TYPE___ns1__GetSDKWatchFolderDirectories */
};
#endif

#ifndef SOAP_TYPE___ns1__GetSDKImagesFromPDFTemplate
#define SOAP_TYPE___ns1__GetSDKImagesFromPDFTemplate (2668)
/* Operation wrapper: */
struct __ns1__GetSDKImagesFromPDFTemplate
{
public:
	ns1__GetSDKImagesFromPDFTemplate *ns1__GetSDKImagesFromPDFTemplate_;	/* optional element of type ns1:GetSDKImagesFromPDFTemplate */
public:
	int soap_type() const { return 2668; } /* = unique id SOAP_TYPE___ns1__GetSDKImagesFromPDFTemplate */
};
#endif

#ifndef SOAP_TYPE___ns1__ExtractSDKPDFTemplateTextByArea
#define SOAP_TYPE___ns1__ExtractSDKPDFTemplateTextByArea (2672)
/* Operation wrapper: */
struct __ns1__ExtractSDKPDFTemplateTextByArea
{
public:
	ns1__ExtractSDKPDFTemplateTextByArea *ns1__ExtractSDKPDFTemplateTextByArea_;	/* optional element of type ns1:ExtractSDKPDFTemplateTextByArea */
public:
	int soap_type() const { return 2672; } /* = unique id SOAP_TYPE___ns1__ExtractSDKPDFTemplateTextByArea */
};
#endif

#ifndef SOAP_TYPE___ns1__GetSDKTextFromTemplate
#define SOAP_TYPE___ns1__GetSDKTextFromTemplate (2676)
/* Operation wrapper: */
struct __ns1__GetSDKTextFromTemplate
{
public:
	ns1__GetSDKTextFromTemplate *ns1__GetSDKTextFromTemplate_;	/* optional element of type ns1:GetSDKTextFromTemplate */
public:
	int soap_type() const { return 2676; } /* = unique id SOAP_TYPE___ns1__GetSDKTextFromTemplate */
};
#endif

#ifndef SOAP_TYPE___ns1__ChangeSDKTaskStatus
#define SOAP_TYPE___ns1__ChangeSDKTaskStatus (2680)
/* Operation wrapper: */
struct __ns1__ChangeSDKTaskStatus
{
public:
	ns1__ChangeSDKTaskStatus *ns1__ChangeSDKTaskStatus_;	/* optional element of type ns1:ChangeSDKTaskStatus */
public:
	int soap_type() const { return 2680; } /* = unique id SOAP_TYPE___ns1__ChangeSDKTaskStatus */
};
#endif

#ifndef SOAP_TYPE___ns1__StartSDKTask
#define SOAP_TYPE___ns1__StartSDKTask (2684)
/* Operation wrapper: */
struct __ns1__StartSDKTask
{
public:
	ns1__StartSDKTask *ns1__StartSDKTask_;	/* optional element of type ns1:StartSDKTask */
public:
	int soap_type() const { return 2684; } /* = unique id SOAP_TYPE___ns1__StartSDKTask */
};
#endif

#ifndef SOAP_TYPE___ns1__DeleteSDKTask
#define SOAP_TYPE___ns1__DeleteSDKTask (2688)
/* Operation wrapper: */
struct __ns1__DeleteSDKTask
{
public:
	ns1__DeleteSDKTask *ns1__DeleteSDKTask_;	/* optional element of type ns1:DeleteSDKTask */
public:
	int soap_type() const { return 2688; } /* = unique id SOAP_TYPE___ns1__DeleteSDKTask */
};
#endif

#ifndef SOAP_TYPE___ns1__ModifyUserPassword
#define SOAP_TYPE___ns1__ModifyUserPassword (2692)
/* Operation wrapper: */
struct __ns1__ModifyUserPassword
{
public:
	ns1__ModifyUserPassword *ns1__ModifyUserPassword_;	/* optional element of type ns1:ModifyUserPassword */
public:
	int soap_type() const { return 2692; } /* = unique id SOAP_TYPE___ns1__ModifyUserPassword */
};
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (2693)
/* SOAP Header: */
struct SOAP_ENV__Header
{
public:
	int soap_type() const { return 2693; } /* = unique id SOAP_TYPE_SOAP_ENV__Header */
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (2694)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
public:
	int soap_type() const { return 2694; } /* = unique id SOAP_TYPE_SOAP_ENV__Code */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (2696)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	char *__any;
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
public:
	int soap_type() const { return 2696; } /* = unique id SOAP_TYPE_SOAP_ENV__Detail */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (2698)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
public:
	int soap_type() const { return 2698; } /* = unique id SOAP_TYPE_SOAP_ENV__Reason */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (2699)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
public:
	int soap_type() const { return 2699; } /* = unique id SOAP_TYPE_SOAP_ENV__Fault */
};
#endif

#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of soapStub.h */

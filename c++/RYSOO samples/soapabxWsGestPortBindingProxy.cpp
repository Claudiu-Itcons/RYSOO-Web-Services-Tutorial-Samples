/* soapabxWsGestPortBindingProxy.cpp
   Generated by gSOAP 2.8.16 from ws.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#include "soapabxWsGestPortBindingProxy.h"

abxWsGestPortBindingProxy::abxWsGestPortBindingProxy()
{	this->soap = soap_new();
	this->own = true;
	abxWsGestPortBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

abxWsGestPortBindingProxy::abxWsGestPortBindingProxy(struct soap *_soap)
{	this->soap = _soap;
	this->own = false;
	abxWsGestPortBindingProxy_init(_soap->imode, _soap->omode);
}

abxWsGestPortBindingProxy::abxWsGestPortBindingProxy(const char *url)
{	this->soap = soap_new();
	this->own = true;
	abxWsGestPortBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = url;
}

abxWsGestPortBindingProxy::abxWsGestPortBindingProxy(soap_mode iomode)
{	this->soap = soap_new();
	this->own = true;
	abxWsGestPortBindingProxy_init(iomode, iomode);
}

abxWsGestPortBindingProxy::abxWsGestPortBindingProxy(const char *url, soap_mode iomode)
{	this->soap = soap_new();
	this->own = true;
	abxWsGestPortBindingProxy_init(iomode, iomode);
	soap_endpoint = url;
}

abxWsGestPortBindingProxy::abxWsGestPortBindingProxy(soap_mode imode, soap_mode omode)
{	this->soap = soap_new();
	this->own = true;
	abxWsGestPortBindingProxy_init(imode, omode);
}

abxWsGestPortBindingProxy::~abxWsGestPortBindingProxy()
{	if (this->own)
		soap_free(this->soap);
}

void abxWsGestPortBindingProxy::abxWsGestPortBindingProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this->soap, imode);
	soap_omode(this->soap, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"ns3", "http://xml.netbeans.org/schema/abxDynaminorg", NULL, NULL},
	{"ns4", "http://xml.netbeans.org/schema/abxCan", NULL, NULL},
	{"ns2", "http://xml.netbeans.org/schema/abxProtocol", NULL, NULL},
	{"ns1", "http://ws.abx/", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_set_namespaces(this->soap, namespaces);
}

void abxWsGestPortBindingProxy::destroy()
{	soap_destroy(this->soap);
	soap_end(this->soap);
}

void abxWsGestPortBindingProxy::reset()
{	destroy();
	soap_done(this->soap);
	soap_initialize(this->soap);
	abxWsGestPortBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void abxWsGestPortBindingProxy::soap_noheader()
{	this->soap->header = NULL;
}

const SOAP_ENV__Header *abxWsGestPortBindingProxy::soap_header()
{	return this->soap->header;
}

const SOAP_ENV__Fault *abxWsGestPortBindingProxy::soap_fault()
{	return this->soap->fault;
}

const char *abxWsGestPortBindingProxy::soap_fault_string()
{	return *soap_faultstring(this->soap);
}

const char *abxWsGestPortBindingProxy::soap_fault_detail()
{	return *soap_faultdetail(this->soap);
}

int abxWsGestPortBindingProxy::soap_close_socket()
{	return soap_closesock(this->soap);
}

int abxWsGestPortBindingProxy::soap_force_close_socket()
{	return soap_force_closesock(this->soap);
}

void abxWsGestPortBindingProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this->soap, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void abxWsGestPortBindingProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this->soap, os);
}
#endif

char *abxWsGestPortBindingProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this->soap, buf, len);
}
#endif

int abxWsGestPortBindingProxy::GetWsdlVersion(const char *endpoint, const char *soap_action, ns1__GetWsdlVersion *ns1__GetWsdlVersion_, ns1__GetWsdlVersionResponse *ns1__GetWsdlVersionResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetWsdlVersion soap_tmp___ns1__GetWsdlVersion;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetWsdlVersionRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetWsdlVersion.ns1__GetWsdlVersion_ = ns1__GetWsdlVersion_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetWsdlVersion(soap, &soap_tmp___ns1__GetWsdlVersion);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetWsdlVersion(soap, &soap_tmp___ns1__GetWsdlVersion, "-ns1:GetWsdlVersion", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetWsdlVersion(soap, &soap_tmp___ns1__GetWsdlVersion, "-ns1:GetWsdlVersion", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetWsdlVersionResponse_)
		return soap_closesock(soap);
	ns1__GetWsdlVersionResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetWsdlVersionResponse_->soap_get(soap, "ns1:GetWsdlVersionResponse", "ns1:GetWsdlVersionResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::Fk_USCOREgetColumnsName(const char *endpoint, const char *soap_action, ns1__Fk_USCOREgetColumnsName *ns1__Fk_USCOREgetColumnsName_, ns1__Fk_USCOREgetColumnsNameResponse *ns1__Fk_USCOREgetColumnsNameResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__Fk_USCOREgetColumnsName soap_tmp___ns1__Fk_USCOREgetColumnsName;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/Fk_getColumnsNameRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__Fk_USCOREgetColumnsName.ns1__Fk_USCOREgetColumnsName_ = ns1__Fk_USCOREgetColumnsName_;
	soap_serializeheader(soap);
	soap_serialize___ns1__Fk_USCOREgetColumnsName(soap, &soap_tmp___ns1__Fk_USCOREgetColumnsName);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__Fk_USCOREgetColumnsName(soap, &soap_tmp___ns1__Fk_USCOREgetColumnsName, "-ns1:Fk_getColumnsName", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__Fk_USCOREgetColumnsName(soap, &soap_tmp___ns1__Fk_USCOREgetColumnsName, "-ns1:Fk_getColumnsName", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__Fk_USCOREgetColumnsNameResponse_)
		return soap_closesock(soap);
	ns1__Fk_USCOREgetColumnsNameResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__Fk_USCOREgetColumnsNameResponse_->soap_get(soap, "ns1:Fk_getColumnsNameResponse", "ns1:Fk_getColumnsNameResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::Fk_USCOREgetRemoteDatabaseList(const char *endpoint, const char *soap_action, ns1__Fk_USCOREgetRemoteDatabaseList *ns1__Fk_USCOREgetRemoteDatabaseList_, ns1__Fk_USCOREgetRemoteDatabaseListResponse *ns1__Fk_USCOREgetRemoteDatabaseListResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__Fk_USCOREgetRemoteDatabaseList soap_tmp___ns1__Fk_USCOREgetRemoteDatabaseList;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/Fk_getRemoteDatabaseListRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__Fk_USCOREgetRemoteDatabaseList.ns1__Fk_USCOREgetRemoteDatabaseList_ = ns1__Fk_USCOREgetRemoteDatabaseList_;
	soap_serializeheader(soap);
	soap_serialize___ns1__Fk_USCOREgetRemoteDatabaseList(soap, &soap_tmp___ns1__Fk_USCOREgetRemoteDatabaseList);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__Fk_USCOREgetRemoteDatabaseList(soap, &soap_tmp___ns1__Fk_USCOREgetRemoteDatabaseList, "-ns1:Fk_getRemoteDatabaseList", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__Fk_USCOREgetRemoteDatabaseList(soap, &soap_tmp___ns1__Fk_USCOREgetRemoteDatabaseList, "-ns1:Fk_getRemoteDatabaseList", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__Fk_USCOREgetRemoteDatabaseListResponse_)
		return soap_closesock(soap);
	ns1__Fk_USCOREgetRemoteDatabaseListResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__Fk_USCOREgetRemoteDatabaseListResponse_->soap_get(soap, "ns1:Fk_getRemoteDatabaseListResponse", "ns1:Fk_getRemoteDatabaseListResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::Fk_USCOREgetRemoteTableList(const char *endpoint, const char *soap_action, ns1__Fk_USCOREgetRemoteTableList *ns1__Fk_USCOREgetRemoteTableList_, ns1__Fk_USCOREgetRemoteTableListResponse *ns1__Fk_USCOREgetRemoteTableListResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__Fk_USCOREgetRemoteTableList soap_tmp___ns1__Fk_USCOREgetRemoteTableList;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/Fk_getRemoteTableListRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__Fk_USCOREgetRemoteTableList.ns1__Fk_USCOREgetRemoteTableList_ = ns1__Fk_USCOREgetRemoteTableList_;
	soap_serializeheader(soap);
	soap_serialize___ns1__Fk_USCOREgetRemoteTableList(soap, &soap_tmp___ns1__Fk_USCOREgetRemoteTableList);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__Fk_USCOREgetRemoteTableList(soap, &soap_tmp___ns1__Fk_USCOREgetRemoteTableList, "-ns1:Fk_getRemoteTableList", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__Fk_USCOREgetRemoteTableList(soap, &soap_tmp___ns1__Fk_USCOREgetRemoteTableList, "-ns1:Fk_getRemoteTableList", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__Fk_USCOREgetRemoteTableListResponse_)
		return soap_closesock(soap);
	ns1__Fk_USCOREgetRemoteTableListResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__Fk_USCOREgetRemoteTableListResponse_->soap_get(soap, "ns1:Fk_getRemoteTableListResponse", "ns1:Fk_getRemoteTableListResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::Fk_USCOREgetRemoteViewList(const char *endpoint, const char *soap_action, ns1__Fk_USCOREgetRemoteViewList *ns1__Fk_USCOREgetRemoteViewList_, ns1__Fk_USCOREgetRemoteViewListResponse *ns1__Fk_USCOREgetRemoteViewListResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__Fk_USCOREgetRemoteViewList soap_tmp___ns1__Fk_USCOREgetRemoteViewList;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/Fk_getRemoteViewListRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__Fk_USCOREgetRemoteViewList.ns1__Fk_USCOREgetRemoteViewList_ = ns1__Fk_USCOREgetRemoteViewList_;
	soap_serializeheader(soap);
	soap_serialize___ns1__Fk_USCOREgetRemoteViewList(soap, &soap_tmp___ns1__Fk_USCOREgetRemoteViewList);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__Fk_USCOREgetRemoteViewList(soap, &soap_tmp___ns1__Fk_USCOREgetRemoteViewList, "-ns1:Fk_getRemoteViewList", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__Fk_USCOREgetRemoteViewList(soap, &soap_tmp___ns1__Fk_USCOREgetRemoteViewList, "-ns1:Fk_getRemoteViewList", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__Fk_USCOREgetRemoteViewListResponse_)
		return soap_closesock(soap);
	ns1__Fk_USCOREgetRemoteViewListResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__Fk_USCOREgetRemoteViewListResponse_->soap_get(soap, "ns1:Fk_getRemoteViewListResponse", "ns1:Fk_getRemoteViewListResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::Fk_USCOREgetRemoteFieldList(const char *endpoint, const char *soap_action, ns1__Fk_USCOREgetRemoteFieldList *ns1__Fk_USCOREgetRemoteFieldList_, ns1__Fk_USCOREgetRemoteFieldListResponse *ns1__Fk_USCOREgetRemoteFieldListResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__Fk_USCOREgetRemoteFieldList soap_tmp___ns1__Fk_USCOREgetRemoteFieldList;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/Fk_getRemoteFieldListRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__Fk_USCOREgetRemoteFieldList.ns1__Fk_USCOREgetRemoteFieldList_ = ns1__Fk_USCOREgetRemoteFieldList_;
	soap_serializeheader(soap);
	soap_serialize___ns1__Fk_USCOREgetRemoteFieldList(soap, &soap_tmp___ns1__Fk_USCOREgetRemoteFieldList);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__Fk_USCOREgetRemoteFieldList(soap, &soap_tmp___ns1__Fk_USCOREgetRemoteFieldList, "-ns1:Fk_getRemoteFieldList", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__Fk_USCOREgetRemoteFieldList(soap, &soap_tmp___ns1__Fk_USCOREgetRemoteFieldList, "-ns1:Fk_getRemoteFieldList", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__Fk_USCOREgetRemoteFieldListResponse_)
		return soap_closesock(soap);
	ns1__Fk_USCOREgetRemoteFieldListResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__Fk_USCOREgetRemoteFieldListResponse_->soap_get(soap, "ns1:Fk_getRemoteFieldListResponse", "ns1:Fk_getRemoteFieldListResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::Fk_USCOREgetLocalFieldList(const char *endpoint, const char *soap_action, ns1__Fk_USCOREgetLocalFieldList *ns1__Fk_USCOREgetLocalFieldList_, ns1__Fk_USCOREgetLocalFieldListResponse *ns1__Fk_USCOREgetLocalFieldListResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__Fk_USCOREgetLocalFieldList soap_tmp___ns1__Fk_USCOREgetLocalFieldList;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/Fk_getLocalFieldListRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__Fk_USCOREgetLocalFieldList.ns1__Fk_USCOREgetLocalFieldList_ = ns1__Fk_USCOREgetLocalFieldList_;
	soap_serializeheader(soap);
	soap_serialize___ns1__Fk_USCOREgetLocalFieldList(soap, &soap_tmp___ns1__Fk_USCOREgetLocalFieldList);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__Fk_USCOREgetLocalFieldList(soap, &soap_tmp___ns1__Fk_USCOREgetLocalFieldList, "-ns1:Fk_getLocalFieldList", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__Fk_USCOREgetLocalFieldList(soap, &soap_tmp___ns1__Fk_USCOREgetLocalFieldList, "-ns1:Fk_getLocalFieldList", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__Fk_USCOREgetLocalFieldListResponse_)
		return soap_closesock(soap);
	ns1__Fk_USCOREgetLocalFieldListResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__Fk_USCOREgetLocalFieldListResponse_->soap_get(soap, "ns1:Fk_getLocalFieldListResponse", "ns1:Fk_getLocalFieldListResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::Query(const char *endpoint, const char *soap_action, ns1__Query *ns1__Query_, ns1__QueryResponse *ns1__QueryResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__Query soap_tmp___ns1__Query;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/QueryRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__Query.ns1__Query_ = ns1__Query_;
	soap_serializeheader(soap);
	soap_serialize___ns1__Query(soap, &soap_tmp___ns1__Query);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__Query(soap, &soap_tmp___ns1__Query, "-ns1:Query", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__Query(soap, &soap_tmp___ns1__Query, "-ns1:Query", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__QueryResponse_)
		return soap_closesock(soap);
	ns1__QueryResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__QueryResponse_->soap_get(soap, "ns1:QueryResponse", "ns1:QueryResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::Fk_USCOREgetAllRecord(const char *endpoint, const char *soap_action, ns1__Fk_USCOREgetAllRecord *ns1__Fk_USCOREgetAllRecord_, ns1__Fk_USCOREgetAllRecordResponse *ns1__Fk_USCOREgetAllRecordResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__Fk_USCOREgetAllRecord soap_tmp___ns1__Fk_USCOREgetAllRecord;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/Fk_getAllRecordRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__Fk_USCOREgetAllRecord.ns1__Fk_USCOREgetAllRecord_ = ns1__Fk_USCOREgetAllRecord_;
	soap_serializeheader(soap);
	soap_serialize___ns1__Fk_USCOREgetAllRecord(soap, &soap_tmp___ns1__Fk_USCOREgetAllRecord);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__Fk_USCOREgetAllRecord(soap, &soap_tmp___ns1__Fk_USCOREgetAllRecord, "-ns1:Fk_getAllRecord", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__Fk_USCOREgetAllRecord(soap, &soap_tmp___ns1__Fk_USCOREgetAllRecord, "-ns1:Fk_getAllRecord", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__Fk_USCOREgetAllRecordResponse_)
		return soap_closesock(soap);
	ns1__Fk_USCOREgetAllRecordResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__Fk_USCOREgetAllRecordResponse_->soap_get(soap, "ns1:Fk_getAllRecordResponse", "ns1:Fk_getAllRecordResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::Fk_USCOREgetCountAllRecord(const char *endpoint, const char *soap_action, ns1__Fk_USCOREgetCountAllRecord *ns1__Fk_USCOREgetCountAllRecord_, ns1__Fk_USCOREgetCountAllRecordResponse *ns1__Fk_USCOREgetCountAllRecordResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__Fk_USCOREgetCountAllRecord soap_tmp___ns1__Fk_USCOREgetCountAllRecord;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/Fk_getCountAllRecordRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__Fk_USCOREgetCountAllRecord.ns1__Fk_USCOREgetCountAllRecord_ = ns1__Fk_USCOREgetCountAllRecord_;
	soap_serializeheader(soap);
	soap_serialize___ns1__Fk_USCOREgetCountAllRecord(soap, &soap_tmp___ns1__Fk_USCOREgetCountAllRecord);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__Fk_USCOREgetCountAllRecord(soap, &soap_tmp___ns1__Fk_USCOREgetCountAllRecord, "-ns1:Fk_getCountAllRecord", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__Fk_USCOREgetCountAllRecord(soap, &soap_tmp___ns1__Fk_USCOREgetCountAllRecord, "-ns1:Fk_getCountAllRecord", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__Fk_USCOREgetCountAllRecordResponse_)
		return soap_closesock(soap);
	ns1__Fk_USCOREgetCountAllRecordResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__Fk_USCOREgetCountAllRecordResponse_->soap_get(soap, "ns1:Fk_getCountAllRecordResponse", "ns1:Fk_getCountAllRecordResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::Fk_USCOREgetAllRecordByIndex(const char *endpoint, const char *soap_action, ns1__Fk_USCOREgetAllRecordByIndex *ns1__Fk_USCOREgetAllRecordByIndex_, ns1__Fk_USCOREgetAllRecordByIndexResponse *ns1__Fk_USCOREgetAllRecordByIndexResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__Fk_USCOREgetAllRecordByIndex soap_tmp___ns1__Fk_USCOREgetAllRecordByIndex;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/Fk_getAllRecordByIndexRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__Fk_USCOREgetAllRecordByIndex.ns1__Fk_USCOREgetAllRecordByIndex_ = ns1__Fk_USCOREgetAllRecordByIndex_;
	soap_serializeheader(soap);
	soap_serialize___ns1__Fk_USCOREgetAllRecordByIndex(soap, &soap_tmp___ns1__Fk_USCOREgetAllRecordByIndex);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__Fk_USCOREgetAllRecordByIndex(soap, &soap_tmp___ns1__Fk_USCOREgetAllRecordByIndex, "-ns1:Fk_getAllRecordByIndex", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__Fk_USCOREgetAllRecordByIndex(soap, &soap_tmp___ns1__Fk_USCOREgetAllRecordByIndex, "-ns1:Fk_getAllRecordByIndex", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__Fk_USCOREgetAllRecordByIndexResponse_)
		return soap_closesock(soap);
	ns1__Fk_USCOREgetAllRecordByIndexResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__Fk_USCOREgetAllRecordByIndexResponse_->soap_get(soap, "ns1:Fk_getAllRecordByIndexResponse", "ns1:Fk_getAllRecordByIndexResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::Fk_USCOREgetAllRecordByDesc(const char *endpoint, const char *soap_action, ns1__Fk_USCOREgetAllRecordByDesc *ns1__Fk_USCOREgetAllRecordByDesc_, ns1__Fk_USCOREgetAllRecordByDescResponse *ns1__Fk_USCOREgetAllRecordByDescResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__Fk_USCOREgetAllRecordByDesc soap_tmp___ns1__Fk_USCOREgetAllRecordByDesc;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/Fk_getAllRecordByDescRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__Fk_USCOREgetAllRecordByDesc.ns1__Fk_USCOREgetAllRecordByDesc_ = ns1__Fk_USCOREgetAllRecordByDesc_;
	soap_serializeheader(soap);
	soap_serialize___ns1__Fk_USCOREgetAllRecordByDesc(soap, &soap_tmp___ns1__Fk_USCOREgetAllRecordByDesc);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__Fk_USCOREgetAllRecordByDesc(soap, &soap_tmp___ns1__Fk_USCOREgetAllRecordByDesc, "-ns1:Fk_getAllRecordByDesc", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__Fk_USCOREgetAllRecordByDesc(soap, &soap_tmp___ns1__Fk_USCOREgetAllRecordByDesc, "-ns1:Fk_getAllRecordByDesc", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__Fk_USCOREgetAllRecordByDescResponse_)
		return soap_closesock(soap);
	ns1__Fk_USCOREgetAllRecordByDescResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__Fk_USCOREgetAllRecordByDescResponse_->soap_get(soap, "ns1:Fk_getAllRecordByDescResponse", "ns1:Fk_getAllRecordByDescResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::Fk_USCOREgetCountAllRecordByDesc(const char *endpoint, const char *soap_action, ns1__Fk_USCOREgetCountAllRecordByDesc *ns1__Fk_USCOREgetCountAllRecordByDesc_, ns1__Fk_USCOREgetCountAllRecordByDescResponse *ns1__Fk_USCOREgetCountAllRecordByDescResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__Fk_USCOREgetCountAllRecordByDesc soap_tmp___ns1__Fk_USCOREgetCountAllRecordByDesc;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/Fk_getCountAllRecordByDescRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__Fk_USCOREgetCountAllRecordByDesc.ns1__Fk_USCOREgetCountAllRecordByDesc_ = ns1__Fk_USCOREgetCountAllRecordByDesc_;
	soap_serializeheader(soap);
	soap_serialize___ns1__Fk_USCOREgetCountAllRecordByDesc(soap, &soap_tmp___ns1__Fk_USCOREgetCountAllRecordByDesc);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__Fk_USCOREgetCountAllRecordByDesc(soap, &soap_tmp___ns1__Fk_USCOREgetCountAllRecordByDesc, "-ns1:Fk_getCountAllRecordByDesc", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__Fk_USCOREgetCountAllRecordByDesc(soap, &soap_tmp___ns1__Fk_USCOREgetCountAllRecordByDesc, "-ns1:Fk_getCountAllRecordByDesc", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__Fk_USCOREgetCountAllRecordByDescResponse_)
		return soap_closesock(soap);
	ns1__Fk_USCOREgetCountAllRecordByDescResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__Fk_USCOREgetCountAllRecordByDescResponse_->soap_get(soap, "ns1:Fk_getCountAllRecordByDescResponse", "ns1:Fk_getCountAllRecordByDescResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::Fk_USCOREgetCountAllRecordByIndexDesc(const char *endpoint, const char *soap_action, ns1__Fk_USCOREgetCountAllRecordByIndexDesc *ns1__Fk_USCOREgetCountAllRecordByIndexDesc_, ns1__Fk_USCOREgetCountAllRecordByIndexDescResponse *ns1__Fk_USCOREgetCountAllRecordByIndexDescResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__Fk_USCOREgetCountAllRecordByIndexDesc soap_tmp___ns1__Fk_USCOREgetCountAllRecordByIndexDesc;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/Fk_getCountAllRecordByIndexDescRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__Fk_USCOREgetCountAllRecordByIndexDesc.ns1__Fk_USCOREgetCountAllRecordByIndexDesc_ = ns1__Fk_USCOREgetCountAllRecordByIndexDesc_;
	soap_serializeheader(soap);
	soap_serialize___ns1__Fk_USCOREgetCountAllRecordByIndexDesc(soap, &soap_tmp___ns1__Fk_USCOREgetCountAllRecordByIndexDesc);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__Fk_USCOREgetCountAllRecordByIndexDesc(soap, &soap_tmp___ns1__Fk_USCOREgetCountAllRecordByIndexDesc, "-ns1:Fk_getCountAllRecordByIndexDesc", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__Fk_USCOREgetCountAllRecordByIndexDesc(soap, &soap_tmp___ns1__Fk_USCOREgetCountAllRecordByIndexDesc, "-ns1:Fk_getCountAllRecordByIndexDesc", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__Fk_USCOREgetCountAllRecordByIndexDescResponse_)
		return soap_closesock(soap);
	ns1__Fk_USCOREgetCountAllRecordByIndexDescResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__Fk_USCOREgetCountAllRecordByIndexDescResponse_->soap_get(soap, "ns1:Fk_getCountAllRecordByIndexDescResponse", "ns1:Fk_getCountAllRecordByIndexDescResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::Fk_USCOREgetAllRecordByIndexDesc(const char *endpoint, const char *soap_action, ns1__Fk_USCOREgetAllRecordByIndexDesc *ns1__Fk_USCOREgetAllRecordByIndexDesc_, ns1__Fk_USCOREgetAllRecordByIndexDescResponse *ns1__Fk_USCOREgetAllRecordByIndexDescResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__Fk_USCOREgetAllRecordByIndexDesc soap_tmp___ns1__Fk_USCOREgetAllRecordByIndexDesc;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/Fk_getAllRecordByIndexDescRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__Fk_USCOREgetAllRecordByIndexDesc.ns1__Fk_USCOREgetAllRecordByIndexDesc_ = ns1__Fk_USCOREgetAllRecordByIndexDesc_;
	soap_serializeheader(soap);
	soap_serialize___ns1__Fk_USCOREgetAllRecordByIndexDesc(soap, &soap_tmp___ns1__Fk_USCOREgetAllRecordByIndexDesc);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__Fk_USCOREgetAllRecordByIndexDesc(soap, &soap_tmp___ns1__Fk_USCOREgetAllRecordByIndexDesc, "-ns1:Fk_getAllRecordByIndexDesc", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__Fk_USCOREgetAllRecordByIndexDesc(soap, &soap_tmp___ns1__Fk_USCOREgetAllRecordByIndexDesc, "-ns1:Fk_getAllRecordByIndexDesc", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__Fk_USCOREgetAllRecordByIndexDescResponse_)
		return soap_closesock(soap);
	ns1__Fk_USCOREgetAllRecordByIndexDescResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__Fk_USCOREgetAllRecordByIndexDescResponse_->soap_get(soap, "ns1:Fk_getAllRecordByIndexDescResponse", "ns1:Fk_getAllRecordByIndexDescResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::InsertDataWA(const char *endpoint, const char *soap_action, ns1__InsertDataWA *ns1__InsertDataWA_, ns1__InsertDataWAResponse *ns1__InsertDataWAResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__InsertDataWA soap_tmp___ns1__InsertDataWA;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/InsertDataWARequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__InsertDataWA.ns1__InsertDataWA_ = ns1__InsertDataWA_;
	soap_serializeheader(soap);
	soap_serialize___ns1__InsertDataWA(soap, &soap_tmp___ns1__InsertDataWA);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__InsertDataWA(soap, &soap_tmp___ns1__InsertDataWA, "-ns1:InsertDataWA", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__InsertDataWA(soap, &soap_tmp___ns1__InsertDataWA, "-ns1:InsertDataWA", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__InsertDataWAResponse_)
		return soap_closesock(soap);
	ns1__InsertDataWAResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__InsertDataWAResponse_->soap_get(soap, "ns1:InsertDataWAResponse", "ns1:InsertDataWAResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetListDataWA(const char *endpoint, const char *soap_action, ns1__GetListDataWA *ns1__GetListDataWA_, ns1__GetListDataWAResponse *ns1__GetListDataWAResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetListDataWA soap_tmp___ns1__GetListDataWA;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetListDataWARequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetListDataWA.ns1__GetListDataWA_ = ns1__GetListDataWA_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetListDataWA(soap, &soap_tmp___ns1__GetListDataWA);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetListDataWA(soap, &soap_tmp___ns1__GetListDataWA, "-ns1:GetListDataWA", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetListDataWA(soap, &soap_tmp___ns1__GetListDataWA, "-ns1:GetListDataWA", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetListDataWAResponse_)
		return soap_closesock(soap);
	ns1__GetListDataWAResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetListDataWAResponse_->soap_get(soap, "ns1:GetListDataWAResponse", "ns1:GetListDataWAResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::ModifyDataWA(const char *endpoint, const char *soap_action, ns1__ModifyDataWA *ns1__ModifyDataWA_, ns1__ModifyDataWAResponse *ns1__ModifyDataWAResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__ModifyDataWA soap_tmp___ns1__ModifyDataWA;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/ModifyDataWARequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ModifyDataWA.ns1__ModifyDataWA_ = ns1__ModifyDataWA_;
	soap_serializeheader(soap);
	soap_serialize___ns1__ModifyDataWA(soap, &soap_tmp___ns1__ModifyDataWA);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ModifyDataWA(soap, &soap_tmp___ns1__ModifyDataWA, "-ns1:ModifyDataWA", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ModifyDataWA(soap, &soap_tmp___ns1__ModifyDataWA, "-ns1:ModifyDataWA", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ModifyDataWAResponse_)
		return soap_closesock(soap);
	ns1__ModifyDataWAResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ModifyDataWAResponse_->soap_get(soap, "ns1:ModifyDataWAResponse", "ns1:ModifyDataWAResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::DeleteDataWA(const char *endpoint, const char *soap_action, ns1__DeleteDataWA *ns1__DeleteDataWA_, ns1__DeleteDataWAResponse *ns1__DeleteDataWAResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__DeleteDataWA soap_tmp___ns1__DeleteDataWA;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/DeleteDataWARequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DeleteDataWA.ns1__DeleteDataWA_ = ns1__DeleteDataWA_;
	soap_serializeheader(soap);
	soap_serialize___ns1__DeleteDataWA(soap, &soap_tmp___ns1__DeleteDataWA);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DeleteDataWA(soap, &soap_tmp___ns1__DeleteDataWA, "-ns1:DeleteDataWA", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DeleteDataWA(soap, &soap_tmp___ns1__DeleteDataWA, "-ns1:DeleteDataWA", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DeleteDataWAResponse_)
		return soap_closesock(soap);
	ns1__DeleteDataWAResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DeleteDataWAResponse_->soap_get(soap, "ns1:DeleteDataWAResponse", "ns1:DeleteDataWAResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetDataWAById(const char *endpoint, const char *soap_action, ns1__GetDataWAById *ns1__GetDataWAById_, ns1__GetDataWAByIdResponse *ns1__GetDataWAByIdResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetDataWAById soap_tmp___ns1__GetDataWAById;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetDataWAByIdRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetDataWAById.ns1__GetDataWAById_ = ns1__GetDataWAById_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetDataWAById(soap, &soap_tmp___ns1__GetDataWAById);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetDataWAById(soap, &soap_tmp___ns1__GetDataWAById, "-ns1:GetDataWAById", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetDataWAById(soap, &soap_tmp___ns1__GetDataWAById, "-ns1:GetDataWAById", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetDataWAByIdResponse_)
		return soap_closesock(soap);
	ns1__GetDataWAByIdResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetDataWAByIdResponse_->soap_get(soap, "ns1:GetDataWAByIdResponse", "ns1:GetDataWAByIdResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::InsertFileWA(const char *endpoint, const char *soap_action, ns1__InsertFileWA *ns1__InsertFileWA_, ns1__InsertFileWAResponse *ns1__InsertFileWAResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__InsertFileWA soap_tmp___ns1__InsertFileWA;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/InsertFileWARequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__InsertFileWA.ns1__InsertFileWA_ = ns1__InsertFileWA_;
	soap_serializeheader(soap);
	soap_serialize___ns1__InsertFileWA(soap, &soap_tmp___ns1__InsertFileWA);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__InsertFileWA(soap, &soap_tmp___ns1__InsertFileWA, "-ns1:InsertFileWA", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__InsertFileWA(soap, &soap_tmp___ns1__InsertFileWA, "-ns1:InsertFileWA", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__InsertFileWAResponse_)
		return soap_closesock(soap);
	ns1__InsertFileWAResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__InsertFileWAResponse_->soap_get(soap, "ns1:InsertFileWAResponse", "ns1:InsertFileWAResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::UploadSendChunkWA(const char *endpoint, const char *soap_action, ns1__UploadSendChunkWA *ns1__UploadSendChunkWA_, ns1__UploadSendChunkWAResponse *ns1__UploadSendChunkWAResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__UploadSendChunkWA soap_tmp___ns1__UploadSendChunkWA;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/UploadSendChunkWARequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__UploadSendChunkWA.ns1__UploadSendChunkWA_ = ns1__UploadSendChunkWA_;
	soap_serializeheader(soap);
	soap_serialize___ns1__UploadSendChunkWA(soap, &soap_tmp___ns1__UploadSendChunkWA);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UploadSendChunkWA(soap, &soap_tmp___ns1__UploadSendChunkWA, "-ns1:UploadSendChunkWA", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UploadSendChunkWA(soap, &soap_tmp___ns1__UploadSendChunkWA, "-ns1:UploadSendChunkWA", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UploadSendChunkWAResponse_)
		return soap_closesock(soap);
	ns1__UploadSendChunkWAResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UploadSendChunkWAResponse_->soap_get(soap, "ns1:UploadSendChunkWAResponse", "ns1:UploadSendChunkWAResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::UploadEndFileWA(const char *endpoint, const char *soap_action, ns1__UploadEndFileWA *ns1__UploadEndFileWA_, ns1__UploadEndFileWAResponse *ns1__UploadEndFileWAResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__UploadEndFileWA soap_tmp___ns1__UploadEndFileWA;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/UploadEndFileWARequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__UploadEndFileWA.ns1__UploadEndFileWA_ = ns1__UploadEndFileWA_;
	soap_serializeheader(soap);
	soap_serialize___ns1__UploadEndFileWA(soap, &soap_tmp___ns1__UploadEndFileWA);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UploadEndFileWA(soap, &soap_tmp___ns1__UploadEndFileWA, "-ns1:UploadEndFileWA", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UploadEndFileWA(soap, &soap_tmp___ns1__UploadEndFileWA, "-ns1:UploadEndFileWA", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UploadEndFileWAResponse_)
		return soap_closesock(soap);
	ns1__UploadEndFileWAResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UploadEndFileWAResponse_->soap_get(soap, "ns1:UploadEndFileWAResponse", "ns1:UploadEndFileWAResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetDataFileListWA(const char *endpoint, const char *soap_action, ns1__GetDataFileListWA *ns1__GetDataFileListWA_, ns1__GetDataFileListWAResponse *ns1__GetDataFileListWAResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetDataFileListWA soap_tmp___ns1__GetDataFileListWA;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetDataFileListWARequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetDataFileListWA.ns1__GetDataFileListWA_ = ns1__GetDataFileListWA_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetDataFileListWA(soap, &soap_tmp___ns1__GetDataFileListWA);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetDataFileListWA(soap, &soap_tmp___ns1__GetDataFileListWA, "-ns1:GetDataFileListWA", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetDataFileListWA(soap, &soap_tmp___ns1__GetDataFileListWA, "-ns1:GetDataFileListWA", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetDataFileListWAResponse_)
		return soap_closesock(soap);
	ns1__GetDataFileListWAResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetDataFileListWAResponse_->soap_get(soap, "ns1:GetDataFileListWAResponse", "ns1:GetDataFileListWAResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::DownloadFileWAByFileUniqueCode(const char *endpoint, const char *soap_action, ns1__DownloadFileWAByFileUniqueCode *ns1__DownloadFileWAByFileUniqueCode_, ns1__DownloadFileWAByFileUniqueCodeResponse *ns1__DownloadFileWAByFileUniqueCodeResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__DownloadFileWAByFileUniqueCode soap_tmp___ns1__DownloadFileWAByFileUniqueCode;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/DownloadFileWAByFileUniqueCodeRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DownloadFileWAByFileUniqueCode.ns1__DownloadFileWAByFileUniqueCode_ = ns1__DownloadFileWAByFileUniqueCode_;
	soap_serializeheader(soap);
	soap_serialize___ns1__DownloadFileWAByFileUniqueCode(soap, &soap_tmp___ns1__DownloadFileWAByFileUniqueCode);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DownloadFileWAByFileUniqueCode(soap, &soap_tmp___ns1__DownloadFileWAByFileUniqueCode, "-ns1:DownloadFileWAByFileUniqueCode", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DownloadFileWAByFileUniqueCode(soap, &soap_tmp___ns1__DownloadFileWAByFileUniqueCode, "-ns1:DownloadFileWAByFileUniqueCode", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DownloadFileWAByFileUniqueCodeResponse_)
		return soap_closesock(soap);
	ns1__DownloadFileWAByFileUniqueCodeResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DownloadFileWAByFileUniqueCodeResponse_->soap_get(soap, "ns1:DownloadFileWAByFileUniqueCodeResponse", "ns1:DownloadFileWAByFileUniqueCodeResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::DownloadFileWA(const char *endpoint, const char *soap_action, ns1__DownloadFileWA *ns1__DownloadFileWA_, ns1__DownloadFileWAResponse *ns1__DownloadFileWAResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__DownloadFileWA soap_tmp___ns1__DownloadFileWA;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/DownloadFileWARequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DownloadFileWA.ns1__DownloadFileWA_ = ns1__DownloadFileWA_;
	soap_serializeheader(soap);
	soap_serialize___ns1__DownloadFileWA(soap, &soap_tmp___ns1__DownloadFileWA);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DownloadFileWA(soap, &soap_tmp___ns1__DownloadFileWA, "-ns1:DownloadFileWA", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DownloadFileWA(soap, &soap_tmp___ns1__DownloadFileWA, "-ns1:DownloadFileWA", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DownloadFileWAResponse_)
		return soap_closesock(soap);
	ns1__DownloadFileWAResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DownloadFileWAResponse_->soap_get(soap, "ns1:DownloadFileWAResponse", "ns1:DownloadFileWAResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::DownloadGetNextWA(const char *endpoint, const char *soap_action, ns1__DownloadGetNextWA *ns1__DownloadGetNextWA_, ns1__DownloadGetNextWAResponse *ns1__DownloadGetNextWAResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__DownloadGetNextWA soap_tmp___ns1__DownloadGetNextWA;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/DownloadGetNextWARequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DownloadGetNextWA.ns1__DownloadGetNextWA_ = ns1__DownloadGetNextWA_;
	soap_serializeheader(soap);
	soap_serialize___ns1__DownloadGetNextWA(soap, &soap_tmp___ns1__DownloadGetNextWA);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DownloadGetNextWA(soap, &soap_tmp___ns1__DownloadGetNextWA, "-ns1:DownloadGetNextWA", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DownloadGetNextWA(soap, &soap_tmp___ns1__DownloadGetNextWA, "-ns1:DownloadGetNextWA", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DownloadGetNextWAResponse_)
		return soap_closesock(soap);
	ns1__DownloadGetNextWAResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DownloadGetNextWAResponse_->soap_get(soap, "ns1:DownloadGetNextWAResponse", "ns1:DownloadGetNextWAResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::DownloadEndFileWA(const char *endpoint, const char *soap_action, ns1__DownloadEndFileWA *ns1__DownloadEndFileWA_, ns1__DownloadEndFileWAResponse *ns1__DownloadEndFileWAResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__DownloadEndFileWA soap_tmp___ns1__DownloadEndFileWA;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/DownloadEndFileWARequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DownloadEndFileWA.ns1__DownloadEndFileWA_ = ns1__DownloadEndFileWA_;
	soap_serializeheader(soap);
	soap_serialize___ns1__DownloadEndFileWA(soap, &soap_tmp___ns1__DownloadEndFileWA);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DownloadEndFileWA(soap, &soap_tmp___ns1__DownloadEndFileWA, "-ns1:DownloadEndFileWA", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DownloadEndFileWA(soap, &soap_tmp___ns1__DownloadEndFileWA, "-ns1:DownloadEndFileWA", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DownloadEndFileWAResponse_)
		return soap_closesock(soap);
	ns1__DownloadEndFileWAResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DownloadEndFileWAResponse_->soap_get(soap, "ns1:DownloadEndFileWAResponse", "ns1:DownloadEndFileWAResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::DeleteFileWA(const char *endpoint, const char *soap_action, ns1__DeleteFileWA *ns1__DeleteFileWA_, ns1__DeleteFileWAResponse *ns1__DeleteFileWAResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__DeleteFileWA soap_tmp___ns1__DeleteFileWA;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/DeleteFileWARequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DeleteFileWA.ns1__DeleteFileWA_ = ns1__DeleteFileWA_;
	soap_serializeheader(soap);
	soap_serialize___ns1__DeleteFileWA(soap, &soap_tmp___ns1__DeleteFileWA);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DeleteFileWA(soap, &soap_tmp___ns1__DeleteFileWA, "-ns1:DeleteFileWA", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DeleteFileWA(soap, &soap_tmp___ns1__DeleteFileWA, "-ns1:DeleteFileWA", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DeleteFileWAResponse_)
		return soap_closesock(soap);
	ns1__DeleteFileWAResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DeleteFileWAResponse_->soap_get(soap, "ns1:DeleteFileWAResponse", "ns1:DeleteFileWAResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetCountDocumentLinks(const char *endpoint, const char *soap_action, ns1__GetCountDocumentLinks *ns1__GetCountDocumentLinks_, ns1__GetCountDocumentLinksResponse *ns1__GetCountDocumentLinksResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetCountDocumentLinks soap_tmp___ns1__GetCountDocumentLinks;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetCountDocumentLinksRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetCountDocumentLinks.ns1__GetCountDocumentLinks_ = ns1__GetCountDocumentLinks_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetCountDocumentLinks(soap, &soap_tmp___ns1__GetCountDocumentLinks);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetCountDocumentLinks(soap, &soap_tmp___ns1__GetCountDocumentLinks, "-ns1:GetCountDocumentLinks", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetCountDocumentLinks(soap, &soap_tmp___ns1__GetCountDocumentLinks, "-ns1:GetCountDocumentLinks", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetCountDocumentLinksResponse_)
		return soap_closesock(soap);
	ns1__GetCountDocumentLinksResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetCountDocumentLinksResponse_->soap_get(soap, "ns1:GetCountDocumentLinksResponse", "ns1:GetCountDocumentLinksResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::SetInstanceReplication(const char *endpoint, const char *soap_action, ns1__SetInstanceReplication *ns1__SetInstanceReplication_, ns1__SetInstanceReplicationResponse *ns1__SetInstanceReplicationResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__SetInstanceReplication soap_tmp___ns1__SetInstanceReplication;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/SetInstanceReplicationRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__SetInstanceReplication.ns1__SetInstanceReplication_ = ns1__SetInstanceReplication_;
	soap_serializeheader(soap);
	soap_serialize___ns1__SetInstanceReplication(soap, &soap_tmp___ns1__SetInstanceReplication);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__SetInstanceReplication(soap, &soap_tmp___ns1__SetInstanceReplication, "-ns1:SetInstanceReplication", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__SetInstanceReplication(soap, &soap_tmp___ns1__SetInstanceReplication, "-ns1:SetInstanceReplication", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__SetInstanceReplicationResponse_)
		return soap_closesock(soap);
	ns1__SetInstanceReplicationResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__SetInstanceReplicationResponse_->soap_get(soap, "ns1:SetInstanceReplicationResponse", "ns1:SetInstanceReplicationResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::ModifyContainer(const char *endpoint, const char *soap_action, ns1__ModifyContainer *ns1__ModifyContainer_, ns1__ModifyContainerResponse *ns1__ModifyContainerResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__ModifyContainer soap_tmp___ns1__ModifyContainer;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/ModifyContainerRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ModifyContainer.ns1__ModifyContainer_ = ns1__ModifyContainer_;
	soap_serializeheader(soap);
	soap_serialize___ns1__ModifyContainer(soap, &soap_tmp___ns1__ModifyContainer);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ModifyContainer(soap, &soap_tmp___ns1__ModifyContainer, "-ns1:ModifyContainer", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ModifyContainer(soap, &soap_tmp___ns1__ModifyContainer, "-ns1:ModifyContainer", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ModifyContainerResponse_)
		return soap_closesock(soap);
	ns1__ModifyContainerResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ModifyContainerResponse_->soap_get(soap, "ns1:ModifyContainerResponse", "ns1:ModifyContainerResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::ModifyTemplate(const char *endpoint, const char *soap_action, ns1__ModifyTemplate *ns1__ModifyTemplate_, ns1__ModifyTemplateResponse *ns1__ModifyTemplateResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__ModifyTemplate soap_tmp___ns1__ModifyTemplate;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/ModifyTemplateRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ModifyTemplate.ns1__ModifyTemplate_ = ns1__ModifyTemplate_;
	soap_serializeheader(soap);
	soap_serialize___ns1__ModifyTemplate(soap, &soap_tmp___ns1__ModifyTemplate);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ModifyTemplate(soap, &soap_tmp___ns1__ModifyTemplate, "-ns1:ModifyTemplate", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ModifyTemplate(soap, &soap_tmp___ns1__ModifyTemplate, "-ns1:ModifyTemplate", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ModifyTemplateResponse_)
		return soap_closesock(soap);
	ns1__ModifyTemplateResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ModifyTemplateResponse_->soap_get(soap, "ns1:ModifyTemplateResponse", "ns1:ModifyTemplateResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::DeleteTemplate(const char *endpoint, const char *soap_action, ns1__DeleteTemplate *ns1__DeleteTemplate_, ns1__DeleteTemplateResponse *ns1__DeleteTemplateResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__DeleteTemplate soap_tmp___ns1__DeleteTemplate;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/DeleteTemplateRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DeleteTemplate.ns1__DeleteTemplate_ = ns1__DeleteTemplate_;
	soap_serializeheader(soap);
	soap_serialize___ns1__DeleteTemplate(soap, &soap_tmp___ns1__DeleteTemplate);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DeleteTemplate(soap, &soap_tmp___ns1__DeleteTemplate, "-ns1:DeleteTemplate", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DeleteTemplate(soap, &soap_tmp___ns1__DeleteTemplate, "-ns1:DeleteTemplate", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DeleteTemplateResponse_)
		return soap_closesock(soap);
	ns1__DeleteTemplateResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DeleteTemplateResponse_->soap_get(soap, "ns1:DeleteTemplateResponse", "ns1:DeleteTemplateResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::DeleteContainer(const char *endpoint, const char *soap_action, ns1__DeleteContainer *ns1__DeleteContainer_, ns1__DeleteContainerResponse *ns1__DeleteContainerResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__DeleteContainer soap_tmp___ns1__DeleteContainer;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/DeleteContainerRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DeleteContainer.ns1__DeleteContainer_ = ns1__DeleteContainer_;
	soap_serializeheader(soap);
	soap_serialize___ns1__DeleteContainer(soap, &soap_tmp___ns1__DeleteContainer);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DeleteContainer(soap, &soap_tmp___ns1__DeleteContainer, "-ns1:DeleteContainer", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DeleteContainer(soap, &soap_tmp___ns1__DeleteContainer, "-ns1:DeleteContainer", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DeleteContainerResponse_)
		return soap_closesock(soap);
	ns1__DeleteContainerResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DeleteContainerResponse_->soap_get(soap, "ns1:DeleteContainerResponse", "ns1:DeleteContainerResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::canModifyContainer(const char *endpoint, const char *soap_action, ns1__canModifyContainer *ns1__canModifyContainer_, ns1__canModifyContainerResponse *ns1__canModifyContainerResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__canModifyContainer soap_tmp___ns1__canModifyContainer;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/canModifyContainerRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__canModifyContainer.ns1__canModifyContainer_ = ns1__canModifyContainer_;
	soap_serializeheader(soap);
	soap_serialize___ns1__canModifyContainer(soap, &soap_tmp___ns1__canModifyContainer);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__canModifyContainer(soap, &soap_tmp___ns1__canModifyContainer, "-ns1:canModifyContainer", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__canModifyContainer(soap, &soap_tmp___ns1__canModifyContainer, "-ns1:canModifyContainer", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__canModifyContainerResponse_)
		return soap_closesock(soap);
	ns1__canModifyContainerResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__canModifyContainerResponse_->soap_get(soap, "ns1:canModifyContainerResponse", "ns1:canModifyContainerResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::canModifyTemplate(const char *endpoint, const char *soap_action, ns1__canModifyTemplate *ns1__canModifyTemplate_, ns1__canModifyTemplateResponse *ns1__canModifyTemplateResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__canModifyTemplate soap_tmp___ns1__canModifyTemplate;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/canModifyTemplateRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__canModifyTemplate.ns1__canModifyTemplate_ = ns1__canModifyTemplate_;
	soap_serializeheader(soap);
	soap_serialize___ns1__canModifyTemplate(soap, &soap_tmp___ns1__canModifyTemplate);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__canModifyTemplate(soap, &soap_tmp___ns1__canModifyTemplate, "-ns1:canModifyTemplate", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__canModifyTemplate(soap, &soap_tmp___ns1__canModifyTemplate, "-ns1:canModifyTemplate", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__canModifyTemplateResponse_)
		return soap_closesock(soap);
	ns1__canModifyTemplateResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__canModifyTemplateResponse_->soap_get(soap, "ns1:canModifyTemplateResponse", "ns1:canModifyTemplateResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::canDeleteContainer(const char *endpoint, const char *soap_action, ns1__canDeleteContainer *ns1__canDeleteContainer_, ns1__canDeleteContainerResponse *ns1__canDeleteContainerResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__canDeleteContainer soap_tmp___ns1__canDeleteContainer;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/canDeleteContainerRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__canDeleteContainer.ns1__canDeleteContainer_ = ns1__canDeleteContainer_;
	soap_serializeheader(soap);
	soap_serialize___ns1__canDeleteContainer(soap, &soap_tmp___ns1__canDeleteContainer);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__canDeleteContainer(soap, &soap_tmp___ns1__canDeleteContainer, "-ns1:canDeleteContainer", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__canDeleteContainer(soap, &soap_tmp___ns1__canDeleteContainer, "-ns1:canDeleteContainer", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__canDeleteContainerResponse_)
		return soap_closesock(soap);
	ns1__canDeleteContainerResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__canDeleteContainerResponse_->soap_get(soap, "ns1:canDeleteContainerResponse", "ns1:canDeleteContainerResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::canDeleteTemplate(const char *endpoint, const char *soap_action, ns1__canDeleteTemplate *ns1__canDeleteTemplate_, ns1__canDeleteTemplateResponse *ns1__canDeleteTemplateResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__canDeleteTemplate soap_tmp___ns1__canDeleteTemplate;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/canDeleteTemplateRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__canDeleteTemplate.ns1__canDeleteTemplate_ = ns1__canDeleteTemplate_;
	soap_serializeheader(soap);
	soap_serialize___ns1__canDeleteTemplate(soap, &soap_tmp___ns1__canDeleteTemplate);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__canDeleteTemplate(soap, &soap_tmp___ns1__canDeleteTemplate, "-ns1:canDeleteTemplate", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__canDeleteTemplate(soap, &soap_tmp___ns1__canDeleteTemplate, "-ns1:canDeleteTemplate", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__canDeleteTemplateResponse_)
		return soap_closesock(soap);
	ns1__canDeleteTemplateResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__canDeleteTemplateResponse_->soap_get(soap, "ns1:canDeleteTemplateResponse", "ns1:canDeleteTemplateResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::canCreateContainer(const char *endpoint, const char *soap_action, ns1__canCreateContainer *ns1__canCreateContainer_, ns1__canCreateContainerResponse *ns1__canCreateContainerResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__canCreateContainer soap_tmp___ns1__canCreateContainer;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/canCreateContainerRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__canCreateContainer.ns1__canCreateContainer_ = ns1__canCreateContainer_;
	soap_serializeheader(soap);
	soap_serialize___ns1__canCreateContainer(soap, &soap_tmp___ns1__canCreateContainer);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__canCreateContainer(soap, &soap_tmp___ns1__canCreateContainer, "-ns1:canCreateContainer", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__canCreateContainer(soap, &soap_tmp___ns1__canCreateContainer, "-ns1:canCreateContainer", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__canCreateContainerResponse_)
		return soap_closesock(soap);
	ns1__canCreateContainerResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__canCreateContainerResponse_->soap_get(soap, "ns1:canCreateContainerResponse", "ns1:canCreateContainerResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::canCreateTemplate(const char *endpoint, const char *soap_action, ns1__canCreateTemplate *ns1__canCreateTemplate_, ns1__canCreateTemplateResponse *ns1__canCreateTemplateResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__canCreateTemplate soap_tmp___ns1__canCreateTemplate;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/canCreateTemplateRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__canCreateTemplate.ns1__canCreateTemplate_ = ns1__canCreateTemplate_;
	soap_serializeheader(soap);
	soap_serialize___ns1__canCreateTemplate(soap, &soap_tmp___ns1__canCreateTemplate);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__canCreateTemplate(soap, &soap_tmp___ns1__canCreateTemplate, "-ns1:canCreateTemplate", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__canCreateTemplate(soap, &soap_tmp___ns1__canCreateTemplate, "-ns1:canCreateTemplate", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__canCreateTemplateResponse_)
		return soap_closesock(soap);
	ns1__canCreateTemplateResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__canCreateTemplateResponse_->soap_get(soap, "ns1:canCreateTemplateResponse", "ns1:canCreateTemplateResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetDynorgList(const char *endpoint, const char *soap_action, ns1__GetDynorgList *ns1__GetDynorgList_, ns1__GetDynorgListResponse *ns1__GetDynorgListResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetDynorgList soap_tmp___ns1__GetDynorgList;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetDynorgListRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetDynorgList.ns1__GetDynorgList_ = ns1__GetDynorgList_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetDynorgList(soap, &soap_tmp___ns1__GetDynorgList);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetDynorgList(soap, &soap_tmp___ns1__GetDynorgList, "-ns1:GetDynorgList", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetDynorgList(soap, &soap_tmp___ns1__GetDynorgList, "-ns1:GetDynorgList", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetDynorgListResponse_)
		return soap_closesock(soap);
	ns1__GetDynorgListResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetDynorgListResponse_->soap_get(soap, "ns1:GetDynorgListResponse", "ns1:GetDynorgListResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::ModifyDynorg(const char *endpoint, const char *soap_action, ns1__ModifyDynorg *ns1__ModifyDynorg_, ns1__ModifyDynorgResponse *ns1__ModifyDynorgResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__ModifyDynorg soap_tmp___ns1__ModifyDynorg;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/ModifyDynorgRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ModifyDynorg.ns1__ModifyDynorg_ = ns1__ModifyDynorg_;
	soap_serializeheader(soap);
	soap_serialize___ns1__ModifyDynorg(soap, &soap_tmp___ns1__ModifyDynorg);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ModifyDynorg(soap, &soap_tmp___ns1__ModifyDynorg, "-ns1:ModifyDynorg", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ModifyDynorg(soap, &soap_tmp___ns1__ModifyDynorg, "-ns1:ModifyDynorg", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ModifyDynorgResponse_)
		return soap_closesock(soap);
	ns1__ModifyDynorgResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ModifyDynorgResponse_->soap_get(soap, "ns1:ModifyDynorgResponse", "ns1:ModifyDynorgResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::DeleteDynorg(const char *endpoint, const char *soap_action, ns1__DeleteDynorg *ns1__DeleteDynorg_, ns1__DeleteDynorgResponse *ns1__DeleteDynorgResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__DeleteDynorg soap_tmp___ns1__DeleteDynorg;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/DeleteDynorgRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DeleteDynorg.ns1__DeleteDynorg_ = ns1__DeleteDynorg_;
	soap_serializeheader(soap);
	soap_serialize___ns1__DeleteDynorg(soap, &soap_tmp___ns1__DeleteDynorg);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DeleteDynorg(soap, &soap_tmp___ns1__DeleteDynorg, "-ns1:DeleteDynorg", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DeleteDynorg(soap, &soap_tmp___ns1__DeleteDynorg, "-ns1:DeleteDynorg", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DeleteDynorgResponse_)
		return soap_closesock(soap);
	ns1__DeleteDynorgResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DeleteDynorgResponse_->soap_get(soap, "ns1:DeleteDynorgResponse", "ns1:DeleteDynorgResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetArchiBoxInDomainByMatricola(const char *endpoint, const char *soap_action, ns1__GetArchiBoxInDomainByMatricola *ns1__GetArchiBoxInDomainByMatricola_, ns1__GetArchiBoxInDomainByMatricolaResponse *ns1__GetArchiBoxInDomainByMatricolaResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetArchiBoxInDomainByMatricola soap_tmp___ns1__GetArchiBoxInDomainByMatricola;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetArchiBoxInDomainByMatricolaRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetArchiBoxInDomainByMatricola.ns1__GetArchiBoxInDomainByMatricola_ = ns1__GetArchiBoxInDomainByMatricola_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetArchiBoxInDomainByMatricola(soap, &soap_tmp___ns1__GetArchiBoxInDomainByMatricola);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetArchiBoxInDomainByMatricola(soap, &soap_tmp___ns1__GetArchiBoxInDomainByMatricola, "-ns1:GetArchiBoxInDomainByMatricola", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetArchiBoxInDomainByMatricola(soap, &soap_tmp___ns1__GetArchiBoxInDomainByMatricola, "-ns1:GetArchiBoxInDomainByMatricola", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetArchiBoxInDomainByMatricolaResponse_)
		return soap_closesock(soap);
	ns1__GetArchiBoxInDomainByMatricolaResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetArchiBoxInDomainByMatricolaResponse_->soap_get(soap, "ns1:GetArchiBoxInDomainByMatricolaResponse", "ns1:GetArchiBoxInDomainByMatricolaResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetArchiBoxInfo(const char *endpoint, const char *soap_action, ns1__GetArchiBoxInfo *ns1__GetArchiBoxInfo_, ns1__GetArchiBoxInfoResponse *ns1__GetArchiBoxInfoResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetArchiBoxInfo soap_tmp___ns1__GetArchiBoxInfo;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetArchiBoxInfoRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetArchiBoxInfo.ns1__GetArchiBoxInfo_ = ns1__GetArchiBoxInfo_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetArchiBoxInfo(soap, &soap_tmp___ns1__GetArchiBoxInfo);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetArchiBoxInfo(soap, &soap_tmp___ns1__GetArchiBoxInfo, "-ns1:GetArchiBoxInfo", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetArchiBoxInfo(soap, &soap_tmp___ns1__GetArchiBoxInfo, "-ns1:GetArchiBoxInfo", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetArchiBoxInfoResponse_)
		return soap_closesock(soap);
	ns1__GetArchiBoxInfoResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetArchiBoxInfoResponse_->soap_get(soap, "ns1:GetArchiBoxInfoResponse", "ns1:GetArchiBoxInfoResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetArchiBoxInDomain(const char *endpoint, const char *soap_action, ns1__GetArchiBoxInDomain *ns1__GetArchiBoxInDomain_, ns1__GetArchiBoxInDomainResponse *ns1__GetArchiBoxInDomainResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetArchiBoxInDomain soap_tmp___ns1__GetArchiBoxInDomain;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetArchiBoxInDomainRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetArchiBoxInDomain.ns1__GetArchiBoxInDomain_ = ns1__GetArchiBoxInDomain_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetArchiBoxInDomain(soap, &soap_tmp___ns1__GetArchiBoxInDomain);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetArchiBoxInDomain(soap, &soap_tmp___ns1__GetArchiBoxInDomain, "-ns1:GetArchiBoxInDomain", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetArchiBoxInDomain(soap, &soap_tmp___ns1__GetArchiBoxInDomain, "-ns1:GetArchiBoxInDomain", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetArchiBoxInDomainResponse_)
		return soap_closesock(soap);
	ns1__GetArchiBoxInDomainResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetArchiBoxInDomainResponse_->soap_get(soap, "ns1:GetArchiBoxInDomainResponse", "ns1:GetArchiBoxInDomainResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::DigitalSign(const char *endpoint, const char *soap_action, ns1__DigitalSign *ns1__DigitalSign_, ns1__DigitalSignResponse *ns1__DigitalSignResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__DigitalSign soap_tmp___ns1__DigitalSign;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/DigitalSignRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DigitalSign.ns1__DigitalSign_ = ns1__DigitalSign_;
	soap_serializeheader(soap);
	soap_serialize___ns1__DigitalSign(soap, &soap_tmp___ns1__DigitalSign);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DigitalSign(soap, &soap_tmp___ns1__DigitalSign, "-ns1:DigitalSign", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DigitalSign(soap, &soap_tmp___ns1__DigitalSign, "-ns1:DigitalSign", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DigitalSignResponse_)
		return soap_closesock(soap);
	ns1__DigitalSignResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DigitalSignResponse_->soap_get(soap, "ns1:DigitalSignResponse", "ns1:DigitalSignResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetInstanceReplicationStatus(const char *endpoint, const char *soap_action, ns1__GetInstanceReplicationStatus *ns1__GetInstanceReplicationStatus_, ns1__GetInstanceReplicationStatusResponse *ns1__GetInstanceReplicationStatusResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetInstanceReplicationStatus soap_tmp___ns1__GetInstanceReplicationStatus;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetInstanceReplicationStatusRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetInstanceReplicationStatus.ns1__GetInstanceReplicationStatus_ = ns1__GetInstanceReplicationStatus_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetInstanceReplicationStatus(soap, &soap_tmp___ns1__GetInstanceReplicationStatus);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetInstanceReplicationStatus(soap, &soap_tmp___ns1__GetInstanceReplicationStatus, "-ns1:GetInstanceReplicationStatus", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetInstanceReplicationStatus(soap, &soap_tmp___ns1__GetInstanceReplicationStatus, "-ns1:GetInstanceReplicationStatus", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetInstanceReplicationStatusResponse_)
		return soap_closesock(soap);
	ns1__GetInstanceReplicationStatusResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetInstanceReplicationStatusResponse_->soap_get(soap, "ns1:GetInstanceReplicationStatusResponse", "ns1:GetInstanceReplicationStatusResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::CreateContainer(const char *endpoint, const char *soap_action, ns1__CreateContainer *ns1__CreateContainer_, ns1__CreateContainerResponse *ns1__CreateContainerResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__CreateContainer soap_tmp___ns1__CreateContainer;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/CreateContainerRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CreateContainer.ns1__CreateContainer_ = ns1__CreateContainer_;
	soap_serializeheader(soap);
	soap_serialize___ns1__CreateContainer(soap, &soap_tmp___ns1__CreateContainer);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CreateContainer(soap, &soap_tmp___ns1__CreateContainer, "-ns1:CreateContainer", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CreateContainer(soap, &soap_tmp___ns1__CreateContainer, "-ns1:CreateContainer", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CreateContainerResponse_)
		return soap_closesock(soap);
	ns1__CreateContainerResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CreateContainerResponse_->soap_get(soap, "ns1:CreateContainerResponse", "ns1:CreateContainerResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::CreateTemplate(const char *endpoint, const char *soap_action, ns1__CreateTemplate *ns1__CreateTemplate_, ns1__CreateTemplateResponse *ns1__CreateTemplateResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__CreateTemplate soap_tmp___ns1__CreateTemplate;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/CreateTemplateRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CreateTemplate.ns1__CreateTemplate_ = ns1__CreateTemplate_;
	soap_serializeheader(soap);
	soap_serialize___ns1__CreateTemplate(soap, &soap_tmp___ns1__CreateTemplate);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CreateTemplate(soap, &soap_tmp___ns1__CreateTemplate, "-ns1:CreateTemplate", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CreateTemplate(soap, &soap_tmp___ns1__CreateTemplate, "-ns1:CreateTemplate", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CreateTemplateResponse_)
		return soap_closesock(soap);
	ns1__CreateTemplateResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CreateTemplateResponse_->soap_get(soap, "ns1:CreateTemplateResponse", "ns1:CreateTemplateResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::CreateDynorg(const char *endpoint, const char *soap_action, ns1__CreateDynorg *ns1__CreateDynorg_, ns1__CreateDynorgResponse *ns1__CreateDynorgResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__CreateDynorg soap_tmp___ns1__CreateDynorg;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/CreateDynorgRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CreateDynorg.ns1__CreateDynorg_ = ns1__CreateDynorg_;
	soap_serializeheader(soap);
	soap_serialize___ns1__CreateDynorg(soap, &soap_tmp___ns1__CreateDynorg);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CreateDynorg(soap, &soap_tmp___ns1__CreateDynorg, "-ns1:CreateDynorg", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CreateDynorg(soap, &soap_tmp___ns1__CreateDynorg, "-ns1:CreateDynorg", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CreateDynorgResponse_)
		return soap_closesock(soap);
	ns1__CreateDynorgResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CreateDynorgResponse_->soap_get(soap, "ns1:CreateDynorgResponse", "ns1:CreateDynorgResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetFieldList(const char *endpoint, const char *soap_action, ns1__GetFieldList *ns1__GetFieldList_, ns1__GetFieldListResponse *ns1__GetFieldListResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetFieldList soap_tmp___ns1__GetFieldList;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetFieldListRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetFieldList.ns1__GetFieldList_ = ns1__GetFieldList_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetFieldList(soap, &soap_tmp___ns1__GetFieldList);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetFieldList(soap, &soap_tmp___ns1__GetFieldList, "-ns1:GetFieldList", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetFieldList(soap, &soap_tmp___ns1__GetFieldList, "-ns1:GetFieldList", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetFieldListResponse_)
		return soap_closesock(soap);
	ns1__GetFieldListResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetFieldListResponse_->soap_get(soap, "ns1:GetFieldListResponse", "ns1:GetFieldListResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetFieldProperties(const char *endpoint, const char *soap_action, ns1__GetFieldProperties *ns1__GetFieldProperties_, ns1__GetFieldPropertiesResponse *ns1__GetFieldPropertiesResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetFieldProperties soap_tmp___ns1__GetFieldProperties;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetFieldPropertiesRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetFieldProperties.ns1__GetFieldProperties_ = ns1__GetFieldProperties_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetFieldProperties(soap, &soap_tmp___ns1__GetFieldProperties);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetFieldProperties(soap, &soap_tmp___ns1__GetFieldProperties, "-ns1:GetFieldProperties", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetFieldProperties(soap, &soap_tmp___ns1__GetFieldProperties, "-ns1:GetFieldProperties", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetFieldPropertiesResponse_)
		return soap_closesock(soap);
	ns1__GetFieldPropertiesResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetFieldPropertiesResponse_->soap_get(soap, "ns1:GetFieldPropertiesResponse", "ns1:GetFieldPropertiesResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetFieldsPropertiesFromTemplate(const char *endpoint, const char *soap_action, ns1__GetFieldsPropertiesFromTemplate *ns1__GetFieldsPropertiesFromTemplate_, ns1__GetFieldsPropertiesFromTemplateResponse *ns1__GetFieldsPropertiesFromTemplateResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetFieldsPropertiesFromTemplate soap_tmp___ns1__GetFieldsPropertiesFromTemplate;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetFieldsPropertiesFromTemplateRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetFieldsPropertiesFromTemplate.ns1__GetFieldsPropertiesFromTemplate_ = ns1__GetFieldsPropertiesFromTemplate_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetFieldsPropertiesFromTemplate(soap, &soap_tmp___ns1__GetFieldsPropertiesFromTemplate);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetFieldsPropertiesFromTemplate(soap, &soap_tmp___ns1__GetFieldsPropertiesFromTemplate, "-ns1:GetFieldsPropertiesFromTemplate", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetFieldsPropertiesFromTemplate(soap, &soap_tmp___ns1__GetFieldsPropertiesFromTemplate, "-ns1:GetFieldsPropertiesFromTemplate", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetFieldsPropertiesFromTemplateResponse_)
		return soap_closesock(soap);
	ns1__GetFieldsPropertiesFromTemplateResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetFieldsPropertiesFromTemplateResponse_->soap_get(soap, "ns1:GetFieldsPropertiesFromTemplateResponse", "ns1:GetFieldsPropertiesFromTemplateResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetAdjacentArchiBox(const char *endpoint, const char *soap_action, ns1__GetAdjacentArchiBox *ns1__GetAdjacentArchiBox_, ns1__GetAdjacentArchiBoxResponse *ns1__GetAdjacentArchiBoxResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetAdjacentArchiBox soap_tmp___ns1__GetAdjacentArchiBox;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetAdjacentArchiBoxRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetAdjacentArchiBox.ns1__GetAdjacentArchiBox_ = ns1__GetAdjacentArchiBox_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetAdjacentArchiBox(soap, &soap_tmp___ns1__GetAdjacentArchiBox);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetAdjacentArchiBox(soap, &soap_tmp___ns1__GetAdjacentArchiBox, "-ns1:GetAdjacentArchiBox", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetAdjacentArchiBox(soap, &soap_tmp___ns1__GetAdjacentArchiBox, "-ns1:GetAdjacentArchiBox", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetAdjacentArchiBoxResponse_)
		return soap_closesock(soap);
	ns1__GetAdjacentArchiBoxResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetAdjacentArchiBoxResponse_->soap_get(soap, "ns1:GetAdjacentArchiBoxResponse", "ns1:GetAdjacentArchiBoxResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetInstanceReplication(const char *endpoint, const char *soap_action, ns1__GetInstanceReplication *ns1__GetInstanceReplication_, ns1__GetInstanceReplicationResponse *ns1__GetInstanceReplicationResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetInstanceReplication soap_tmp___ns1__GetInstanceReplication;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetInstanceReplicationRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetInstanceReplication.ns1__GetInstanceReplication_ = ns1__GetInstanceReplication_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetInstanceReplication(soap, &soap_tmp___ns1__GetInstanceReplication);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetInstanceReplication(soap, &soap_tmp___ns1__GetInstanceReplication, "-ns1:GetInstanceReplication", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetInstanceReplication(soap, &soap_tmp___ns1__GetInstanceReplication, "-ns1:GetInstanceReplication", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetInstanceReplicationResponse_)
		return soap_closesock(soap);
	ns1__GetInstanceReplicationResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetInstanceReplicationResponse_->soap_get(soap, "ns1:GetInstanceReplicationResponse", "ns1:GetInstanceReplicationResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::Login(const char *endpoint, const char *soap_action, ns1__Login *ns1__Login_, ns1__LoginResponse *ns1__LoginResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__Login soap_tmp___ns1__Login;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/LoginRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__Login.ns1__Login_ = ns1__Login_;
	soap_serializeheader(soap);
	soap_serialize___ns1__Login(soap, &soap_tmp___ns1__Login);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__Login(soap, &soap_tmp___ns1__Login, "-ns1:Login", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__Login(soap, &soap_tmp___ns1__Login, "-ns1:Login", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__LoginResponse_)
		return soap_closesock(soap);
	ns1__LoginResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__LoginResponse_->soap_get(soap, "ns1:LoginResponse", "ns1:LoginResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::Logout(const char *endpoint, const char *soap_action, ns1__Logout *ns1__Logout_, ns1__LogoutResponse *ns1__LogoutResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__Logout soap_tmp___ns1__Logout;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/LogoutRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__Logout.ns1__Logout_ = ns1__Logout_;
	soap_serializeheader(soap);
	soap_serialize___ns1__Logout(soap, &soap_tmp___ns1__Logout);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__Logout(soap, &soap_tmp___ns1__Logout, "-ns1:Logout", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__Logout(soap, &soap_tmp___ns1__Logout, "-ns1:Logout", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__LogoutResponse_)
		return soap_closesock(soap);
	ns1__LogoutResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__LogoutResponse_->soap_get(soap, "ns1:LogoutResponse", "ns1:LogoutResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::InsertSchedulerTask(const char *endpoint, const char *soap_action, ns1__InsertSchedulerTask *ns1__InsertSchedulerTask_, ns1__InsertSchedulerTaskResponse *ns1__InsertSchedulerTaskResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__InsertSchedulerTask soap_tmp___ns1__InsertSchedulerTask;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/InsertSchedulerTaskRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__InsertSchedulerTask.ns1__InsertSchedulerTask_ = ns1__InsertSchedulerTask_;
	soap_serializeheader(soap);
	soap_serialize___ns1__InsertSchedulerTask(soap, &soap_tmp___ns1__InsertSchedulerTask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__InsertSchedulerTask(soap, &soap_tmp___ns1__InsertSchedulerTask, "-ns1:InsertSchedulerTask", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__InsertSchedulerTask(soap, &soap_tmp___ns1__InsertSchedulerTask, "-ns1:InsertSchedulerTask", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__InsertSchedulerTaskResponse_)
		return soap_closesock(soap);
	ns1__InsertSchedulerTaskResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__InsertSchedulerTaskResponse_->soap_get(soap, "ns1:InsertSchedulerTaskResponse", "ns1:InsertSchedulerTaskResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetSchedulerTasks(const char *endpoint, const char *soap_action, ns1__GetSchedulerTasks *ns1__GetSchedulerTasks_, ns1__GetSchedulerTasksResponse *ns1__GetSchedulerTasksResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetSchedulerTasks soap_tmp___ns1__GetSchedulerTasks;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetSchedulerTasksRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetSchedulerTasks.ns1__GetSchedulerTasks_ = ns1__GetSchedulerTasks_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetSchedulerTasks(soap, &soap_tmp___ns1__GetSchedulerTasks);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetSchedulerTasks(soap, &soap_tmp___ns1__GetSchedulerTasks, "-ns1:GetSchedulerTasks", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetSchedulerTasks(soap, &soap_tmp___ns1__GetSchedulerTasks, "-ns1:GetSchedulerTasks", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetSchedulerTasksResponse_)
		return soap_closesock(soap);
	ns1__GetSchedulerTasksResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetSchedulerTasksResponse_->soap_get(soap, "ns1:GetSchedulerTasksResponse", "ns1:GetSchedulerTasksResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::DeleteSchedulerTask(const char *endpoint, const char *soap_action, ns1__DeleteSchedulerTask *ns1__DeleteSchedulerTask_, ns1__DeleteSchedulerTaskResponse *ns1__DeleteSchedulerTaskResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__DeleteSchedulerTask soap_tmp___ns1__DeleteSchedulerTask;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/DeleteSchedulerTaskRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DeleteSchedulerTask.ns1__DeleteSchedulerTask_ = ns1__DeleteSchedulerTask_;
	soap_serializeheader(soap);
	soap_serialize___ns1__DeleteSchedulerTask(soap, &soap_tmp___ns1__DeleteSchedulerTask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DeleteSchedulerTask(soap, &soap_tmp___ns1__DeleteSchedulerTask, "-ns1:DeleteSchedulerTask", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DeleteSchedulerTask(soap, &soap_tmp___ns1__DeleteSchedulerTask, "-ns1:DeleteSchedulerTask", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DeleteSchedulerTaskResponse_)
		return soap_closesock(soap);
	ns1__DeleteSchedulerTaskResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DeleteSchedulerTaskResponse_->soap_get(soap, "ns1:DeleteSchedulerTaskResponse", "ns1:DeleteSchedulerTaskResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetSchedulerTasksToRun(const char *endpoint, const char *soap_action, ns1__GetSchedulerTasksToRun *ns1__GetSchedulerTasksToRun_, ns1__GetSchedulerTasksToRunResponse *ns1__GetSchedulerTasksToRunResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetSchedulerTasksToRun soap_tmp___ns1__GetSchedulerTasksToRun;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetSchedulerTasksToRunRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetSchedulerTasksToRun.ns1__GetSchedulerTasksToRun_ = ns1__GetSchedulerTasksToRun_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetSchedulerTasksToRun(soap, &soap_tmp___ns1__GetSchedulerTasksToRun);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetSchedulerTasksToRun(soap, &soap_tmp___ns1__GetSchedulerTasksToRun, "-ns1:GetSchedulerTasksToRun", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetSchedulerTasksToRun(soap, &soap_tmp___ns1__GetSchedulerTasksToRun, "-ns1:GetSchedulerTasksToRun", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetSchedulerTasksToRunResponse_)
		return soap_closesock(soap);
	ns1__GetSchedulerTasksToRunResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetSchedulerTasksToRunResponse_->soap_get(soap, "ns1:GetSchedulerTasksToRunResponse", "ns1:GetSchedulerTasksToRunResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::SchedulerTaskScheduleProcessed(const char *endpoint, const char *soap_action, ns1__SchedulerTaskScheduleProcessed *ns1__SchedulerTaskScheduleProcessed_, ns1__SchedulerTaskScheduleProcessedResponse *ns1__SchedulerTaskScheduleProcessedResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__SchedulerTaskScheduleProcessed soap_tmp___ns1__SchedulerTaskScheduleProcessed;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/SchedulerTaskScheduleProcessedRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__SchedulerTaskScheduleProcessed.ns1__SchedulerTaskScheduleProcessed_ = ns1__SchedulerTaskScheduleProcessed_;
	soap_serializeheader(soap);
	soap_serialize___ns1__SchedulerTaskScheduleProcessed(soap, &soap_tmp___ns1__SchedulerTaskScheduleProcessed);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__SchedulerTaskScheduleProcessed(soap, &soap_tmp___ns1__SchedulerTaskScheduleProcessed, "-ns1:SchedulerTaskScheduleProcessed", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__SchedulerTaskScheduleProcessed(soap, &soap_tmp___ns1__SchedulerTaskScheduleProcessed, "-ns1:SchedulerTaskScheduleProcessed", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__SchedulerTaskScheduleProcessedResponse_)
		return soap_closesock(soap);
	ns1__SchedulerTaskScheduleProcessedResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__SchedulerTaskScheduleProcessedResponse_->soap_get(soap, "ns1:SchedulerTaskScheduleProcessedResponse", "ns1:SchedulerTaskScheduleProcessedResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::ModifySchedulerTaskSchedule(const char *endpoint, const char *soap_action, ns1__ModifySchedulerTaskSchedule *ns1__ModifySchedulerTaskSchedule_, ns1__ModifySchedulerTaskScheduleResponse *ns1__ModifySchedulerTaskScheduleResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__ModifySchedulerTaskSchedule soap_tmp___ns1__ModifySchedulerTaskSchedule;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/ModifySchedulerTaskScheduleRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ModifySchedulerTaskSchedule.ns1__ModifySchedulerTaskSchedule_ = ns1__ModifySchedulerTaskSchedule_;
	soap_serializeheader(soap);
	soap_serialize___ns1__ModifySchedulerTaskSchedule(soap, &soap_tmp___ns1__ModifySchedulerTaskSchedule);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ModifySchedulerTaskSchedule(soap, &soap_tmp___ns1__ModifySchedulerTaskSchedule, "-ns1:ModifySchedulerTaskSchedule", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ModifySchedulerTaskSchedule(soap, &soap_tmp___ns1__ModifySchedulerTaskSchedule, "-ns1:ModifySchedulerTaskSchedule", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ModifySchedulerTaskScheduleResponse_)
		return soap_closesock(soap);
	ns1__ModifySchedulerTaskScheduleResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ModifySchedulerTaskScheduleResponse_->soap_get(soap, "ns1:ModifySchedulerTaskScheduleResponse", "ns1:ModifySchedulerTaskScheduleResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::DeleteSchedulerTaskSchedule(const char *endpoint, const char *soap_action, ns1__DeleteSchedulerTaskSchedule *ns1__DeleteSchedulerTaskSchedule_, ns1__DeleteSchedulerTaskScheduleResponse *ns1__DeleteSchedulerTaskScheduleResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__DeleteSchedulerTaskSchedule soap_tmp___ns1__DeleteSchedulerTaskSchedule;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/DeleteSchedulerTaskScheduleRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DeleteSchedulerTaskSchedule.ns1__DeleteSchedulerTaskSchedule_ = ns1__DeleteSchedulerTaskSchedule_;
	soap_serializeheader(soap);
	soap_serialize___ns1__DeleteSchedulerTaskSchedule(soap, &soap_tmp___ns1__DeleteSchedulerTaskSchedule);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DeleteSchedulerTaskSchedule(soap, &soap_tmp___ns1__DeleteSchedulerTaskSchedule, "-ns1:DeleteSchedulerTaskSchedule", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DeleteSchedulerTaskSchedule(soap, &soap_tmp___ns1__DeleteSchedulerTaskSchedule, "-ns1:DeleteSchedulerTaskSchedule", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DeleteSchedulerTaskScheduleResponse_)
		return soap_closesock(soap);
	ns1__DeleteSchedulerTaskScheduleResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DeleteSchedulerTaskScheduleResponse_->soap_get(soap, "ns1:DeleteSchedulerTaskScheduleResponse", "ns1:DeleteSchedulerTaskScheduleResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::ChangeSchedulerTaskScheduleStatus(const char *endpoint, const char *soap_action, ns1__ChangeSchedulerTaskScheduleStatus *ns1__ChangeSchedulerTaskScheduleStatus_, ns1__ChangeSchedulerTaskScheduleStatusResponse *ns1__ChangeSchedulerTaskScheduleStatusResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__ChangeSchedulerTaskScheduleStatus soap_tmp___ns1__ChangeSchedulerTaskScheduleStatus;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/ChangeSchedulerTaskScheduleStatusRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ChangeSchedulerTaskScheduleStatus.ns1__ChangeSchedulerTaskScheduleStatus_ = ns1__ChangeSchedulerTaskScheduleStatus_;
	soap_serializeheader(soap);
	soap_serialize___ns1__ChangeSchedulerTaskScheduleStatus(soap, &soap_tmp___ns1__ChangeSchedulerTaskScheduleStatus);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ChangeSchedulerTaskScheduleStatus(soap, &soap_tmp___ns1__ChangeSchedulerTaskScheduleStatus, "-ns1:ChangeSchedulerTaskScheduleStatus", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ChangeSchedulerTaskScheduleStatus(soap, &soap_tmp___ns1__ChangeSchedulerTaskScheduleStatus, "-ns1:ChangeSchedulerTaskScheduleStatus", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ChangeSchedulerTaskScheduleStatusResponse_)
		return soap_closesock(soap);
	ns1__ChangeSchedulerTaskScheduleStatusResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ChangeSchedulerTaskScheduleStatusResponse_->soap_get(soap, "ns1:ChangeSchedulerTaskScheduleStatusResponse", "ns1:ChangeSchedulerTaskScheduleStatusResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::ModifyField(const char *endpoint, const char *soap_action, ns1__ModifyField *ns1__ModifyField_, ns1__ModifyFieldResponse *ns1__ModifyFieldResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__ModifyField soap_tmp___ns1__ModifyField;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/ModifyFieldRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ModifyField.ns1__ModifyField_ = ns1__ModifyField_;
	soap_serializeheader(soap);
	soap_serialize___ns1__ModifyField(soap, &soap_tmp___ns1__ModifyField);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ModifyField(soap, &soap_tmp___ns1__ModifyField, "-ns1:ModifyField", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ModifyField(soap, &soap_tmp___ns1__ModifyField, "-ns1:ModifyField", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ModifyFieldResponse_)
		return soap_closesock(soap);
	ns1__ModifyFieldResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ModifyFieldResponse_->soap_get(soap, "ns1:ModifyFieldResponse", "ns1:ModifyFieldResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::DeleteField(const char *endpoint, const char *soap_action, ns1__DeleteField *ns1__DeleteField_, ns1__DeleteFieldResponse *ns1__DeleteFieldResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__DeleteField soap_tmp___ns1__DeleteField;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/DeleteFieldRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DeleteField.ns1__DeleteField_ = ns1__DeleteField_;
	soap_serializeheader(soap);
	soap_serialize___ns1__DeleteField(soap, &soap_tmp___ns1__DeleteField);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DeleteField(soap, &soap_tmp___ns1__DeleteField, "-ns1:DeleteField", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DeleteField(soap, &soap_tmp___ns1__DeleteField, "-ns1:DeleteField", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DeleteFieldResponse_)
		return soap_closesock(soap);
	ns1__DeleteFieldResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DeleteFieldResponse_->soap_get(soap, "ns1:DeleteFieldResponse", "ns1:DeleteFieldResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::CreateField(const char *endpoint, const char *soap_action, ns1__CreateField *ns1__CreateField_, ns1__CreateFieldResponse *ns1__CreateFieldResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__CreateField soap_tmp___ns1__CreateField;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/CreateFieldRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CreateField.ns1__CreateField_ = ns1__CreateField_;
	soap_serializeheader(soap);
	soap_serialize___ns1__CreateField(soap, &soap_tmp___ns1__CreateField);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CreateField(soap, &soap_tmp___ns1__CreateField, "-ns1:CreateField", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CreateField(soap, &soap_tmp___ns1__CreateField, "-ns1:CreateField", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CreateFieldResponse_)
		return soap_closesock(soap);
	ns1__CreateFieldResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CreateFieldResponse_->soap_get(soap, "ns1:CreateFieldResponse", "ns1:CreateFieldResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::canModifyField(const char *endpoint, const char *soap_action, ns1__canModifyField *ns1__canModifyField_, ns1__canModifyFieldResponse *ns1__canModifyFieldResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__canModifyField soap_tmp___ns1__canModifyField;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/canModifyFieldRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__canModifyField.ns1__canModifyField_ = ns1__canModifyField_;
	soap_serializeheader(soap);
	soap_serialize___ns1__canModifyField(soap, &soap_tmp___ns1__canModifyField);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__canModifyField(soap, &soap_tmp___ns1__canModifyField, "-ns1:canModifyField", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__canModifyField(soap, &soap_tmp___ns1__canModifyField, "-ns1:canModifyField", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__canModifyFieldResponse_)
		return soap_closesock(soap);
	ns1__canModifyFieldResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__canModifyFieldResponse_->soap_get(soap, "ns1:canModifyFieldResponse", "ns1:canModifyFieldResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::canDeleteField(const char *endpoint, const char *soap_action, ns1__canDeleteField *ns1__canDeleteField_, ns1__canDeleteFieldResponse *ns1__canDeleteFieldResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__canDeleteField soap_tmp___ns1__canDeleteField;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/canDeleteFieldRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__canDeleteField.ns1__canDeleteField_ = ns1__canDeleteField_;
	soap_serializeheader(soap);
	soap_serialize___ns1__canDeleteField(soap, &soap_tmp___ns1__canDeleteField);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__canDeleteField(soap, &soap_tmp___ns1__canDeleteField, "-ns1:canDeleteField", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__canDeleteField(soap, &soap_tmp___ns1__canDeleteField, "-ns1:canDeleteField", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__canDeleteFieldResponse_)
		return soap_closesock(soap);
	ns1__canDeleteFieldResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__canDeleteFieldResponse_->soap_get(soap, "ns1:canDeleteFieldResponse", "ns1:canDeleteFieldResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::canCreateField(const char *endpoint, const char *soap_action, ns1__canCreateField *ns1__canCreateField_, ns1__canCreateFieldResponse *ns1__canCreateFieldResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__canCreateField soap_tmp___ns1__canCreateField;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/canCreateFieldRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__canCreateField.ns1__canCreateField_ = ns1__canCreateField_;
	soap_serializeheader(soap);
	soap_serialize___ns1__canCreateField(soap, &soap_tmp___ns1__canCreateField);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__canCreateField(soap, &soap_tmp___ns1__canCreateField, "-ns1:canCreateField", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__canCreateField(soap, &soap_tmp___ns1__canCreateField, "-ns1:canCreateField", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__canCreateFieldResponse_)
		return soap_closesock(soap);
	ns1__canCreateFieldResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__canCreateFieldResponse_->soap_get(soap, "ns1:canCreateFieldResponse", "ns1:canCreateFieldResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::CanDeleteLinkFromContainer(const char *endpoint, const char *soap_action, ns1__CanDeleteLinkFromContainer *ns1__CanDeleteLinkFromContainer_, ns1__CanDeleteLinkFromContainerResponse *ns1__CanDeleteLinkFromContainerResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__CanDeleteLinkFromContainer soap_tmp___ns1__CanDeleteLinkFromContainer;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/CanDeleteLinkFromContainerRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CanDeleteLinkFromContainer.ns1__CanDeleteLinkFromContainer_ = ns1__CanDeleteLinkFromContainer_;
	soap_serializeheader(soap);
	soap_serialize___ns1__CanDeleteLinkFromContainer(soap, &soap_tmp___ns1__CanDeleteLinkFromContainer);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CanDeleteLinkFromContainer(soap, &soap_tmp___ns1__CanDeleteLinkFromContainer, "-ns1:CanDeleteLinkFromContainer", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CanDeleteLinkFromContainer(soap, &soap_tmp___ns1__CanDeleteLinkFromContainer, "-ns1:CanDeleteLinkFromContainer", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CanDeleteLinkFromContainerResponse_)
		return soap_closesock(soap);
	ns1__CanDeleteLinkFromContainerResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CanDeleteLinkFromContainerResponse_->soap_get(soap, "ns1:CanDeleteLinkFromContainerResponse", "ns1:CanDeleteLinkFromContainerResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetDomainList(const char *endpoint, const char *soap_action, ns1__GetDomainList *ns1__GetDomainList_, ns1__GetDomainListResponse *ns1__GetDomainListResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetDomainList soap_tmp___ns1__GetDomainList;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetDomainListRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetDomainList.ns1__GetDomainList_ = ns1__GetDomainList_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetDomainList(soap, &soap_tmp___ns1__GetDomainList);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetDomainList(soap, &soap_tmp___ns1__GetDomainList, "-ns1:GetDomainList", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetDomainList(soap, &soap_tmp___ns1__GetDomainList, "-ns1:GetDomainList", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetDomainListResponse_)
		return soap_closesock(soap);
	ns1__GetDomainListResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetDomainListResponse_->soap_get(soap, "ns1:GetDomainListResponse", "ns1:GetDomainListResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::InsertLinkContainerToContainer(const char *endpoint, const char *soap_action, ns1__InsertLinkContainerToContainer *ns1__InsertLinkContainerToContainer_, ns1__InsertLinkContainerToContainerResponse *ns1__InsertLinkContainerToContainerResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__InsertLinkContainerToContainer soap_tmp___ns1__InsertLinkContainerToContainer;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/InsertLinkContainerToContainerRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__InsertLinkContainerToContainer.ns1__InsertLinkContainerToContainer_ = ns1__InsertLinkContainerToContainer_;
	soap_serializeheader(soap);
	soap_serialize___ns1__InsertLinkContainerToContainer(soap, &soap_tmp___ns1__InsertLinkContainerToContainer);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__InsertLinkContainerToContainer(soap, &soap_tmp___ns1__InsertLinkContainerToContainer, "-ns1:InsertLinkContainerToContainer", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__InsertLinkContainerToContainer(soap, &soap_tmp___ns1__InsertLinkContainerToContainer, "-ns1:InsertLinkContainerToContainer", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__InsertLinkContainerToContainerResponse_)
		return soap_closesock(soap);
	ns1__InsertLinkContainerToContainerResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__InsertLinkContainerToContainerResponse_->soap_get(soap, "ns1:InsertLinkContainerToContainerResponse", "ns1:InsertLinkContainerToContainerResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::CanInsertLinkContainerToContainer(const char *endpoint, const char *soap_action, ns1__CanInsertLinkContainerToContainer *ns1__CanInsertLinkContainerToContainer_, ns1__CanInsertLinkContainerToContainerResponse *ns1__CanInsertLinkContainerToContainerResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__CanInsertLinkContainerToContainer soap_tmp___ns1__CanInsertLinkContainerToContainer;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/CanInsertLinkContainerToContainerRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CanInsertLinkContainerToContainer.ns1__CanInsertLinkContainerToContainer_ = ns1__CanInsertLinkContainerToContainer_;
	soap_serializeheader(soap);
	soap_serialize___ns1__CanInsertLinkContainerToContainer(soap, &soap_tmp___ns1__CanInsertLinkContainerToContainer);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CanInsertLinkContainerToContainer(soap, &soap_tmp___ns1__CanInsertLinkContainerToContainer, "-ns1:CanInsertLinkContainerToContainer", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CanInsertLinkContainerToContainer(soap, &soap_tmp___ns1__CanInsertLinkContainerToContainer, "-ns1:CanInsertLinkContainerToContainer", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CanInsertLinkContainerToContainerResponse_)
		return soap_closesock(soap);
	ns1__CanInsertLinkContainerToContainerResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CanInsertLinkContainerToContainerResponse_->soap_get(soap, "ns1:CanInsertLinkContainerToContainerResponse", "ns1:CanInsertLinkContainerToContainerResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::InsertLinkContainerToDocument(const char *endpoint, const char *soap_action, ns1__InsertLinkContainerToDocument *ns1__InsertLinkContainerToDocument_, ns1__InsertLinkContainerToDocumentResponse *ns1__InsertLinkContainerToDocumentResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__InsertLinkContainerToDocument soap_tmp___ns1__InsertLinkContainerToDocument;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/InsertLinkContainerToDocumentRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__InsertLinkContainerToDocument.ns1__InsertLinkContainerToDocument_ = ns1__InsertLinkContainerToDocument_;
	soap_serializeheader(soap);
	soap_serialize___ns1__InsertLinkContainerToDocument(soap, &soap_tmp___ns1__InsertLinkContainerToDocument);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__InsertLinkContainerToDocument(soap, &soap_tmp___ns1__InsertLinkContainerToDocument, "-ns1:InsertLinkContainerToDocument", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__InsertLinkContainerToDocument(soap, &soap_tmp___ns1__InsertLinkContainerToDocument, "-ns1:InsertLinkContainerToDocument", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__InsertLinkContainerToDocumentResponse_)
		return soap_closesock(soap);
	ns1__InsertLinkContainerToDocumentResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__InsertLinkContainerToDocumentResponse_->soap_get(soap, "ns1:InsertLinkContainerToDocumentResponse", "ns1:InsertLinkContainerToDocumentResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::CanInsertLinkContainerToDocument(const char *endpoint, const char *soap_action, ns1__CanInsertLinkContainerToDocument *ns1__CanInsertLinkContainerToDocument_, ns1__CanInsertLinkContainerToDocumentResponse *ns1__CanInsertLinkContainerToDocumentResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__CanInsertLinkContainerToDocument soap_tmp___ns1__CanInsertLinkContainerToDocument;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/CanInsertLinkContainerToDocumentRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CanInsertLinkContainerToDocument.ns1__CanInsertLinkContainerToDocument_ = ns1__CanInsertLinkContainerToDocument_;
	soap_serializeheader(soap);
	soap_serialize___ns1__CanInsertLinkContainerToDocument(soap, &soap_tmp___ns1__CanInsertLinkContainerToDocument);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CanInsertLinkContainerToDocument(soap, &soap_tmp___ns1__CanInsertLinkContainerToDocument, "-ns1:CanInsertLinkContainerToDocument", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CanInsertLinkContainerToDocument(soap, &soap_tmp___ns1__CanInsertLinkContainerToDocument, "-ns1:CanInsertLinkContainerToDocument", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CanInsertLinkContainerToDocumentResponse_)
		return soap_closesock(soap);
	ns1__CanInsertLinkContainerToDocumentResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CanInsertLinkContainerToDocumentResponse_->soap_get(soap, "ns1:CanInsertLinkContainerToDocumentResponse", "ns1:CanInsertLinkContainerToDocumentResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::InsertLinkDocumentToDocument(const char *endpoint, const char *soap_action, ns1__InsertLinkDocumentToDocument *ns1__InsertLinkDocumentToDocument_, ns1__InsertLinkDocumentToDocumentResponse *ns1__InsertLinkDocumentToDocumentResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__InsertLinkDocumentToDocument soap_tmp___ns1__InsertLinkDocumentToDocument;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/InsertLinkDocumentToDocumentRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__InsertLinkDocumentToDocument.ns1__InsertLinkDocumentToDocument_ = ns1__InsertLinkDocumentToDocument_;
	soap_serializeheader(soap);
	soap_serialize___ns1__InsertLinkDocumentToDocument(soap, &soap_tmp___ns1__InsertLinkDocumentToDocument);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__InsertLinkDocumentToDocument(soap, &soap_tmp___ns1__InsertLinkDocumentToDocument, "-ns1:InsertLinkDocumentToDocument", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__InsertLinkDocumentToDocument(soap, &soap_tmp___ns1__InsertLinkDocumentToDocument, "-ns1:InsertLinkDocumentToDocument", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__InsertLinkDocumentToDocumentResponse_)
		return soap_closesock(soap);
	ns1__InsertLinkDocumentToDocumentResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__InsertLinkDocumentToDocumentResponse_->soap_get(soap, "ns1:InsertLinkDocumentToDocumentResponse", "ns1:InsertLinkDocumentToDocumentResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::CanInsertLinkDocumentToDocument(const char *endpoint, const char *soap_action, ns1__CanInsertLinkDocumentToDocument *ns1__CanInsertLinkDocumentToDocument_, ns1__CanInsertLinkDocumentToDocumentResponse *ns1__CanInsertLinkDocumentToDocumentResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__CanInsertLinkDocumentToDocument soap_tmp___ns1__CanInsertLinkDocumentToDocument;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/CanInsertLinkDocumentToDocumentRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CanInsertLinkDocumentToDocument.ns1__CanInsertLinkDocumentToDocument_ = ns1__CanInsertLinkDocumentToDocument_;
	soap_serializeheader(soap);
	soap_serialize___ns1__CanInsertLinkDocumentToDocument(soap, &soap_tmp___ns1__CanInsertLinkDocumentToDocument);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CanInsertLinkDocumentToDocument(soap, &soap_tmp___ns1__CanInsertLinkDocumentToDocument, "-ns1:CanInsertLinkDocumentToDocument", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CanInsertLinkDocumentToDocument(soap, &soap_tmp___ns1__CanInsertLinkDocumentToDocument, "-ns1:CanInsertLinkDocumentToDocument", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CanInsertLinkDocumentToDocumentResponse_)
		return soap_closesock(soap);
	ns1__CanInsertLinkDocumentToDocumentResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CanInsertLinkDocumentToDocumentResponse_->soap_get(soap, "ns1:CanInsertLinkDocumentToDocumentResponse", "ns1:CanInsertLinkDocumentToDocumentResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::ModifyLinkContainerToContainer(const char *endpoint, const char *soap_action, ns1__ModifyLinkContainerToContainer *ns1__ModifyLinkContainerToContainer_, ns1__ModifyLinkContainerToContainerResponse *ns1__ModifyLinkContainerToContainerResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__ModifyLinkContainerToContainer soap_tmp___ns1__ModifyLinkContainerToContainer;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/ModifyLinkContainerToContainerRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ModifyLinkContainerToContainer.ns1__ModifyLinkContainerToContainer_ = ns1__ModifyLinkContainerToContainer_;
	soap_serializeheader(soap);
	soap_serialize___ns1__ModifyLinkContainerToContainer(soap, &soap_tmp___ns1__ModifyLinkContainerToContainer);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ModifyLinkContainerToContainer(soap, &soap_tmp___ns1__ModifyLinkContainerToContainer, "-ns1:ModifyLinkContainerToContainer", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ModifyLinkContainerToContainer(soap, &soap_tmp___ns1__ModifyLinkContainerToContainer, "-ns1:ModifyLinkContainerToContainer", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ModifyLinkContainerToContainerResponse_)
		return soap_closesock(soap);
	ns1__ModifyLinkContainerToContainerResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ModifyLinkContainerToContainerResponse_->soap_get(soap, "ns1:ModifyLinkContainerToContainerResponse", "ns1:ModifyLinkContainerToContainerResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::CanModifyLinkContainerToContainer(const char *endpoint, const char *soap_action, ns1__CanModifyLinkContainerToContainer *ns1__CanModifyLinkContainerToContainer_, ns1__CanModifyLinkContainerToContainerResponse *ns1__CanModifyLinkContainerToContainerResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__CanModifyLinkContainerToContainer soap_tmp___ns1__CanModifyLinkContainerToContainer;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/CanModifyLinkContainerToContainerRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CanModifyLinkContainerToContainer.ns1__CanModifyLinkContainerToContainer_ = ns1__CanModifyLinkContainerToContainer_;
	soap_serializeheader(soap);
	soap_serialize___ns1__CanModifyLinkContainerToContainer(soap, &soap_tmp___ns1__CanModifyLinkContainerToContainer);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CanModifyLinkContainerToContainer(soap, &soap_tmp___ns1__CanModifyLinkContainerToContainer, "-ns1:CanModifyLinkContainerToContainer", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CanModifyLinkContainerToContainer(soap, &soap_tmp___ns1__CanModifyLinkContainerToContainer, "-ns1:CanModifyLinkContainerToContainer", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CanModifyLinkContainerToContainerResponse_)
		return soap_closesock(soap);
	ns1__CanModifyLinkContainerToContainerResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CanModifyLinkContainerToContainerResponse_->soap_get(soap, "ns1:CanModifyLinkContainerToContainerResponse", "ns1:CanModifyLinkContainerToContainerResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::ModifyLinkContainerToDocument(const char *endpoint, const char *soap_action, ns1__ModifyLinkContainerToDocument *ns1__ModifyLinkContainerToDocument_, ns1__ModifyLinkContainerToDocumentResponse *ns1__ModifyLinkContainerToDocumentResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__ModifyLinkContainerToDocument soap_tmp___ns1__ModifyLinkContainerToDocument;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/ModifyLinkContainerToDocumentRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ModifyLinkContainerToDocument.ns1__ModifyLinkContainerToDocument_ = ns1__ModifyLinkContainerToDocument_;
	soap_serializeheader(soap);
	soap_serialize___ns1__ModifyLinkContainerToDocument(soap, &soap_tmp___ns1__ModifyLinkContainerToDocument);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ModifyLinkContainerToDocument(soap, &soap_tmp___ns1__ModifyLinkContainerToDocument, "-ns1:ModifyLinkContainerToDocument", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ModifyLinkContainerToDocument(soap, &soap_tmp___ns1__ModifyLinkContainerToDocument, "-ns1:ModifyLinkContainerToDocument", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ModifyLinkContainerToDocumentResponse_)
		return soap_closesock(soap);
	ns1__ModifyLinkContainerToDocumentResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ModifyLinkContainerToDocumentResponse_->soap_get(soap, "ns1:ModifyLinkContainerToDocumentResponse", "ns1:ModifyLinkContainerToDocumentResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::CanModifyLinkContainerToDocument(const char *endpoint, const char *soap_action, ns1__CanModifyLinkContainerToDocument *ns1__CanModifyLinkContainerToDocument_, ns1__CanModifyLinkContainerToDocumentResponse *ns1__CanModifyLinkContainerToDocumentResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__CanModifyLinkContainerToDocument soap_tmp___ns1__CanModifyLinkContainerToDocument;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/CanModifyLinkContainerToDocumentRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CanModifyLinkContainerToDocument.ns1__CanModifyLinkContainerToDocument_ = ns1__CanModifyLinkContainerToDocument_;
	soap_serializeheader(soap);
	soap_serialize___ns1__CanModifyLinkContainerToDocument(soap, &soap_tmp___ns1__CanModifyLinkContainerToDocument);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CanModifyLinkContainerToDocument(soap, &soap_tmp___ns1__CanModifyLinkContainerToDocument, "-ns1:CanModifyLinkContainerToDocument", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CanModifyLinkContainerToDocument(soap, &soap_tmp___ns1__CanModifyLinkContainerToDocument, "-ns1:CanModifyLinkContainerToDocument", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CanModifyLinkContainerToDocumentResponse_)
		return soap_closesock(soap);
	ns1__CanModifyLinkContainerToDocumentResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CanModifyLinkContainerToDocumentResponse_->soap_get(soap, "ns1:CanModifyLinkContainerToDocumentResponse", "ns1:CanModifyLinkContainerToDocumentResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::DeleteLink(const char *endpoint, const char *soap_action, ns1__DeleteLink *ns1__DeleteLink_, ns1__DeleteLinkResponse *ns1__DeleteLinkResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__DeleteLink soap_tmp___ns1__DeleteLink;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/DeleteLinkRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DeleteLink.ns1__DeleteLink_ = ns1__DeleteLink_;
	soap_serializeheader(soap);
	soap_serialize___ns1__DeleteLink(soap, &soap_tmp___ns1__DeleteLink);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DeleteLink(soap, &soap_tmp___ns1__DeleteLink, "-ns1:DeleteLink", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DeleteLink(soap, &soap_tmp___ns1__DeleteLink, "-ns1:DeleteLink", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DeleteLinkResponse_)
		return soap_closesock(soap);
	ns1__DeleteLinkResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DeleteLinkResponse_->soap_get(soap, "ns1:DeleteLinkResponse", "ns1:DeleteLinkResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetDocumentLinks(const char *endpoint, const char *soap_action, ns1__GetDocumentLinks *ns1__GetDocumentLinks_, ns1__GetDocumentLinksResponse *ns1__GetDocumentLinksResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetDocumentLinks soap_tmp___ns1__GetDocumentLinks;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetDocumentLinksRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetDocumentLinks.ns1__GetDocumentLinks_ = ns1__GetDocumentLinks_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetDocumentLinks(soap, &soap_tmp___ns1__GetDocumentLinks);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetDocumentLinks(soap, &soap_tmp___ns1__GetDocumentLinks, "-ns1:GetDocumentLinks", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetDocumentLinks(soap, &soap_tmp___ns1__GetDocumentLinks, "-ns1:GetDocumentLinks", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetDocumentLinksResponse_)
		return soap_closesock(soap);
	ns1__GetDocumentLinksResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetDocumentLinksResponse_->soap_get(soap, "ns1:GetDocumentLinksResponse", "ns1:GetDocumentLinksResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetCountLinksToDocument(const char *endpoint, const char *soap_action, ns1__GetCountLinksToDocument *ns1__GetCountLinksToDocument_, ns1__GetCountLinksToDocumentResponse *ns1__GetCountLinksToDocumentResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetCountLinksToDocument soap_tmp___ns1__GetCountLinksToDocument;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetCountLinksToDocumentRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetCountLinksToDocument.ns1__GetCountLinksToDocument_ = ns1__GetCountLinksToDocument_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetCountLinksToDocument(soap, &soap_tmp___ns1__GetCountLinksToDocument);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetCountLinksToDocument(soap, &soap_tmp___ns1__GetCountLinksToDocument, "-ns1:GetCountLinksToDocument", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetCountLinksToDocument(soap, &soap_tmp___ns1__GetCountLinksToDocument, "-ns1:GetCountLinksToDocument", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetCountLinksToDocumentResponse_)
		return soap_closesock(soap);
	ns1__GetCountLinksToDocumentResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetCountLinksToDocumentResponse_->soap_get(soap, "ns1:GetCountLinksToDocumentResponse", "ns1:GetCountLinksToDocumentResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetLinksToDocument(const char *endpoint, const char *soap_action, ns1__GetLinksToDocument *ns1__GetLinksToDocument_, ns1__GetLinksToDocumentResponse *ns1__GetLinksToDocumentResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetLinksToDocument soap_tmp___ns1__GetLinksToDocument;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetLinksToDocumentRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetLinksToDocument.ns1__GetLinksToDocument_ = ns1__GetLinksToDocument_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetLinksToDocument(soap, &soap_tmp___ns1__GetLinksToDocument);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetLinksToDocument(soap, &soap_tmp___ns1__GetLinksToDocument, "-ns1:GetLinksToDocument", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetLinksToDocument(soap, &soap_tmp___ns1__GetLinksToDocument, "-ns1:GetLinksToDocument", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetLinksToDocumentResponse_)
		return soap_closesock(soap);
	ns1__GetLinksToDocumentResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetLinksToDocumentResponse_->soap_get(soap, "ns1:GetLinksToDocumentResponse", "ns1:GetLinksToDocumentResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetInstanceNameFromLinks(const char *endpoint, const char *soap_action, ns1__GetInstanceNameFromLinks *ns1__GetInstanceNameFromLinks_, ns1__GetInstanceNameFromLinksResponse *ns1__GetInstanceNameFromLinksResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetInstanceNameFromLinks soap_tmp___ns1__GetInstanceNameFromLinks;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetInstanceNameFromLinksRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetInstanceNameFromLinks.ns1__GetInstanceNameFromLinks_ = ns1__GetInstanceNameFromLinks_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetInstanceNameFromLinks(soap, &soap_tmp___ns1__GetInstanceNameFromLinks);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetInstanceNameFromLinks(soap, &soap_tmp___ns1__GetInstanceNameFromLinks, "-ns1:GetInstanceNameFromLinks", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetInstanceNameFromLinks(soap, &soap_tmp___ns1__GetInstanceNameFromLinks, "-ns1:GetInstanceNameFromLinks", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetInstanceNameFromLinksResponse_)
		return soap_closesock(soap);
	ns1__GetInstanceNameFromLinksResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetInstanceNameFromLinksResponse_->soap_get(soap, "ns1:GetInstanceNameFromLinksResponse", "ns1:GetInstanceNameFromLinksResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetContainerLinks(const char *endpoint, const char *soap_action, ns1__GetContainerLinks *ns1__GetContainerLinks_, ns1__GetContainerLinksResponse *ns1__GetContainerLinksResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetContainerLinks soap_tmp___ns1__GetContainerLinks;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetContainerLinksRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetContainerLinks.ns1__GetContainerLinks_ = ns1__GetContainerLinks_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetContainerLinks(soap, &soap_tmp___ns1__GetContainerLinks);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetContainerLinks(soap, &soap_tmp___ns1__GetContainerLinks, "-ns1:GetContainerLinks", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetContainerLinks(soap, &soap_tmp___ns1__GetContainerLinks, "-ns1:GetContainerLinks", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetContainerLinksResponse_)
		return soap_closesock(soap);
	ns1__GetContainerLinksResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetContainerLinksResponse_->soap_get(soap, "ns1:GetContainerLinksResponse", "ns1:GetContainerLinksResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::RegenerateDynOrg(const char *endpoint, const char *soap_action, ns1__RegenerateDynOrg *ns1__RegenerateDynOrg_, ns1__RegenerateDynOrgResponse *ns1__RegenerateDynOrgResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__RegenerateDynOrg soap_tmp___ns1__RegenerateDynOrg;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/RegenerateDynOrgRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__RegenerateDynOrg.ns1__RegenerateDynOrg_ = ns1__RegenerateDynOrg_;
	soap_serializeheader(soap);
	soap_serialize___ns1__RegenerateDynOrg(soap, &soap_tmp___ns1__RegenerateDynOrg);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__RegenerateDynOrg(soap, &soap_tmp___ns1__RegenerateDynOrg, "-ns1:RegenerateDynOrg", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__RegenerateDynOrg(soap, &soap_tmp___ns1__RegenerateDynOrg, "-ns1:RegenerateDynOrg", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__RegenerateDynOrgResponse_)
		return soap_closesock(soap);
	ns1__RegenerateDynOrgResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RegenerateDynOrgResponse_->soap_get(soap, "ns1:RegenerateDynOrgResponse", "ns1:RegenerateDynOrgResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetDynorgTypeList(const char *endpoint, const char *soap_action, ns1__GetDynorgTypeList *ns1__GetDynorgTypeList_, ns1__GetDynorgTypeListResponse *ns1__GetDynorgTypeListResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetDynorgTypeList soap_tmp___ns1__GetDynorgTypeList;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetDynorgTypeListRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetDynorgTypeList.ns1__GetDynorgTypeList_ = ns1__GetDynorgTypeList_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetDynorgTypeList(soap, &soap_tmp___ns1__GetDynorgTypeList);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetDynorgTypeList(soap, &soap_tmp___ns1__GetDynorgTypeList, "-ns1:GetDynorgTypeList", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetDynorgTypeList(soap, &soap_tmp___ns1__GetDynorgTypeList, "-ns1:GetDynorgTypeList", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetDynorgTypeListResponse_)
		return soap_closesock(soap);
	ns1__GetDynorgTypeListResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetDynorgTypeListResponse_->soap_get(soap, "ns1:GetDynorgTypeListResponse", "ns1:GetDynorgTypeListResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::canModifyDynorg(const char *endpoint, const char *soap_action, ns1__canModifyDynorg *ns1__canModifyDynorg_, ns1__canModifyDynorgResponse *ns1__canModifyDynorgResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__canModifyDynorg soap_tmp___ns1__canModifyDynorg;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/canModifyDynorgRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__canModifyDynorg.ns1__canModifyDynorg_ = ns1__canModifyDynorg_;
	soap_serializeheader(soap);
	soap_serialize___ns1__canModifyDynorg(soap, &soap_tmp___ns1__canModifyDynorg);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__canModifyDynorg(soap, &soap_tmp___ns1__canModifyDynorg, "-ns1:canModifyDynorg", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__canModifyDynorg(soap, &soap_tmp___ns1__canModifyDynorg, "-ns1:canModifyDynorg", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__canModifyDynorgResponse_)
		return soap_closesock(soap);
	ns1__canModifyDynorgResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__canModifyDynorgResponse_->soap_get(soap, "ns1:canModifyDynorgResponse", "ns1:canModifyDynorgResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::canDeleteDynorg(const char *endpoint, const char *soap_action, ns1__canDeleteDynorg *ns1__canDeleteDynorg_, ns1__canDeleteDynorgResponse *ns1__canDeleteDynorgResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__canDeleteDynorg soap_tmp___ns1__canDeleteDynorg;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/canDeleteDynorgRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__canDeleteDynorg.ns1__canDeleteDynorg_ = ns1__canDeleteDynorg_;
	soap_serializeheader(soap);
	soap_serialize___ns1__canDeleteDynorg(soap, &soap_tmp___ns1__canDeleteDynorg);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__canDeleteDynorg(soap, &soap_tmp___ns1__canDeleteDynorg, "-ns1:canDeleteDynorg", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__canDeleteDynorg(soap, &soap_tmp___ns1__canDeleteDynorg, "-ns1:canDeleteDynorg", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__canDeleteDynorgResponse_)
		return soap_closesock(soap);
	ns1__canDeleteDynorgResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__canDeleteDynorgResponse_->soap_get(soap, "ns1:canDeleteDynorgResponse", "ns1:canDeleteDynorgResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::canCreateDynorg(const char *endpoint, const char *soap_action, ns1__canCreateDynorg *ns1__canCreateDynorg_, ns1__canCreateDynorgResponse *ns1__canCreateDynorgResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__canCreateDynorg soap_tmp___ns1__canCreateDynorg;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/canCreateDynorgRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__canCreateDynorg.ns1__canCreateDynorg_ = ns1__canCreateDynorg_;
	soap_serializeheader(soap);
	soap_serialize___ns1__canCreateDynorg(soap, &soap_tmp___ns1__canCreateDynorg);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__canCreateDynorg(soap, &soap_tmp___ns1__canCreateDynorg, "-ns1:canCreateDynorg", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__canCreateDynorg(soap, &soap_tmp___ns1__canCreateDynorg, "-ns1:canCreateDynorg", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__canCreateDynorgResponse_)
		return soap_closesock(soap);
	ns1__canCreateDynorgResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__canCreateDynorgResponse_->soap_get(soap, "ns1:canCreateDynorgResponse", "ns1:canCreateDynorgResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetClasseDocumentale(const char *endpoint, const char *soap_action, ns1__GetClasseDocumentale *ns1__GetClasseDocumentale_, ns1__GetClasseDocumentaleResponse *ns1__GetClasseDocumentaleResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetClasseDocumentale soap_tmp___ns1__GetClasseDocumentale;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetClasseDocumentaleRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetClasseDocumentale.ns1__GetClasseDocumentale_ = ns1__GetClasseDocumentale_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetClasseDocumentale(soap, &soap_tmp___ns1__GetClasseDocumentale);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetClasseDocumentale(soap, &soap_tmp___ns1__GetClasseDocumentale, "-ns1:GetClasseDocumentale", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetClasseDocumentale(soap, &soap_tmp___ns1__GetClasseDocumentale, "-ns1:GetClasseDocumentale", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetClasseDocumentaleResponse_)
		return soap_closesock(soap);
	ns1__GetClasseDocumentaleResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetClasseDocumentaleResponse_->soap_get(soap, "ns1:GetClasseDocumentaleResponse", "ns1:GetClasseDocumentaleResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::DeleteClasseDocumentale(const char *endpoint, const char *soap_action, ns1__DeleteClasseDocumentale *ns1__DeleteClasseDocumentale_, ns1__DeleteClasseDocumentaleResponse *ns1__DeleteClasseDocumentaleResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__DeleteClasseDocumentale soap_tmp___ns1__DeleteClasseDocumentale;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/DeleteClasseDocumentaleRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DeleteClasseDocumentale.ns1__DeleteClasseDocumentale_ = ns1__DeleteClasseDocumentale_;
	soap_serializeheader(soap);
	soap_serialize___ns1__DeleteClasseDocumentale(soap, &soap_tmp___ns1__DeleteClasseDocumentale);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DeleteClasseDocumentale(soap, &soap_tmp___ns1__DeleteClasseDocumentale, "-ns1:DeleteClasseDocumentale", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DeleteClasseDocumentale(soap, &soap_tmp___ns1__DeleteClasseDocumentale, "-ns1:DeleteClasseDocumentale", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DeleteClasseDocumentaleResponse_)
		return soap_closesock(soap);
	ns1__DeleteClasseDocumentaleResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DeleteClasseDocumentaleResponse_->soap_get(soap, "ns1:DeleteClasseDocumentaleResponse", "ns1:DeleteClasseDocumentaleResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::InsertClasseDocumentale(const char *endpoint, const char *soap_action, ns1__InsertClasseDocumentale *ns1__InsertClasseDocumentale_, ns1__InsertClasseDocumentaleResponse *ns1__InsertClasseDocumentaleResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__InsertClasseDocumentale soap_tmp___ns1__InsertClasseDocumentale;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/InsertClasseDocumentaleRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__InsertClasseDocumentale.ns1__InsertClasseDocumentale_ = ns1__InsertClasseDocumentale_;
	soap_serializeheader(soap);
	soap_serialize___ns1__InsertClasseDocumentale(soap, &soap_tmp___ns1__InsertClasseDocumentale);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__InsertClasseDocumentale(soap, &soap_tmp___ns1__InsertClasseDocumentale, "-ns1:InsertClasseDocumentale", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__InsertClasseDocumentale(soap, &soap_tmp___ns1__InsertClasseDocumentale, "-ns1:InsertClasseDocumentale", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__InsertClasseDocumentaleResponse_)
		return soap_closesock(soap);
	ns1__InsertClasseDocumentaleResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__InsertClasseDocumentaleResponse_->soap_get(soap, "ns1:InsertClasseDocumentaleResponse", "ns1:InsertClasseDocumentaleResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetQueryParam(const char *endpoint, const char *soap_action, ns1__GetQueryParam *ns1__GetQueryParam_, ns1__GetQueryParamResponse *ns1__GetQueryParamResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetQueryParam soap_tmp___ns1__GetQueryParam;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetQueryParamRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetQueryParam.ns1__GetQueryParam_ = ns1__GetQueryParam_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetQueryParam(soap, &soap_tmp___ns1__GetQueryParam);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetQueryParam(soap, &soap_tmp___ns1__GetQueryParam, "-ns1:GetQueryParam", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetQueryParam(soap, &soap_tmp___ns1__GetQueryParam, "-ns1:GetQueryParam", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetQueryParamResponse_)
		return soap_closesock(soap);
	ns1__GetQueryParamResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetQueryParamResponse_->soap_get(soap, "ns1:GetQueryParamResponse", "ns1:GetQueryParamResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::QueryHeader(const char *endpoint, const char *soap_action, ns1__QueryHeader *ns1__QueryHeader_, ns1__QueryHeaderResponse *ns1__QueryHeaderResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__QueryHeader soap_tmp___ns1__QueryHeader;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/QueryHeaderRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__QueryHeader.ns1__QueryHeader_ = ns1__QueryHeader_;
	soap_serializeheader(soap);
	soap_serialize___ns1__QueryHeader(soap, &soap_tmp___ns1__QueryHeader);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__QueryHeader(soap, &soap_tmp___ns1__QueryHeader, "-ns1:QueryHeader", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__QueryHeader(soap, &soap_tmp___ns1__QueryHeader, "-ns1:QueryHeader", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__QueryHeaderResponse_)
		return soap_closesock(soap);
	ns1__QueryHeaderResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__QueryHeaderResponse_->soap_get(soap, "ns1:QueryHeaderResponse", "ns1:QueryHeaderResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::QueryTotAttach(const char *endpoint, const char *soap_action, ns1__QueryTotAttach *ns1__QueryTotAttach_, ns1__QueryTotAttachResponse *ns1__QueryTotAttachResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__QueryTotAttach soap_tmp___ns1__QueryTotAttach;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/QueryTotAttachRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__QueryTotAttach.ns1__QueryTotAttach_ = ns1__QueryTotAttach_;
	soap_serializeheader(soap);
	soap_serialize___ns1__QueryTotAttach(soap, &soap_tmp___ns1__QueryTotAttach);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__QueryTotAttach(soap, &soap_tmp___ns1__QueryTotAttach, "-ns1:QueryTotAttach", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__QueryTotAttach(soap, &soap_tmp___ns1__QueryTotAttach, "-ns1:QueryTotAttach", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__QueryTotAttachResponse_)
		return soap_closesock(soap);
	ns1__QueryTotAttachResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__QueryTotAttachResponse_->soap_get(soap, "ns1:QueryTotAttachResponse", "ns1:QueryTotAttachResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::DeleteFilter(const char *endpoint, const char *soap_action, ns1__DeleteFilter *ns1__DeleteFilter_, ns1__DeleteFilterResponse *ns1__DeleteFilterResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__DeleteFilter soap_tmp___ns1__DeleteFilter;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/DeleteFilterRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DeleteFilter.ns1__DeleteFilter_ = ns1__DeleteFilter_;
	soap_serializeheader(soap);
	soap_serialize___ns1__DeleteFilter(soap, &soap_tmp___ns1__DeleteFilter);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DeleteFilter(soap, &soap_tmp___ns1__DeleteFilter, "-ns1:DeleteFilter", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DeleteFilter(soap, &soap_tmp___ns1__DeleteFilter, "-ns1:DeleteFilter", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DeleteFilterResponse_)
		return soap_closesock(soap);
	ns1__DeleteFilterResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DeleteFilterResponse_->soap_get(soap, "ns1:DeleteFilterResponse", "ns1:DeleteFilterResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::ModifyFilter(const char *endpoint, const char *soap_action, ns1__ModifyFilter *ns1__ModifyFilter_, ns1__ModifyFilterResponse *ns1__ModifyFilterResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__ModifyFilter soap_tmp___ns1__ModifyFilter;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/ModifyFilterRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ModifyFilter.ns1__ModifyFilter_ = ns1__ModifyFilter_;
	soap_serializeheader(soap);
	soap_serialize___ns1__ModifyFilter(soap, &soap_tmp___ns1__ModifyFilter);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ModifyFilter(soap, &soap_tmp___ns1__ModifyFilter, "-ns1:ModifyFilter", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ModifyFilter(soap, &soap_tmp___ns1__ModifyFilter, "-ns1:ModifyFilter", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ModifyFilterResponse_)
		return soap_closesock(soap);
	ns1__ModifyFilterResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ModifyFilterResponse_->soap_get(soap, "ns1:ModifyFilterResponse", "ns1:ModifyFilterResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::InsertFilter(const char *endpoint, const char *soap_action, ns1__InsertFilter *ns1__InsertFilter_, ns1__InsertFilterResponse *ns1__InsertFilterResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__InsertFilter soap_tmp___ns1__InsertFilter;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/InsertFilterRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__InsertFilter.ns1__InsertFilter_ = ns1__InsertFilter_;
	soap_serializeheader(soap);
	soap_serialize___ns1__InsertFilter(soap, &soap_tmp___ns1__InsertFilter);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__InsertFilter(soap, &soap_tmp___ns1__InsertFilter, "-ns1:InsertFilter", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__InsertFilter(soap, &soap_tmp___ns1__InsertFilter, "-ns1:InsertFilter", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__InsertFilterResponse_)
		return soap_closesock(soap);
	ns1__InsertFilterResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__InsertFilterResponse_->soap_get(soap, "ns1:InsertFilterResponse", "ns1:InsertFilterResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetInstanceId(const char *endpoint, const char *soap_action, ns1__GetInstanceId *ns1__GetInstanceId_, ns1__GetInstanceIdResponse *ns1__GetInstanceIdResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetInstanceId soap_tmp___ns1__GetInstanceId;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetInstanceIdRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetInstanceId.ns1__GetInstanceId_ = ns1__GetInstanceId_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetInstanceId(soap, &soap_tmp___ns1__GetInstanceId);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetInstanceId(soap, &soap_tmp___ns1__GetInstanceId, "-ns1:GetInstanceId", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetInstanceId(soap, &soap_tmp___ns1__GetInstanceId, "-ns1:GetInstanceId", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetInstanceIdResponse_)
		return soap_closesock(soap);
	ns1__GetInstanceIdResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetInstanceIdResponse_->soap_get(soap, "ns1:GetInstanceIdResponse", "ns1:GetInstanceIdResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetTemplateProperties(const char *endpoint, const char *soap_action, ns1__GetTemplateProperties *ns1__GetTemplateProperties_, ns1__GetTemplatePropertiesResponse *ns1__GetTemplatePropertiesResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetTemplateProperties soap_tmp___ns1__GetTemplateProperties;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetTemplatePropertiesRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetTemplateProperties.ns1__GetTemplateProperties_ = ns1__GetTemplateProperties_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetTemplateProperties(soap, &soap_tmp___ns1__GetTemplateProperties);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetTemplateProperties(soap, &soap_tmp___ns1__GetTemplateProperties, "-ns1:GetTemplateProperties", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetTemplateProperties(soap, &soap_tmp___ns1__GetTemplateProperties, "-ns1:GetTemplateProperties", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetTemplatePropertiesResponse_)
		return soap_closesock(soap);
	ns1__GetTemplatePropertiesResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetTemplatePropertiesResponse_->soap_get(soap, "ns1:GetTemplatePropertiesResponse", "ns1:GetTemplatePropertiesResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetArchSostRules(const char *endpoint, const char *soap_action, ns1__GetArchSostRules *ns1__GetArchSostRules_, ns1__GetArchSostRulesResponse *ns1__GetArchSostRulesResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetArchSostRules soap_tmp___ns1__GetArchSostRules;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetArchSostRulesRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetArchSostRules.ns1__GetArchSostRules_ = ns1__GetArchSostRules_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetArchSostRules(soap, &soap_tmp___ns1__GetArchSostRules);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetArchSostRules(soap, &soap_tmp___ns1__GetArchSostRules, "-ns1:GetArchSostRules", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetArchSostRules(soap, &soap_tmp___ns1__GetArchSostRules, "-ns1:GetArchSostRules", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetArchSostRulesResponse_)
		return soap_closesock(soap);
	ns1__GetArchSostRulesResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetArchSostRulesResponse_->soap_get(soap, "ns1:GetArchSostRulesResponse", "ns1:GetArchSostRulesResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::InsertArchSostRule(const char *endpoint, const char *soap_action, ns1__InsertArchSostRule *ns1__InsertArchSostRule_, ns1__InsertArchSostRuleResponse *ns1__InsertArchSostRuleResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__InsertArchSostRule soap_tmp___ns1__InsertArchSostRule;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/InsertArchSostRuleRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__InsertArchSostRule.ns1__InsertArchSostRule_ = ns1__InsertArchSostRule_;
	soap_serializeheader(soap);
	soap_serialize___ns1__InsertArchSostRule(soap, &soap_tmp___ns1__InsertArchSostRule);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__InsertArchSostRule(soap, &soap_tmp___ns1__InsertArchSostRule, "-ns1:InsertArchSostRule", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__InsertArchSostRule(soap, &soap_tmp___ns1__InsertArchSostRule, "-ns1:InsertArchSostRule", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__InsertArchSostRuleResponse_)
		return soap_closesock(soap);
	ns1__InsertArchSostRuleResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__InsertArchSostRuleResponse_->soap_get(soap, "ns1:InsertArchSostRuleResponse", "ns1:InsertArchSostRuleResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::DeleteArchSostRule(const char *endpoint, const char *soap_action, ns1__DeleteArchSostRule *ns1__DeleteArchSostRule_, ns1__DeleteArchSostRuleResponse *ns1__DeleteArchSostRuleResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__DeleteArchSostRule soap_tmp___ns1__DeleteArchSostRule;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/DeleteArchSostRuleRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DeleteArchSostRule.ns1__DeleteArchSostRule_ = ns1__DeleteArchSostRule_;
	soap_serializeheader(soap);
	soap_serialize___ns1__DeleteArchSostRule(soap, &soap_tmp___ns1__DeleteArchSostRule);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DeleteArchSostRule(soap, &soap_tmp___ns1__DeleteArchSostRule, "-ns1:DeleteArchSostRule", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DeleteArchSostRule(soap, &soap_tmp___ns1__DeleteArchSostRule, "-ns1:DeleteArchSostRule", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DeleteArchSostRuleResponse_)
		return soap_closesock(soap);
	ns1__DeleteArchSostRuleResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DeleteArchSostRuleResponse_->soap_get(soap, "ns1:DeleteArchSostRuleResponse", "ns1:DeleteArchSostRuleResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::ModifyArchSostRule(const char *endpoint, const char *soap_action, ns1__ModifyArchSostRule *ns1__ModifyArchSostRule_, ns1__ModifyArchSostRuleResponse *ns1__ModifyArchSostRuleResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__ModifyArchSostRule soap_tmp___ns1__ModifyArchSostRule;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/ModifyArchSostRuleRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ModifyArchSostRule.ns1__ModifyArchSostRule_ = ns1__ModifyArchSostRule_;
	soap_serializeheader(soap);
	soap_serialize___ns1__ModifyArchSostRule(soap, &soap_tmp___ns1__ModifyArchSostRule);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ModifyArchSostRule(soap, &soap_tmp___ns1__ModifyArchSostRule, "-ns1:ModifyArchSostRule", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ModifyArchSostRule(soap, &soap_tmp___ns1__ModifyArchSostRule, "-ns1:ModifyArchSostRule", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ModifyArchSostRuleResponse_)
		return soap_closesock(soap);
	ns1__ModifyArchSostRuleResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ModifyArchSostRuleResponse_->soap_get(soap, "ns1:ModifyArchSostRuleResponse", "ns1:ModifyArchSostRuleResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::DestroyContainer(const char *endpoint, const char *soap_action, ns1__DestroyContainer *ns1__DestroyContainer_, ns1__DestroyContainerResponse *ns1__DestroyContainerResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__DestroyContainer soap_tmp___ns1__DestroyContainer;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/DestroyContainerRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DestroyContainer.ns1__DestroyContainer_ = ns1__DestroyContainer_;
	soap_serializeheader(soap);
	soap_serialize___ns1__DestroyContainer(soap, &soap_tmp___ns1__DestroyContainer);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DestroyContainer(soap, &soap_tmp___ns1__DestroyContainer, "-ns1:DestroyContainer", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DestroyContainer(soap, &soap_tmp___ns1__DestroyContainer, "-ns1:DestroyContainer", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DestroyContainerResponse_)
		return soap_closesock(soap);
	ns1__DestroyContainerResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DestroyContainerResponse_->soap_get(soap, "ns1:DestroyContainerResponse", "ns1:DestroyContainerResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetRootId(const char *endpoint, const char *soap_action, ns1__GetRootId *ns1__GetRootId_, ns1__GetRootIdResponse *ns1__GetRootIdResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetRootId soap_tmp___ns1__GetRootId;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetRootIdRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetRootId.ns1__GetRootId_ = ns1__GetRootId_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetRootId(soap, &soap_tmp___ns1__GetRootId);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetRootId(soap, &soap_tmp___ns1__GetRootId, "-ns1:GetRootId", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetRootId(soap, &soap_tmp___ns1__GetRootId, "-ns1:GetRootId", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetRootIdResponse_)
		return soap_closesock(soap);
	ns1__GetRootIdResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetRootIdResponse_->soap_get(soap, "ns1:GetRootIdResponse", "ns1:GetRootIdResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetInstancePathname(const char *endpoint, const char *soap_action, ns1__GetInstancePathname *ns1__GetInstancePathname_, ns1__GetInstancePathnameResponse *ns1__GetInstancePathnameResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetInstancePathname soap_tmp___ns1__GetInstancePathname;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetInstancePathnameRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetInstancePathname.ns1__GetInstancePathname_ = ns1__GetInstancePathname_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetInstancePathname(soap, &soap_tmp___ns1__GetInstancePathname);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetInstancePathname(soap, &soap_tmp___ns1__GetInstancePathname, "-ns1:GetInstancePathname", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetInstancePathname(soap, &soap_tmp___ns1__GetInstancePathname, "-ns1:GetInstancePathname", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetInstancePathnameResponse_)
		return soap_closesock(soap);
	ns1__GetInstancePathnameResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetInstancePathnameResponse_->soap_get(soap, "ns1:GetInstancePathnameResponse", "ns1:GetInstancePathnameResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetObject(const char *endpoint, const char *soap_action, ns1__GetObject *ns1__GetObject_, ns1__GetObjectResponse *ns1__GetObjectResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetObject soap_tmp___ns1__GetObject;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetObjectRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetObject.ns1__GetObject_ = ns1__GetObject_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetObject(soap, &soap_tmp___ns1__GetObject);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetObject(soap, &soap_tmp___ns1__GetObject, "-ns1:GetObject", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetObject(soap, &soap_tmp___ns1__GetObject, "-ns1:GetObject", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetObjectResponse_)
		return soap_closesock(soap);
	ns1__GetObjectResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetObjectResponse_->soap_get(soap, "ns1:GetObjectResponse", "ns1:GetObjectResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetAllObjectWithSystem(const char *endpoint, const char *soap_action, ns1__GetAllObjectWithSystem *ns1__GetAllObjectWithSystem_, ns1__GetAllObjectWithSystemResponse *ns1__GetAllObjectWithSystemResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetAllObjectWithSystem soap_tmp___ns1__GetAllObjectWithSystem;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetAllObjectWithSystemRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetAllObjectWithSystem.ns1__GetAllObjectWithSystem_ = ns1__GetAllObjectWithSystem_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetAllObjectWithSystem(soap, &soap_tmp___ns1__GetAllObjectWithSystem);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetAllObjectWithSystem(soap, &soap_tmp___ns1__GetAllObjectWithSystem, "-ns1:GetAllObjectWithSystem", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetAllObjectWithSystem(soap, &soap_tmp___ns1__GetAllObjectWithSystem, "-ns1:GetAllObjectWithSystem", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetAllObjectWithSystemResponse_)
		return soap_closesock(soap);
	ns1__GetAllObjectWithSystemResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetAllObjectWithSystemResponse_->soap_get(soap, "ns1:GetAllObjectWithSystemResponse", "ns1:GetAllObjectWithSystemResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetMethod(const char *endpoint, const char *soap_action, ns1__GetMethod *ns1__GetMethod_, ns1__GetMethodResponse *ns1__GetMethodResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetMethod soap_tmp___ns1__GetMethod;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetMethodRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetMethod.ns1__GetMethod_ = ns1__GetMethod_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetMethod(soap, &soap_tmp___ns1__GetMethod);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetMethod(soap, &soap_tmp___ns1__GetMethod, "-ns1:GetMethod", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetMethod(soap, &soap_tmp___ns1__GetMethod, "-ns1:GetMethod", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetMethodResponse_)
		return soap_closesock(soap);
	ns1__GetMethodResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetMethodResponse_->soap_get(soap, "ns1:GetMethodResponse", "ns1:GetMethodResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::FullTreePathName(const char *endpoint, const char *soap_action, ns1__FullTreePathName *ns1__FullTreePathName_, ns1__FullTreePathNameResponse *ns1__FullTreePathNameResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__FullTreePathName soap_tmp___ns1__FullTreePathName;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/FullTreePathNameRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__FullTreePathName.ns1__FullTreePathName_ = ns1__FullTreePathName_;
	soap_serializeheader(soap);
	soap_serialize___ns1__FullTreePathName(soap, &soap_tmp___ns1__FullTreePathName);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__FullTreePathName(soap, &soap_tmp___ns1__FullTreePathName, "-ns1:FullTreePathName", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__FullTreePathName(soap, &soap_tmp___ns1__FullTreePathName, "-ns1:FullTreePathName", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__FullTreePathNameResponse_)
		return soap_closesock(soap);
	ns1__FullTreePathNameResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__FullTreePathNameResponse_->soap_get(soap, "ns1:FullTreePathNameResponse", "ns1:FullTreePathNameResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetTreeForSecurity(const char *endpoint, const char *soap_action, ns1__GetTreeForSecurity *ns1__GetTreeForSecurity_, ns1__GetTreeForSecurityResponse *ns1__GetTreeForSecurityResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetTreeForSecurity soap_tmp___ns1__GetTreeForSecurity;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetTreeForSecurityRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetTreeForSecurity.ns1__GetTreeForSecurity_ = ns1__GetTreeForSecurity_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetTreeForSecurity(soap, &soap_tmp___ns1__GetTreeForSecurity);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetTreeForSecurity(soap, &soap_tmp___ns1__GetTreeForSecurity, "-ns1:GetTreeForSecurity", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetTreeForSecurity(soap, &soap_tmp___ns1__GetTreeForSecurity, "-ns1:GetTreeForSecurity", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetTreeForSecurityResponse_)
		return soap_closesock(soap);
	ns1__GetTreeForSecurityResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetTreeForSecurityResponse_->soap_get(soap, "ns1:GetTreeForSecurityResponse", "ns1:GetTreeForSecurityResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetTree(const char *endpoint, const char *soap_action, ns1__GetTree *ns1__GetTree_, ns1__GetTreeResponse *ns1__GetTreeResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetTree soap_tmp___ns1__GetTree;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetTreeRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetTree.ns1__GetTree_ = ns1__GetTree_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetTree(soap, &soap_tmp___ns1__GetTree);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetTree(soap, &soap_tmp___ns1__GetTree, "-ns1:GetTree", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetTree(soap, &soap_tmp___ns1__GetTree, "-ns1:GetTree", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetTreeResponse_)
		return soap_closesock(soap);
	ns1__GetTreeResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetTreeResponse_->soap_get(soap, "ns1:GetTreeResponse", "ns1:GetTreeResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::CreateRaccoglitore(const char *endpoint, const char *soap_action, ns1__CreateRaccoglitore *ns1__CreateRaccoglitore_, ns1__CreateRaccoglitoreResponse *ns1__CreateRaccoglitoreResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__CreateRaccoglitore soap_tmp___ns1__CreateRaccoglitore;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/CreateRaccoglitoreRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CreateRaccoglitore.ns1__CreateRaccoglitore_ = ns1__CreateRaccoglitore_;
	soap_serializeheader(soap);
	soap_serialize___ns1__CreateRaccoglitore(soap, &soap_tmp___ns1__CreateRaccoglitore);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CreateRaccoglitore(soap, &soap_tmp___ns1__CreateRaccoglitore, "-ns1:CreateRaccoglitore", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CreateRaccoglitore(soap, &soap_tmp___ns1__CreateRaccoglitore, "-ns1:CreateRaccoglitore", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CreateRaccoglitoreResponse_)
		return soap_closesock(soap);
	ns1__CreateRaccoglitoreResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CreateRaccoglitoreResponse_->soap_get(soap, "ns1:CreateRaccoglitoreResponse", "ns1:CreateRaccoglitoreResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::DeleteRaccoglitore(const char *endpoint, const char *soap_action, ns1__DeleteRaccoglitore *ns1__DeleteRaccoglitore_, ns1__DeleteRaccoglitoreResponse *ns1__DeleteRaccoglitoreResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__DeleteRaccoglitore soap_tmp___ns1__DeleteRaccoglitore;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/DeleteRaccoglitoreRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DeleteRaccoglitore.ns1__DeleteRaccoglitore_ = ns1__DeleteRaccoglitore_;
	soap_serializeheader(soap);
	soap_serialize___ns1__DeleteRaccoglitore(soap, &soap_tmp___ns1__DeleteRaccoglitore);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DeleteRaccoglitore(soap, &soap_tmp___ns1__DeleteRaccoglitore, "-ns1:DeleteRaccoglitore", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DeleteRaccoglitore(soap, &soap_tmp___ns1__DeleteRaccoglitore, "-ns1:DeleteRaccoglitore", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DeleteRaccoglitoreResponse_)
		return soap_closesock(soap);
	ns1__DeleteRaccoglitoreResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DeleteRaccoglitoreResponse_->soap_get(soap, "ns1:DeleteRaccoglitoreResponse", "ns1:DeleteRaccoglitoreResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::DestroyRaccoglitore(const char *endpoint, const char *soap_action, ns1__DestroyRaccoglitore *ns1__DestroyRaccoglitore_, ns1__DestroyRaccoglitoreResponse *ns1__DestroyRaccoglitoreResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__DestroyRaccoglitore soap_tmp___ns1__DestroyRaccoglitore;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/DestroyRaccoglitoreRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DestroyRaccoglitore.ns1__DestroyRaccoglitore_ = ns1__DestroyRaccoglitore_;
	soap_serializeheader(soap);
	soap_serialize___ns1__DestroyRaccoglitore(soap, &soap_tmp___ns1__DestroyRaccoglitore);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DestroyRaccoglitore(soap, &soap_tmp___ns1__DestroyRaccoglitore, "-ns1:DestroyRaccoglitore", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DestroyRaccoglitore(soap, &soap_tmp___ns1__DestroyRaccoglitore, "-ns1:DestroyRaccoglitore", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DestroyRaccoglitoreResponse_)
		return soap_closesock(soap);
	ns1__DestroyRaccoglitoreResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DestroyRaccoglitoreResponse_->soap_get(soap, "ns1:DestroyRaccoglitoreResponse", "ns1:DestroyRaccoglitoreResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::ModifyRaccoglitore(const char *endpoint, const char *soap_action, ns1__ModifyRaccoglitore *ns1__ModifyRaccoglitore_, ns1__ModifyRaccoglitoreResponse *ns1__ModifyRaccoglitoreResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__ModifyRaccoglitore soap_tmp___ns1__ModifyRaccoglitore;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/ModifyRaccoglitoreRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ModifyRaccoglitore.ns1__ModifyRaccoglitore_ = ns1__ModifyRaccoglitore_;
	soap_serializeheader(soap);
	soap_serialize___ns1__ModifyRaccoglitore(soap, &soap_tmp___ns1__ModifyRaccoglitore);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ModifyRaccoglitore(soap, &soap_tmp___ns1__ModifyRaccoglitore, "-ns1:ModifyRaccoglitore", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ModifyRaccoglitore(soap, &soap_tmp___ns1__ModifyRaccoglitore, "-ns1:ModifyRaccoglitore", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ModifyRaccoglitoreResponse_)
		return soap_closesock(soap);
	ns1__ModifyRaccoglitoreResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ModifyRaccoglitoreResponse_->soap_get(soap, "ns1:ModifyRaccoglitoreResponse", "ns1:ModifyRaccoglitoreResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::canCreateRaccoglitore(const char *endpoint, const char *soap_action, ns1__canCreateRaccoglitore *ns1__canCreateRaccoglitore_, ns1__canCreateRaccoglitoreResponse *ns1__canCreateRaccoglitoreResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__canCreateRaccoglitore soap_tmp___ns1__canCreateRaccoglitore;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/canCreateRaccoglitoreRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__canCreateRaccoglitore.ns1__canCreateRaccoglitore_ = ns1__canCreateRaccoglitore_;
	soap_serializeheader(soap);
	soap_serialize___ns1__canCreateRaccoglitore(soap, &soap_tmp___ns1__canCreateRaccoglitore);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__canCreateRaccoglitore(soap, &soap_tmp___ns1__canCreateRaccoglitore, "-ns1:canCreateRaccoglitore", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__canCreateRaccoglitore(soap, &soap_tmp___ns1__canCreateRaccoglitore, "-ns1:canCreateRaccoglitore", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__canCreateRaccoglitoreResponse_)
		return soap_closesock(soap);
	ns1__canCreateRaccoglitoreResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__canCreateRaccoglitoreResponse_->soap_get(soap, "ns1:canCreateRaccoglitoreResponse", "ns1:canCreateRaccoglitoreResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::canDeleteRaccoglitore(const char *endpoint, const char *soap_action, ns1__canDeleteRaccoglitore *ns1__canDeleteRaccoglitore_, ns1__canDeleteRaccoglitoreResponse *ns1__canDeleteRaccoglitoreResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__canDeleteRaccoglitore soap_tmp___ns1__canDeleteRaccoglitore;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/canDeleteRaccoglitoreRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__canDeleteRaccoglitore.ns1__canDeleteRaccoglitore_ = ns1__canDeleteRaccoglitore_;
	soap_serializeheader(soap);
	soap_serialize___ns1__canDeleteRaccoglitore(soap, &soap_tmp___ns1__canDeleteRaccoglitore);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__canDeleteRaccoglitore(soap, &soap_tmp___ns1__canDeleteRaccoglitore, "-ns1:canDeleteRaccoglitore", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__canDeleteRaccoglitore(soap, &soap_tmp___ns1__canDeleteRaccoglitore, "-ns1:canDeleteRaccoglitore", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__canDeleteRaccoglitoreResponse_)
		return soap_closesock(soap);
	ns1__canDeleteRaccoglitoreResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__canDeleteRaccoglitoreResponse_->soap_get(soap, "ns1:canDeleteRaccoglitoreResponse", "ns1:canDeleteRaccoglitoreResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::canModifyRaccoglitore(const char *endpoint, const char *soap_action, ns1__canModifyRaccoglitore *ns1__canModifyRaccoglitore_, ns1__canModifyRaccoglitoreResponse *ns1__canModifyRaccoglitoreResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__canModifyRaccoglitore soap_tmp___ns1__canModifyRaccoglitore;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/canModifyRaccoglitoreRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__canModifyRaccoglitore.ns1__canModifyRaccoglitore_ = ns1__canModifyRaccoglitore_;
	soap_serializeheader(soap);
	soap_serialize___ns1__canModifyRaccoglitore(soap, &soap_tmp___ns1__canModifyRaccoglitore);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__canModifyRaccoglitore(soap, &soap_tmp___ns1__canModifyRaccoglitore, "-ns1:canModifyRaccoglitore", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__canModifyRaccoglitore(soap, &soap_tmp___ns1__canModifyRaccoglitore, "-ns1:canModifyRaccoglitore", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__canModifyRaccoglitoreResponse_)
		return soap_closesock(soap);
	ns1__canModifyRaccoglitoreResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__canModifyRaccoglitoreResponse_->soap_get(soap, "ns1:canModifyRaccoglitoreResponse", "ns1:canModifyRaccoglitoreResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetTemplateList(const char *endpoint, const char *soap_action, ns1__GetTemplateList *ns1__GetTemplateList_, ns1__GetTemplateListResponse *ns1__GetTemplateListResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetTemplateList soap_tmp___ns1__GetTemplateList;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetTemplateListRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetTemplateList.ns1__GetTemplateList_ = ns1__GetTemplateList_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetTemplateList(soap, &soap_tmp___ns1__GetTemplateList);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetTemplateList(soap, &soap_tmp___ns1__GetTemplateList, "-ns1:GetTemplateList", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetTemplateList(soap, &soap_tmp___ns1__GetTemplateList, "-ns1:GetTemplateList", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetTemplateListResponse_)
		return soap_closesock(soap);
	ns1__GetTemplateListResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetTemplateListResponse_->soap_get(soap, "ns1:GetTemplateListResponse", "ns1:GetTemplateListResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetLinksToDocumentFiltered(const char *endpoint, const char *soap_action, ns1__GetLinksToDocumentFiltered *ns1__GetLinksToDocumentFiltered_, ns1__GetLinksToDocumentFilteredResponse *ns1__GetLinksToDocumentFilteredResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetLinksToDocumentFiltered soap_tmp___ns1__GetLinksToDocumentFiltered;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetLinksToDocumentFilteredRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetLinksToDocumentFiltered.ns1__GetLinksToDocumentFiltered_ = ns1__GetLinksToDocumentFiltered_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetLinksToDocumentFiltered(soap, &soap_tmp___ns1__GetLinksToDocumentFiltered);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetLinksToDocumentFiltered(soap, &soap_tmp___ns1__GetLinksToDocumentFiltered, "-ns1:GetLinksToDocumentFiltered", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetLinksToDocumentFiltered(soap, &soap_tmp___ns1__GetLinksToDocumentFiltered, "-ns1:GetLinksToDocumentFiltered", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetLinksToDocumentFilteredResponse_)
		return soap_closesock(soap);
	ns1__GetLinksToDocumentFilteredResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetLinksToDocumentFilteredResponse_->soap_get(soap, "ns1:GetLinksToDocumentFilteredResponse", "ns1:GetLinksToDocumentFilteredResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::CheckIn_USCOREattach(const char *endpoint, const char *soap_action, ns1__CheckIn_USCOREattach *ns1__CheckIn_USCOREattach_, ns1__CheckIn_USCOREattachResponse *ns1__CheckIn_USCOREattachResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__CheckIn_USCOREattach soap_tmp___ns1__CheckIn_USCOREattach;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/CheckIn_attachRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CheckIn_USCOREattach.ns1__CheckIn_USCOREattach_ = ns1__CheckIn_USCOREattach_;
	soap_serializeheader(soap);
	soap_serialize___ns1__CheckIn_USCOREattach(soap, &soap_tmp___ns1__CheckIn_USCOREattach);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CheckIn_USCOREattach(soap, &soap_tmp___ns1__CheckIn_USCOREattach, "-ns1:CheckIn_attach", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CheckIn_USCOREattach(soap, &soap_tmp___ns1__CheckIn_USCOREattach, "-ns1:CheckIn_attach", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CheckIn_USCOREattachResponse_)
		return soap_closesock(soap);
	ns1__CheckIn_USCOREattachResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CheckIn_USCOREattachResponse_->soap_get(soap, "ns1:CheckIn_attachResponse", "ns1:CheckIn_attachResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::CheckIn_USCOREattachContainer(const char *endpoint, const char *soap_action, ns1__CheckIn_USCOREattachContainer *ns1__CheckIn_USCOREattachContainer_, ns1__CheckIn_USCOREattachContainerResponse *ns1__CheckIn_USCOREattachContainerResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__CheckIn_USCOREattachContainer soap_tmp___ns1__CheckIn_USCOREattachContainer;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/CheckIn_attachContainerRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CheckIn_USCOREattachContainer.ns1__CheckIn_USCOREattachContainer_ = ns1__CheckIn_USCOREattachContainer_;
	soap_serializeheader(soap);
	soap_serialize___ns1__CheckIn_USCOREattachContainer(soap, &soap_tmp___ns1__CheckIn_USCOREattachContainer);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CheckIn_USCOREattachContainer(soap, &soap_tmp___ns1__CheckIn_USCOREattachContainer, "-ns1:CheckIn_attachContainer", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CheckIn_USCOREattachContainer(soap, &soap_tmp___ns1__CheckIn_USCOREattachContainer, "-ns1:CheckIn_attachContainer", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CheckIn_USCOREattachContainerResponse_)
		return soap_closesock(soap);
	ns1__CheckIn_USCOREattachContainerResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CheckIn_USCOREattachContainerResponse_->soap_get(soap, "ns1:CheckIn_attachContainerResponse", "ns1:CheckIn_attachContainerResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::CheckIn_USCOREdocument(const char *endpoint, const char *soap_action, ns1__CheckIn_USCOREdocument *ns1__CheckIn_USCOREdocument_, ns1__CheckIn_USCOREdocumentResponse *ns1__CheckIn_USCOREdocumentResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__CheckIn_USCOREdocument soap_tmp___ns1__CheckIn_USCOREdocument;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/CheckIn_documentRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CheckIn_USCOREdocument.ns1__CheckIn_USCOREdocument_ = ns1__CheckIn_USCOREdocument_;
	soap_serializeheader(soap);
	soap_serialize___ns1__CheckIn_USCOREdocument(soap, &soap_tmp___ns1__CheckIn_USCOREdocument);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CheckIn_USCOREdocument(soap, &soap_tmp___ns1__CheckIn_USCOREdocument, "-ns1:CheckIn_document", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CheckIn_USCOREdocument(soap, &soap_tmp___ns1__CheckIn_USCOREdocument, "-ns1:CheckIn_document", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CheckIn_USCOREdocumentResponse_)
		return soap_closesock(soap);
	ns1__CheckIn_USCOREdocumentResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CheckIn_USCOREdocumentResponse_->soap_get(soap, "ns1:CheckIn_documentResponse", "ns1:CheckIn_documentResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::CheckOut_USCOREattach(const char *endpoint, const char *soap_action, ns1__CheckOut_USCOREattach *ns1__CheckOut_USCOREattach_, ns1__CheckOut_USCOREattachResponse *ns1__CheckOut_USCOREattachResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__CheckOut_USCOREattach soap_tmp___ns1__CheckOut_USCOREattach;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/CheckOut_attachRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CheckOut_USCOREattach.ns1__CheckOut_USCOREattach_ = ns1__CheckOut_USCOREattach_;
	soap_serializeheader(soap);
	soap_serialize___ns1__CheckOut_USCOREattach(soap, &soap_tmp___ns1__CheckOut_USCOREattach);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CheckOut_USCOREattach(soap, &soap_tmp___ns1__CheckOut_USCOREattach, "-ns1:CheckOut_attach", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CheckOut_USCOREattach(soap, &soap_tmp___ns1__CheckOut_USCOREattach, "-ns1:CheckOut_attach", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CheckOut_USCOREattachResponse_)
		return soap_closesock(soap);
	ns1__CheckOut_USCOREattachResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CheckOut_USCOREattachResponse_->soap_get(soap, "ns1:CheckOut_attachResponse", "ns1:CheckOut_attachResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::CheckOut_USCOREattachContainer(const char *endpoint, const char *soap_action, ns1__CheckOut_USCOREattachContainer *ns1__CheckOut_USCOREattachContainer_, ns1__CheckOut_USCOREattachContainerResponse *ns1__CheckOut_USCOREattachContainerResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__CheckOut_USCOREattachContainer soap_tmp___ns1__CheckOut_USCOREattachContainer;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/CheckOut_attachContainerRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CheckOut_USCOREattachContainer.ns1__CheckOut_USCOREattachContainer_ = ns1__CheckOut_USCOREattachContainer_;
	soap_serializeheader(soap);
	soap_serialize___ns1__CheckOut_USCOREattachContainer(soap, &soap_tmp___ns1__CheckOut_USCOREattachContainer);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CheckOut_USCOREattachContainer(soap, &soap_tmp___ns1__CheckOut_USCOREattachContainer, "-ns1:CheckOut_attachContainer", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CheckOut_USCOREattachContainer(soap, &soap_tmp___ns1__CheckOut_USCOREattachContainer, "-ns1:CheckOut_attachContainer", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CheckOut_USCOREattachContainerResponse_)
		return soap_closesock(soap);
	ns1__CheckOut_USCOREattachContainerResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CheckOut_USCOREattachContainerResponse_->soap_get(soap, "ns1:CheckOut_attachContainerResponse", "ns1:CheckOut_attachContainerResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::CheckOut_USCOREdocument(const char *endpoint, const char *soap_action, ns1__CheckOut_USCOREdocument *ns1__CheckOut_USCOREdocument_, ns1__CheckOut_USCOREdocumentResponse *ns1__CheckOut_USCOREdocumentResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__CheckOut_USCOREdocument soap_tmp___ns1__CheckOut_USCOREdocument;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/CheckOut_documentRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CheckOut_USCOREdocument.ns1__CheckOut_USCOREdocument_ = ns1__CheckOut_USCOREdocument_;
	soap_serializeheader(soap);
	soap_serialize___ns1__CheckOut_USCOREdocument(soap, &soap_tmp___ns1__CheckOut_USCOREdocument);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CheckOut_USCOREdocument(soap, &soap_tmp___ns1__CheckOut_USCOREdocument, "-ns1:CheckOut_document", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CheckOut_USCOREdocument(soap, &soap_tmp___ns1__CheckOut_USCOREdocument, "-ns1:CheckOut_document", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CheckOut_USCOREdocumentResponse_)
		return soap_closesock(soap);
	ns1__CheckOut_USCOREdocumentResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CheckOut_USCOREdocumentResponse_->soap_get(soap, "ns1:CheckOut_documentResponse", "ns1:CheckOut_documentResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::Combo_USCOREinsert(const char *endpoint, const char *soap_action, ns1__Combo_USCOREinsert *ns1__Combo_USCOREinsert_, ns1__Combo_USCOREinsertResponse *ns1__Combo_USCOREinsertResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__Combo_USCOREinsert soap_tmp___ns1__Combo_USCOREinsert;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/Combo_insertRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__Combo_USCOREinsert.ns1__Combo_USCOREinsert_ = ns1__Combo_USCOREinsert_;
	soap_serializeheader(soap);
	soap_serialize___ns1__Combo_USCOREinsert(soap, &soap_tmp___ns1__Combo_USCOREinsert);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__Combo_USCOREinsert(soap, &soap_tmp___ns1__Combo_USCOREinsert, "-ns1:Combo_insert", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__Combo_USCOREinsert(soap, &soap_tmp___ns1__Combo_USCOREinsert, "-ns1:Combo_insert", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__Combo_USCOREinsertResponse_)
		return soap_closesock(soap);
	ns1__Combo_USCOREinsertResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__Combo_USCOREinsertResponse_->soap_get(soap, "ns1:Combo_insertResponse", "ns1:Combo_insertResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::Combo_USCOREremoveItem(const char *endpoint, const char *soap_action, ns1__Combo_USCOREremoveItem *ns1__Combo_USCOREremoveItem_, ns1__Combo_USCOREremoveItemResponse *ns1__Combo_USCOREremoveItemResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__Combo_USCOREremoveItem soap_tmp___ns1__Combo_USCOREremoveItem;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/Combo_removeItemRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__Combo_USCOREremoveItem.ns1__Combo_USCOREremoveItem_ = ns1__Combo_USCOREremoveItem_;
	soap_serializeheader(soap);
	soap_serialize___ns1__Combo_USCOREremoveItem(soap, &soap_tmp___ns1__Combo_USCOREremoveItem);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__Combo_USCOREremoveItem(soap, &soap_tmp___ns1__Combo_USCOREremoveItem, "-ns1:Combo_removeItem", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__Combo_USCOREremoveItem(soap, &soap_tmp___ns1__Combo_USCOREremoveItem, "-ns1:Combo_removeItem", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__Combo_USCOREremoveItemResponse_)
		return soap_closesock(soap);
	ns1__Combo_USCOREremoveItemResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__Combo_USCOREremoveItemResponse_->soap_get(soap, "ns1:Combo_removeItemResponse", "ns1:Combo_removeItemResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::Combo_USCOREremoveAll(const char *endpoint, const char *soap_action, ns1__Combo_USCOREremoveAll *ns1__Combo_USCOREremoveAll_, ns1__Combo_USCOREremoveAllResponse *ns1__Combo_USCOREremoveAllResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__Combo_USCOREremoveAll soap_tmp___ns1__Combo_USCOREremoveAll;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/Combo_removeAllRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__Combo_USCOREremoveAll.ns1__Combo_USCOREremoveAll_ = ns1__Combo_USCOREremoveAll_;
	soap_serializeheader(soap);
	soap_serialize___ns1__Combo_USCOREremoveAll(soap, &soap_tmp___ns1__Combo_USCOREremoveAll);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__Combo_USCOREremoveAll(soap, &soap_tmp___ns1__Combo_USCOREremoveAll, "-ns1:Combo_removeAll", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__Combo_USCOREremoveAll(soap, &soap_tmp___ns1__Combo_USCOREremoveAll, "-ns1:Combo_removeAll", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__Combo_USCOREremoveAllResponse_)
		return soap_closesock(soap);
	ns1__Combo_USCOREremoveAllResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__Combo_USCOREremoveAllResponse_->soap_get(soap, "ns1:Combo_removeAllResponse", "ns1:Combo_removeAllResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::Combo_USCOREgetAll(const char *endpoint, const char *soap_action, ns1__Combo_USCOREgetAll *ns1__Combo_USCOREgetAll_, ns1__Combo_USCOREgetAllResponse *ns1__Combo_USCOREgetAllResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__Combo_USCOREgetAll soap_tmp___ns1__Combo_USCOREgetAll;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/Combo_getAllRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__Combo_USCOREgetAll.ns1__Combo_USCOREgetAll_ = ns1__Combo_USCOREgetAll_;
	soap_serializeheader(soap);
	soap_serialize___ns1__Combo_USCOREgetAll(soap, &soap_tmp___ns1__Combo_USCOREgetAll);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__Combo_USCOREgetAll(soap, &soap_tmp___ns1__Combo_USCOREgetAll, "-ns1:Combo_getAll", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__Combo_USCOREgetAll(soap, &soap_tmp___ns1__Combo_USCOREgetAll, "-ns1:Combo_getAll", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__Combo_USCOREgetAllResponse_)
		return soap_closesock(soap);
	ns1__Combo_USCOREgetAllResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__Combo_USCOREgetAllResponse_->soap_get(soap, "ns1:Combo_getAllResponse", "ns1:Combo_getAllResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::Combo_USCOREisCombo(const char *endpoint, const char *soap_action, ns1__Combo_USCOREisCombo *ns1__Combo_USCOREisCombo_, ns1__Combo_USCOREisComboResponse *ns1__Combo_USCOREisComboResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__Combo_USCOREisCombo soap_tmp___ns1__Combo_USCOREisCombo;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/Combo_isComboRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__Combo_USCOREisCombo.ns1__Combo_USCOREisCombo_ = ns1__Combo_USCOREisCombo_;
	soap_serializeheader(soap);
	soap_serialize___ns1__Combo_USCOREisCombo(soap, &soap_tmp___ns1__Combo_USCOREisCombo);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__Combo_USCOREisCombo(soap, &soap_tmp___ns1__Combo_USCOREisCombo, "-ns1:Combo_isCombo", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__Combo_USCOREisCombo(soap, &soap_tmp___ns1__Combo_USCOREisCombo, "-ns1:Combo_isCombo", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__Combo_USCOREisComboResponse_)
		return soap_closesock(soap);
	ns1__Combo_USCOREisComboResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__Combo_USCOREisComboResponse_->soap_get(soap, "ns1:Combo_isComboResponse", "ns1:Combo_isComboResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::Combo_USCOREmodify(const char *endpoint, const char *soap_action, ns1__Combo_USCOREmodify *ns1__Combo_USCOREmodify_, ns1__Combo_USCOREmodifyResponse *ns1__Combo_USCOREmodifyResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__Combo_USCOREmodify soap_tmp___ns1__Combo_USCOREmodify;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/Combo_modifyRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__Combo_USCOREmodify.ns1__Combo_USCOREmodify_ = ns1__Combo_USCOREmodify_;
	soap_serializeheader(soap);
	soap_serialize___ns1__Combo_USCOREmodify(soap, &soap_tmp___ns1__Combo_USCOREmodify);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__Combo_USCOREmodify(soap, &soap_tmp___ns1__Combo_USCOREmodify, "-ns1:Combo_modify", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__Combo_USCOREmodify(soap, &soap_tmp___ns1__Combo_USCOREmodify, "-ns1:Combo_modify", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__Combo_USCOREmodifyResponse_)
		return soap_closesock(soap);
	ns1__Combo_USCOREmodifyResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__Combo_USCOREmodifyResponse_->soap_get(soap, "ns1:Combo_modifyResponse", "ns1:Combo_modifyResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::DeleteFile(const char *endpoint, const char *soap_action, ns1__DeleteFile *ns1__DeleteFile_, ns1__DeleteFileResponse *ns1__DeleteFileResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__DeleteFile soap_tmp___ns1__DeleteFile;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/DeleteFileRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DeleteFile.ns1__DeleteFile_ = ns1__DeleteFile_;
	soap_serializeheader(soap);
	soap_serialize___ns1__DeleteFile(soap, &soap_tmp___ns1__DeleteFile);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DeleteFile(soap, &soap_tmp___ns1__DeleteFile, "-ns1:DeleteFile", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DeleteFile(soap, &soap_tmp___ns1__DeleteFile, "-ns1:DeleteFile", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DeleteFileResponse_)
		return soap_closesock(soap);
	ns1__DeleteFileResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DeleteFileResponse_->soap_get(soap, "ns1:DeleteFileResponse", "ns1:DeleteFileResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::DeleteFileContainer(const char *endpoint, const char *soap_action, ns1__DeleteFileContainer *ns1__DeleteFileContainer_, ns1__DeleteFileContainerResponse *ns1__DeleteFileContainerResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__DeleteFileContainer soap_tmp___ns1__DeleteFileContainer;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/DeleteFileContainerRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DeleteFileContainer.ns1__DeleteFileContainer_ = ns1__DeleteFileContainer_;
	soap_serializeheader(soap);
	soap_serialize___ns1__DeleteFileContainer(soap, &soap_tmp___ns1__DeleteFileContainer);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DeleteFileContainer(soap, &soap_tmp___ns1__DeleteFileContainer, "-ns1:DeleteFileContainer", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DeleteFileContainer(soap, &soap_tmp___ns1__DeleteFileContainer, "-ns1:DeleteFileContainer", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DeleteFileContainerResponse_)
		return soap_closesock(soap);
	ns1__DeleteFileContainerResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DeleteFileContainerResponse_->soap_get(soap, "ns1:DeleteFileContainerResponse", "ns1:DeleteFileContainerResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::CanDeleteFile(const char *endpoint, const char *soap_action, ns1__CanDeleteFile *ns1__CanDeleteFile_, ns1__CanDeleteFileResponse *ns1__CanDeleteFileResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__CanDeleteFile soap_tmp___ns1__CanDeleteFile;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/CanDeleteFileRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CanDeleteFile.ns1__CanDeleteFile_ = ns1__CanDeleteFile_;
	soap_serializeheader(soap);
	soap_serialize___ns1__CanDeleteFile(soap, &soap_tmp___ns1__CanDeleteFile);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CanDeleteFile(soap, &soap_tmp___ns1__CanDeleteFile, "-ns1:CanDeleteFile", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CanDeleteFile(soap, &soap_tmp___ns1__CanDeleteFile, "-ns1:CanDeleteFile", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CanDeleteFileResponse_)
		return soap_closesock(soap);
	ns1__CanDeleteFileResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CanDeleteFileResponse_->soap_get(soap, "ns1:CanDeleteFileResponse", "ns1:CanDeleteFileResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::CanDeleteFileContainer(const char *endpoint, const char *soap_action, ns1__CanDeleteFileContainer *ns1__CanDeleteFileContainer_, ns1__CanDeleteFileContainerResponse *ns1__CanDeleteFileContainerResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__CanDeleteFileContainer soap_tmp___ns1__CanDeleteFileContainer;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/CanDeleteFileContainerRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CanDeleteFileContainer.ns1__CanDeleteFileContainer_ = ns1__CanDeleteFileContainer_;
	soap_serializeheader(soap);
	soap_serialize___ns1__CanDeleteFileContainer(soap, &soap_tmp___ns1__CanDeleteFileContainer);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CanDeleteFileContainer(soap, &soap_tmp___ns1__CanDeleteFileContainer, "-ns1:CanDeleteFileContainer", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CanDeleteFileContainer(soap, &soap_tmp___ns1__CanDeleteFileContainer, "-ns1:CanDeleteFileContainer", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CanDeleteFileContainerResponse_)
		return soap_closesock(soap);
	ns1__CanDeleteFileContainerResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CanDeleteFileContainerResponse_->soap_get(soap, "ns1:CanDeleteFileContainerResponse", "ns1:CanDeleteFileContainerResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::DeleteFileVersion(const char *endpoint, const char *soap_action, ns1__DeleteFileVersion *ns1__DeleteFileVersion_, ns1__DeleteFileVersionResponse *ns1__DeleteFileVersionResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__DeleteFileVersion soap_tmp___ns1__DeleteFileVersion;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/DeleteFileVersionRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DeleteFileVersion.ns1__DeleteFileVersion_ = ns1__DeleteFileVersion_;
	soap_serializeheader(soap);
	soap_serialize___ns1__DeleteFileVersion(soap, &soap_tmp___ns1__DeleteFileVersion);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DeleteFileVersion(soap, &soap_tmp___ns1__DeleteFileVersion, "-ns1:DeleteFileVersion", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DeleteFileVersion(soap, &soap_tmp___ns1__DeleteFileVersion, "-ns1:DeleteFileVersion", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DeleteFileVersionResponse_)
		return soap_closesock(soap);
	ns1__DeleteFileVersionResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DeleteFileVersionResponse_->soap_get(soap, "ns1:DeleteFileVersionResponse", "ns1:DeleteFileVersionResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::DeleteFileContainerVersion(const char *endpoint, const char *soap_action, ns1__DeleteFileContainerVersion *ns1__DeleteFileContainerVersion_, ns1__DeleteFileContainerVersionResponse *ns1__DeleteFileContainerVersionResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__DeleteFileContainerVersion soap_tmp___ns1__DeleteFileContainerVersion;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/DeleteFileContainerVersionRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DeleteFileContainerVersion.ns1__DeleteFileContainerVersion_ = ns1__DeleteFileContainerVersion_;
	soap_serializeheader(soap);
	soap_serialize___ns1__DeleteFileContainerVersion(soap, &soap_tmp___ns1__DeleteFileContainerVersion);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DeleteFileContainerVersion(soap, &soap_tmp___ns1__DeleteFileContainerVersion, "-ns1:DeleteFileContainerVersion", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DeleteFileContainerVersion(soap, &soap_tmp___ns1__DeleteFileContainerVersion, "-ns1:DeleteFileContainerVersion", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DeleteFileContainerVersionResponse_)
		return soap_closesock(soap);
	ns1__DeleteFileContainerVersionResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DeleteFileContainerVersionResponse_->soap_get(soap, "ns1:DeleteFileContainerVersionResponse", "ns1:DeleteFileContainerVersionResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::InsertFile(const char *endpoint, const char *soap_action, ns1__InsertFile *ns1__InsertFile_, ns1__InsertFileResponse *ns1__InsertFileResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__InsertFile soap_tmp___ns1__InsertFile;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/InsertFileRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__InsertFile.ns1__InsertFile_ = ns1__InsertFile_;
	soap_serializeheader(soap);
	soap_serialize___ns1__InsertFile(soap, &soap_tmp___ns1__InsertFile);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__InsertFile(soap, &soap_tmp___ns1__InsertFile, "-ns1:InsertFile", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__InsertFile(soap, &soap_tmp___ns1__InsertFile, "-ns1:InsertFile", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__InsertFileResponse_)
		return soap_closesock(soap);
	ns1__InsertFileResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__InsertFileResponse_->soap_get(soap, "ns1:InsertFileResponse", "ns1:InsertFileResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::InsertFileContainer(const char *endpoint, const char *soap_action, ns1__InsertFileContainer *ns1__InsertFileContainer_, ns1__InsertFileContainerResponse *ns1__InsertFileContainerResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__InsertFileContainer soap_tmp___ns1__InsertFileContainer;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/InsertFileContainerRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__InsertFileContainer.ns1__InsertFileContainer_ = ns1__InsertFileContainer_;
	soap_serializeheader(soap);
	soap_serialize___ns1__InsertFileContainer(soap, &soap_tmp___ns1__InsertFileContainer);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__InsertFileContainer(soap, &soap_tmp___ns1__InsertFileContainer, "-ns1:InsertFileContainer", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__InsertFileContainer(soap, &soap_tmp___ns1__InsertFileContainer, "-ns1:InsertFileContainer", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__InsertFileContainerResponse_)
		return soap_closesock(soap);
	ns1__InsertFileContainerResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__InsertFileContainerResponse_->soap_get(soap, "ns1:InsertFileContainerResponse", "ns1:InsertFileContainerResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::CanInsertFile(const char *endpoint, const char *soap_action, ns1__CanInsertFile *ns1__CanInsertFile_, ns1__CanInsertFileResponse *ns1__CanInsertFileResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__CanInsertFile soap_tmp___ns1__CanInsertFile;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/CanInsertFileRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CanInsertFile.ns1__CanInsertFile_ = ns1__CanInsertFile_;
	soap_serializeheader(soap);
	soap_serialize___ns1__CanInsertFile(soap, &soap_tmp___ns1__CanInsertFile);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CanInsertFile(soap, &soap_tmp___ns1__CanInsertFile, "-ns1:CanInsertFile", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CanInsertFile(soap, &soap_tmp___ns1__CanInsertFile, "-ns1:CanInsertFile", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CanInsertFileResponse_)
		return soap_closesock(soap);
	ns1__CanInsertFileResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CanInsertFileResponse_->soap_get(soap, "ns1:CanInsertFileResponse", "ns1:CanInsertFileResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::CanInsertFileContainer(const char *endpoint, const char *soap_action, ns1__CanInsertFileContainer *ns1__CanInsertFileContainer_, ns1__CanInsertFileContainerResponse *ns1__CanInsertFileContainerResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__CanInsertFileContainer soap_tmp___ns1__CanInsertFileContainer;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/CanInsertFileContainerRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CanInsertFileContainer.ns1__CanInsertFileContainer_ = ns1__CanInsertFileContainer_;
	soap_serializeheader(soap);
	soap_serialize___ns1__CanInsertFileContainer(soap, &soap_tmp___ns1__CanInsertFileContainer);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CanInsertFileContainer(soap, &soap_tmp___ns1__CanInsertFileContainer, "-ns1:CanInsertFileContainer", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CanInsertFileContainer(soap, &soap_tmp___ns1__CanInsertFileContainer, "-ns1:CanInsertFileContainer", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CanInsertFileContainerResponse_)
		return soap_closesock(soap);
	ns1__CanInsertFileContainerResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CanInsertFileContainerResponse_->soap_get(soap, "ns1:CanInsertFileContainerResponse", "ns1:CanInsertFileContainerResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::CanModifyFile(const char *endpoint, const char *soap_action, ns1__CanModifyFile *ns1__CanModifyFile_, ns1__CanModifyFileResponse *ns1__CanModifyFileResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__CanModifyFile soap_tmp___ns1__CanModifyFile;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/CanModifyFileRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CanModifyFile.ns1__CanModifyFile_ = ns1__CanModifyFile_;
	soap_serializeheader(soap);
	soap_serialize___ns1__CanModifyFile(soap, &soap_tmp___ns1__CanModifyFile);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CanModifyFile(soap, &soap_tmp___ns1__CanModifyFile, "-ns1:CanModifyFile", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CanModifyFile(soap, &soap_tmp___ns1__CanModifyFile, "-ns1:CanModifyFile", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CanModifyFileResponse_)
		return soap_closesock(soap);
	ns1__CanModifyFileResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CanModifyFileResponse_->soap_get(soap, "ns1:CanModifyFileResponse", "ns1:CanModifyFileResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::CanShowFile(const char *endpoint, const char *soap_action, ns1__CanShowFile *ns1__CanShowFile_, ns1__CanShowFileResponse *ns1__CanShowFileResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__CanShowFile soap_tmp___ns1__CanShowFile;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/CanShowFileRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CanShowFile.ns1__CanShowFile_ = ns1__CanShowFile_;
	soap_serializeheader(soap);
	soap_serialize___ns1__CanShowFile(soap, &soap_tmp___ns1__CanShowFile);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CanShowFile(soap, &soap_tmp___ns1__CanShowFile, "-ns1:CanShowFile", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CanShowFile(soap, &soap_tmp___ns1__CanShowFile, "-ns1:CanShowFile", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CanShowFileResponse_)
		return soap_closesock(soap);
	ns1__CanShowFileResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CanShowFileResponse_->soap_get(soap, "ns1:CanShowFileResponse", "ns1:CanShowFileResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetFileListByCode(const char *endpoint, const char *soap_action, ns1__GetFileListByCode *ns1__GetFileListByCode_, ns1__GetFileListByCodeResponse *ns1__GetFileListByCodeResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetFileListByCode soap_tmp___ns1__GetFileListByCode;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetFileListByCodeRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetFileListByCode.ns1__GetFileListByCode_ = ns1__GetFileListByCode_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetFileListByCode(soap, &soap_tmp___ns1__GetFileListByCode);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetFileListByCode(soap, &soap_tmp___ns1__GetFileListByCode, "-ns1:GetFileListByCode", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetFileListByCode(soap, &soap_tmp___ns1__GetFileListByCode, "-ns1:GetFileListByCode", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetFileListByCodeResponse_)
		return soap_closesock(soap);
	ns1__GetFileListByCodeResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetFileListByCodeResponse_->soap_get(soap, "ns1:GetFileListByCodeResponse", "ns1:GetFileListByCodeResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetFileListByCodeForSecurity(const char *endpoint, const char *soap_action, ns1__GetFileListByCodeForSecurity *ns1__GetFileListByCodeForSecurity_, ns1__GetFileListByCodeForSecurityResponse *ns1__GetFileListByCodeForSecurityResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetFileListByCodeForSecurity soap_tmp___ns1__GetFileListByCodeForSecurity;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetFileListByCodeForSecurityRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetFileListByCodeForSecurity.ns1__GetFileListByCodeForSecurity_ = ns1__GetFileListByCodeForSecurity_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetFileListByCodeForSecurity(soap, &soap_tmp___ns1__GetFileListByCodeForSecurity);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetFileListByCodeForSecurity(soap, &soap_tmp___ns1__GetFileListByCodeForSecurity, "-ns1:GetFileListByCodeForSecurity", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetFileListByCodeForSecurity(soap, &soap_tmp___ns1__GetFileListByCodeForSecurity, "-ns1:GetFileListByCodeForSecurity", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetFileListByCodeForSecurityResponse_)
		return soap_closesock(soap);
	ns1__GetFileListByCodeForSecurityResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetFileListByCodeForSecurityResponse_->soap_get(soap, "ns1:GetFileListByCodeForSecurityResponse", "ns1:GetFileListByCodeForSecurityResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetDataFileListContainer(const char *endpoint, const char *soap_action, ns1__GetDataFileListContainer *ns1__GetDataFileListContainer_, ns1__GetDataFileListContainerResponse *ns1__GetDataFileListContainerResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetDataFileListContainer soap_tmp___ns1__GetDataFileListContainer;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetDataFileListContainerRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetDataFileListContainer.ns1__GetDataFileListContainer_ = ns1__GetDataFileListContainer_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetDataFileListContainer(soap, &soap_tmp___ns1__GetDataFileListContainer);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetDataFileListContainer(soap, &soap_tmp___ns1__GetDataFileListContainer, "-ns1:GetDataFileListContainer", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetDataFileListContainer(soap, &soap_tmp___ns1__GetDataFileListContainer, "-ns1:GetDataFileListContainer", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetDataFileListContainerResponse_)
		return soap_closesock(soap);
	ns1__GetDataFileListContainerResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetDataFileListContainerResponse_->soap_get(soap, "ns1:GetDataFileListContainerResponse", "ns1:GetDataFileListContainerResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetDataFileListOnlyLastVersion(const char *endpoint, const char *soap_action, ns1__GetDataFileListOnlyLastVersion *ns1__GetDataFileListOnlyLastVersion_, ns1__GetDataFileListOnlyLastVersionResponse *ns1__GetDataFileListOnlyLastVersionResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetDataFileListOnlyLastVersion soap_tmp___ns1__GetDataFileListOnlyLastVersion;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetDataFileListOnlyLastVersionRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetDataFileListOnlyLastVersion.ns1__GetDataFileListOnlyLastVersion_ = ns1__GetDataFileListOnlyLastVersion_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetDataFileListOnlyLastVersion(soap, &soap_tmp___ns1__GetDataFileListOnlyLastVersion);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetDataFileListOnlyLastVersion(soap, &soap_tmp___ns1__GetDataFileListOnlyLastVersion, "-ns1:GetDataFileListOnlyLastVersion", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetDataFileListOnlyLastVersion(soap, &soap_tmp___ns1__GetDataFileListOnlyLastVersion, "-ns1:GetDataFileListOnlyLastVersion", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetDataFileListOnlyLastVersionResponse_)
		return soap_closesock(soap);
	ns1__GetDataFileListOnlyLastVersionResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetDataFileListOnlyLastVersionResponse_->soap_get(soap, "ns1:GetDataFileListOnlyLastVersionResponse", "ns1:GetDataFileListOnlyLastVersionResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetDataFileList(const char *endpoint, const char *soap_action, ns1__GetDataFileList *ns1__GetDataFileList_, ns1__GetDataFileListResponse *ns1__GetDataFileListResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetDataFileList soap_tmp___ns1__GetDataFileList;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetDataFileListRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetDataFileList.ns1__GetDataFileList_ = ns1__GetDataFileList_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetDataFileList(soap, &soap_tmp___ns1__GetDataFileList);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetDataFileList(soap, &soap_tmp___ns1__GetDataFileList, "-ns1:GetDataFileList", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetDataFileList(soap, &soap_tmp___ns1__GetDataFileList, "-ns1:GetDataFileList", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetDataFileListResponse_)
		return soap_closesock(soap);
	ns1__GetDataFileListResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetDataFileListResponse_->soap_get(soap, "ns1:GetDataFileListResponse", "ns1:GetDataFileListResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetDataFileListForSecurity(const char *endpoint, const char *soap_action, ns1__GetDataFileListForSecurity *ns1__GetDataFileListForSecurity_, ns1__GetDataFileListForSecurityResponse *ns1__GetDataFileListForSecurityResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetDataFileListForSecurity soap_tmp___ns1__GetDataFileListForSecurity;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetDataFileListForSecurityRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetDataFileListForSecurity.ns1__GetDataFileListForSecurity_ = ns1__GetDataFileListForSecurity_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetDataFileListForSecurity(soap, &soap_tmp___ns1__GetDataFileListForSecurity);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetDataFileListForSecurity(soap, &soap_tmp___ns1__GetDataFileListForSecurity, "-ns1:GetDataFileListForSecurity", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetDataFileListForSecurity(soap, &soap_tmp___ns1__GetDataFileListForSecurity, "-ns1:GetDataFileListForSecurity", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetDataFileListForSecurityResponse_)
		return soap_closesock(soap);
	ns1__GetDataFileListForSecurityResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetDataFileListForSecurityResponse_->soap_get(soap, "ns1:GetDataFileListForSecurityResponse", "ns1:GetDataFileListForSecurityResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetDataFileDetail(const char *endpoint, const char *soap_action, ns1__GetDataFileDetail *ns1__GetDataFileDetail_, ns1__GetDataFileDetailResponse *ns1__GetDataFileDetailResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetDataFileDetail soap_tmp___ns1__GetDataFileDetail;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetDataFileDetailRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetDataFileDetail.ns1__GetDataFileDetail_ = ns1__GetDataFileDetail_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetDataFileDetail(soap, &soap_tmp___ns1__GetDataFileDetail);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetDataFileDetail(soap, &soap_tmp___ns1__GetDataFileDetail, "-ns1:GetDataFileDetail", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetDataFileDetail(soap, &soap_tmp___ns1__GetDataFileDetail, "-ns1:GetDataFileDetail", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetDataFileDetailResponse_)
		return soap_closesock(soap);
	ns1__GetDataFileDetailResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetDataFileDetailResponse_->soap_get(soap, "ns1:GetDataFileDetailResponse", "ns1:GetDataFileDetailResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetDataFileContainerDetail(const char *endpoint, const char *soap_action, ns1__GetDataFileContainerDetail *ns1__GetDataFileContainerDetail_, ns1__GetDataFileContainerDetailResponse *ns1__GetDataFileContainerDetailResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetDataFileContainerDetail soap_tmp___ns1__GetDataFileContainerDetail;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetDataFileContainerDetailRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetDataFileContainerDetail.ns1__GetDataFileContainerDetail_ = ns1__GetDataFileContainerDetail_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetDataFileContainerDetail(soap, &soap_tmp___ns1__GetDataFileContainerDetail);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetDataFileContainerDetail(soap, &soap_tmp___ns1__GetDataFileContainerDetail, "-ns1:GetDataFileContainerDetail", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetDataFileContainerDetail(soap, &soap_tmp___ns1__GetDataFileContainerDetail, "-ns1:GetDataFileContainerDetail", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetDataFileContainerDetailResponse_)
		return soap_closesock(soap);
	ns1__GetDataFileContainerDetailResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetDataFileContainerDetailResponse_->soap_get(soap, "ns1:GetDataFileContainerDetailResponse", "ns1:GetDataFileContainerDetailResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::DownloadFile(const char *endpoint, const char *soap_action, ns1__DownloadFile *ns1__DownloadFile_, ns1__DownloadFileResponse *ns1__DownloadFileResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__DownloadFile soap_tmp___ns1__DownloadFile;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/DownloadFileRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DownloadFile.ns1__DownloadFile_ = ns1__DownloadFile_;
	soap_serializeheader(soap);
	soap_serialize___ns1__DownloadFile(soap, &soap_tmp___ns1__DownloadFile);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DownloadFile(soap, &soap_tmp___ns1__DownloadFile, "-ns1:DownloadFile", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DownloadFile(soap, &soap_tmp___ns1__DownloadFile, "-ns1:DownloadFile", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DownloadFileResponse_)
		return soap_closesock(soap);
	ns1__DownloadFileResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DownloadFileResponse_->soap_get(soap, "ns1:DownloadFileResponse", "ns1:DownloadFileResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::DownloadFileByFileUniqueCode(const char *endpoint, const char *soap_action, ns1__DownloadFileByFileUniqueCode *ns1__DownloadFileByFileUniqueCode_, ns1__DownloadFileByFileUniqueCodeResponse *ns1__DownloadFileByFileUniqueCodeResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__DownloadFileByFileUniqueCode soap_tmp___ns1__DownloadFileByFileUniqueCode;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/DownloadFileByFileUniqueCodeRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DownloadFileByFileUniqueCode.ns1__DownloadFileByFileUniqueCode_ = ns1__DownloadFileByFileUniqueCode_;
	soap_serializeheader(soap);
	soap_serialize___ns1__DownloadFileByFileUniqueCode(soap, &soap_tmp___ns1__DownloadFileByFileUniqueCode);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DownloadFileByFileUniqueCode(soap, &soap_tmp___ns1__DownloadFileByFileUniqueCode, "-ns1:DownloadFileByFileUniqueCode", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DownloadFileByFileUniqueCode(soap, &soap_tmp___ns1__DownloadFileByFileUniqueCode, "-ns1:DownloadFileByFileUniqueCode", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DownloadFileByFileUniqueCodeResponse_)
		return soap_closesock(soap);
	ns1__DownloadFileByFileUniqueCodeResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DownloadFileByFileUniqueCodeResponse_->soap_get(soap, "ns1:DownloadFileByFileUniqueCodeResponse", "ns1:DownloadFileByFileUniqueCodeResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::DownloadFileUnc(const char *endpoint, const char *soap_action, ns1__DownloadFileUnc *ns1__DownloadFileUnc_, ns1__DownloadFileUncResponse *ns1__DownloadFileUncResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__DownloadFileUnc soap_tmp___ns1__DownloadFileUnc;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/DownloadFileUncRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DownloadFileUnc.ns1__DownloadFileUnc_ = ns1__DownloadFileUnc_;
	soap_serializeheader(soap);
	soap_serialize___ns1__DownloadFileUnc(soap, &soap_tmp___ns1__DownloadFileUnc);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DownloadFileUnc(soap, &soap_tmp___ns1__DownloadFileUnc, "-ns1:DownloadFileUnc", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DownloadFileUnc(soap, &soap_tmp___ns1__DownloadFileUnc, "-ns1:DownloadFileUnc", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DownloadFileUncResponse_)
		return soap_closesock(soap);
	ns1__DownloadFileUncResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DownloadFileUncResponse_->soap_get(soap, "ns1:DownloadFileUncResponse", "ns1:DownloadFileUncResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::DownloadFileContainerUnc(const char *endpoint, const char *soap_action, ns1__DownloadFileContainerUnc *ns1__DownloadFileContainerUnc_, ns1__DownloadFileContainerUncResponse *ns1__DownloadFileContainerUncResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__DownloadFileContainerUnc soap_tmp___ns1__DownloadFileContainerUnc;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/DownloadFileContainerUncRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DownloadFileContainerUnc.ns1__DownloadFileContainerUnc_ = ns1__DownloadFileContainerUnc_;
	soap_serializeheader(soap);
	soap_serialize___ns1__DownloadFileContainerUnc(soap, &soap_tmp___ns1__DownloadFileContainerUnc);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DownloadFileContainerUnc(soap, &soap_tmp___ns1__DownloadFileContainerUnc, "-ns1:DownloadFileContainerUnc", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DownloadFileContainerUnc(soap, &soap_tmp___ns1__DownloadFileContainerUnc, "-ns1:DownloadFileContainerUnc", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DownloadFileContainerUncResponse_)
		return soap_closesock(soap);
	ns1__DownloadFileContainerUncResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DownloadFileContainerUncResponse_->soap_get(soap, "ns1:DownloadFileContainerUncResponse", "ns1:DownloadFileContainerUncResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::DownloadGetChunk(const char *endpoint, const char *soap_action, ns1__DownloadGetChunk *ns1__DownloadGetChunk_, ns1__DownloadGetChunkResponse *ns1__DownloadGetChunkResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__DownloadGetChunk soap_tmp___ns1__DownloadGetChunk;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/DownloadGetChunkRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DownloadGetChunk.ns1__DownloadGetChunk_ = ns1__DownloadGetChunk_;
	soap_serializeheader(soap);
	soap_serialize___ns1__DownloadGetChunk(soap, &soap_tmp___ns1__DownloadGetChunk);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DownloadGetChunk(soap, &soap_tmp___ns1__DownloadGetChunk, "-ns1:DownloadGetChunk", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DownloadGetChunk(soap, &soap_tmp___ns1__DownloadGetChunk, "-ns1:DownloadGetChunk", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DownloadGetChunkResponse_)
		return soap_closesock(soap);
	ns1__DownloadGetChunkResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DownloadGetChunkResponse_->soap_get(soap, "ns1:DownloadGetChunkResponse", "ns1:DownloadGetChunkResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::DownloadGetNext(const char *endpoint, const char *soap_action, ns1__DownloadGetNext *ns1__DownloadGetNext_, ns1__DownloadGetNextResponse *ns1__DownloadGetNextResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__DownloadGetNext soap_tmp___ns1__DownloadGetNext;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/DownloadGetNextRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DownloadGetNext.ns1__DownloadGetNext_ = ns1__DownloadGetNext_;
	soap_serializeheader(soap);
	soap_serialize___ns1__DownloadGetNext(soap, &soap_tmp___ns1__DownloadGetNext);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DownloadGetNext(soap, &soap_tmp___ns1__DownloadGetNext, "-ns1:DownloadGetNext", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DownloadGetNext(soap, &soap_tmp___ns1__DownloadGetNext, "-ns1:DownloadGetNext", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DownloadGetNextResponse_)
		return soap_closesock(soap);
	ns1__DownloadGetNextResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DownloadGetNextResponse_->soap_get(soap, "ns1:DownloadGetNextResponse", "ns1:DownloadGetNextResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::UploadSendChunk(const char *endpoint, const char *soap_action, ns1__UploadSendChunk *ns1__UploadSendChunk_, ns1__UploadSendChunkResponse *ns1__UploadSendChunkResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__UploadSendChunk soap_tmp___ns1__UploadSendChunk;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/UploadSendChunkRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__UploadSendChunk.ns1__UploadSendChunk_ = ns1__UploadSendChunk_;
	soap_serializeheader(soap);
	soap_serialize___ns1__UploadSendChunk(soap, &soap_tmp___ns1__UploadSendChunk);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UploadSendChunk(soap, &soap_tmp___ns1__UploadSendChunk, "-ns1:UploadSendChunk", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UploadSendChunk(soap, &soap_tmp___ns1__UploadSendChunk, "-ns1:UploadSendChunk", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UploadSendChunkResponse_)
		return soap_closesock(soap);
	ns1__UploadSendChunkResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UploadSendChunkResponse_->soap_get(soap, "ns1:UploadSendChunkResponse", "ns1:UploadSendChunkResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::DownloadFileContainer(const char *endpoint, const char *soap_action, ns1__DownloadFileContainer *ns1__DownloadFileContainer_, ns1__DownloadFileContainerResponse *ns1__DownloadFileContainerResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__DownloadFileContainer soap_tmp___ns1__DownloadFileContainer;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/DownloadFileContainerRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DownloadFileContainer.ns1__DownloadFileContainer_ = ns1__DownloadFileContainer_;
	soap_serializeheader(soap);
	soap_serialize___ns1__DownloadFileContainer(soap, &soap_tmp___ns1__DownloadFileContainer);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DownloadFileContainer(soap, &soap_tmp___ns1__DownloadFileContainer, "-ns1:DownloadFileContainer", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DownloadFileContainer(soap, &soap_tmp___ns1__DownloadFileContainer, "-ns1:DownloadFileContainer", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DownloadFileContainerResponse_)
		return soap_closesock(soap);
	ns1__DownloadFileContainerResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DownloadFileContainerResponse_->soap_get(soap, "ns1:DownloadFileContainerResponse", "ns1:DownloadFileContainerResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::DownloadFilePreview(const char *endpoint, const char *soap_action, ns1__DownloadFilePreview *ns1__DownloadFilePreview_, ns1__DownloadFilePreviewResponse *ns1__DownloadFilePreviewResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__DownloadFilePreview soap_tmp___ns1__DownloadFilePreview;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/DownloadFilePreviewRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DownloadFilePreview.ns1__DownloadFilePreview_ = ns1__DownloadFilePreview_;
	soap_serializeheader(soap);
	soap_serialize___ns1__DownloadFilePreview(soap, &soap_tmp___ns1__DownloadFilePreview);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DownloadFilePreview(soap, &soap_tmp___ns1__DownloadFilePreview, "-ns1:DownloadFilePreview", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DownloadFilePreview(soap, &soap_tmp___ns1__DownloadFilePreview, "-ns1:DownloadFilePreview", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DownloadFilePreviewResponse_)
		return soap_closesock(soap);
	ns1__DownloadFilePreviewResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DownloadFilePreviewResponse_->soap_get(soap, "ns1:DownloadFilePreviewResponse", "ns1:DownloadFilePreviewResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetUploadDetailByFilecode(const char *endpoint, const char *soap_action, ns1__GetUploadDetailByFilecode *ns1__GetUploadDetailByFilecode_, ns1__GetUploadDetailByFilecodeResponse *ns1__GetUploadDetailByFilecodeResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetUploadDetailByFilecode soap_tmp___ns1__GetUploadDetailByFilecode;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetUploadDetailByFilecodeRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetUploadDetailByFilecode.ns1__GetUploadDetailByFilecode_ = ns1__GetUploadDetailByFilecode_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetUploadDetailByFilecode(soap, &soap_tmp___ns1__GetUploadDetailByFilecode);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetUploadDetailByFilecode(soap, &soap_tmp___ns1__GetUploadDetailByFilecode, "-ns1:GetUploadDetailByFilecode", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetUploadDetailByFilecode(soap, &soap_tmp___ns1__GetUploadDetailByFilecode, "-ns1:GetUploadDetailByFilecode", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetUploadDetailByFilecodeResponse_)
		return soap_closesock(soap);
	ns1__GetUploadDetailByFilecodeResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetUploadDetailByFilecodeResponse_->soap_get(soap, "ns1:GetUploadDetailByFilecodeResponse", "ns1:GetUploadDetailByFilecodeResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetUploadDetailByDataId(const char *endpoint, const char *soap_action, ns1__GetUploadDetailByDataId *ns1__GetUploadDetailByDataId_, ns1__GetUploadDetailByDataIdResponse *ns1__GetUploadDetailByDataIdResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetUploadDetailByDataId soap_tmp___ns1__GetUploadDetailByDataId;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetUploadDetailByDataIdRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetUploadDetailByDataId.ns1__GetUploadDetailByDataId_ = ns1__GetUploadDetailByDataId_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetUploadDetailByDataId(soap, &soap_tmp___ns1__GetUploadDetailByDataId);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetUploadDetailByDataId(soap, &soap_tmp___ns1__GetUploadDetailByDataId, "-ns1:GetUploadDetailByDataId", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetUploadDetailByDataId(soap, &soap_tmp___ns1__GetUploadDetailByDataId, "-ns1:GetUploadDetailByDataId", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetUploadDetailByDataIdResponse_)
		return soap_closesock(soap);
	ns1__GetUploadDetailByDataIdResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetUploadDetailByDataIdResponse_->soap_get(soap, "ns1:GetUploadDetailByDataIdResponse", "ns1:GetUploadDetailByDataIdResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetUploadDetailByData(const char *endpoint, const char *soap_action, ns1__GetUploadDetailByData *ns1__GetUploadDetailByData_, ns1__GetUploadDetailByDataResponse *ns1__GetUploadDetailByDataResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetUploadDetailByData soap_tmp___ns1__GetUploadDetailByData;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetUploadDetailByDataRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetUploadDetailByData.ns1__GetUploadDetailByData_ = ns1__GetUploadDetailByData_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetUploadDetailByData(soap, &soap_tmp___ns1__GetUploadDetailByData);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetUploadDetailByData(soap, &soap_tmp___ns1__GetUploadDetailByData, "-ns1:GetUploadDetailByData", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetUploadDetailByData(soap, &soap_tmp___ns1__GetUploadDetailByData, "-ns1:GetUploadDetailByData", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetUploadDetailByDataResponse_)
		return soap_closesock(soap);
	ns1__GetUploadDetailByDataResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetUploadDetailByDataResponse_->soap_get(soap, "ns1:GetUploadDetailByDataResponse", "ns1:GetUploadDetailByDataResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetUploadDetailByContId(const char *endpoint, const char *soap_action, ns1__GetUploadDetailByContId *ns1__GetUploadDetailByContId_, ns1__GetUploadDetailByContIdResponse *ns1__GetUploadDetailByContIdResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetUploadDetailByContId soap_tmp___ns1__GetUploadDetailByContId;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetUploadDetailByContIdRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetUploadDetailByContId.ns1__GetUploadDetailByContId_ = ns1__GetUploadDetailByContId_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetUploadDetailByContId(soap, &soap_tmp___ns1__GetUploadDetailByContId);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetUploadDetailByContId(soap, &soap_tmp___ns1__GetUploadDetailByContId, "-ns1:GetUploadDetailByContId", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetUploadDetailByContId(soap, &soap_tmp___ns1__GetUploadDetailByContId, "-ns1:GetUploadDetailByContId", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetUploadDetailByContIdResponse_)
		return soap_closesock(soap);
	ns1__GetUploadDetailByContIdResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetUploadDetailByContIdResponse_->soap_get(soap, "ns1:GetUploadDetailByContIdResponse", "ns1:GetUploadDetailByContIdResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetUploadDetailByCont(const char *endpoint, const char *soap_action, ns1__GetUploadDetailByCont *ns1__GetUploadDetailByCont_, ns1__GetUploadDetailByContResponse *ns1__GetUploadDetailByContResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetUploadDetailByCont soap_tmp___ns1__GetUploadDetailByCont;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetUploadDetailByContRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetUploadDetailByCont.ns1__GetUploadDetailByCont_ = ns1__GetUploadDetailByCont_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetUploadDetailByCont(soap, &soap_tmp___ns1__GetUploadDetailByCont);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetUploadDetailByCont(soap, &soap_tmp___ns1__GetUploadDetailByCont, "-ns1:GetUploadDetailByCont", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetUploadDetailByCont(soap, &soap_tmp___ns1__GetUploadDetailByCont, "-ns1:GetUploadDetailByCont", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetUploadDetailByContResponse_)
		return soap_closesock(soap);
	ns1__GetUploadDetailByContResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetUploadDetailByContResponse_->soap_get(soap, "ns1:GetUploadDetailByContResponse", "ns1:GetUploadDetailByContResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::UploadEndFile(const char *endpoint, const char *soap_action, ns1__UploadEndFile *ns1__UploadEndFile_, ns1__UploadEndFileResponse *ns1__UploadEndFileResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__UploadEndFile soap_tmp___ns1__UploadEndFile;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/UploadEndFileRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__UploadEndFile.ns1__UploadEndFile_ = ns1__UploadEndFile_;
	soap_serializeheader(soap);
	soap_serialize___ns1__UploadEndFile(soap, &soap_tmp___ns1__UploadEndFile);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UploadEndFile(soap, &soap_tmp___ns1__UploadEndFile, "-ns1:UploadEndFile", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UploadEndFile(soap, &soap_tmp___ns1__UploadEndFile, "-ns1:UploadEndFile", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UploadEndFileResponse_)
		return soap_closesock(soap);
	ns1__UploadEndFileResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UploadEndFileResponse_->soap_get(soap, "ns1:UploadEndFileResponse", "ns1:UploadEndFileResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::UploadEndFileContainer(const char *endpoint, const char *soap_action, ns1__UploadEndFileContainer *ns1__UploadEndFileContainer_, ns1__UploadEndFileContainerResponse *ns1__UploadEndFileContainerResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__UploadEndFileContainer soap_tmp___ns1__UploadEndFileContainer;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/UploadEndFileContainerRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__UploadEndFileContainer.ns1__UploadEndFileContainer_ = ns1__UploadEndFileContainer_;
	soap_serializeheader(soap);
	soap_serialize___ns1__UploadEndFileContainer(soap, &soap_tmp___ns1__UploadEndFileContainer);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UploadEndFileContainer(soap, &soap_tmp___ns1__UploadEndFileContainer, "-ns1:UploadEndFileContainer", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UploadEndFileContainer(soap, &soap_tmp___ns1__UploadEndFileContainer, "-ns1:UploadEndFileContainer", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UploadEndFileContainerResponse_)
		return soap_closesock(soap);
	ns1__UploadEndFileContainerResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UploadEndFileContainerResponse_->soap_get(soap, "ns1:UploadEndFileContainerResponse", "ns1:UploadEndFileContainerResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::SetTmpUploadPath(const char *endpoint, const char *soap_action, ns1__SetTmpUploadPath *ns1__SetTmpUploadPath_, ns1__SetTmpUploadPathResponse *ns1__SetTmpUploadPathResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__SetTmpUploadPath soap_tmp___ns1__SetTmpUploadPath;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/SetTmpUploadPathRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__SetTmpUploadPath.ns1__SetTmpUploadPath_ = ns1__SetTmpUploadPath_;
	soap_serializeheader(soap);
	soap_serialize___ns1__SetTmpUploadPath(soap, &soap_tmp___ns1__SetTmpUploadPath);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__SetTmpUploadPath(soap, &soap_tmp___ns1__SetTmpUploadPath, "-ns1:SetTmpUploadPath", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__SetTmpUploadPath(soap, &soap_tmp___ns1__SetTmpUploadPath, "-ns1:SetTmpUploadPath", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__SetTmpUploadPathResponse_)
		return soap_closesock(soap);
	ns1__SetTmpUploadPathResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__SetTmpUploadPathResponse_->soap_get(soap, "ns1:SetTmpUploadPathResponse", "ns1:SetTmpUploadPathResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::SetTmpDownloadPath(const char *endpoint, const char *soap_action, ns1__SetTmpDownloadPath *ns1__SetTmpDownloadPath_, ns1__SetTmpDownloadPathResponse *ns1__SetTmpDownloadPathResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__SetTmpDownloadPath soap_tmp___ns1__SetTmpDownloadPath;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/SetTmpDownloadPathRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__SetTmpDownloadPath.ns1__SetTmpDownloadPath_ = ns1__SetTmpDownloadPath_;
	soap_serializeheader(soap);
	soap_serialize___ns1__SetTmpDownloadPath(soap, &soap_tmp___ns1__SetTmpDownloadPath);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__SetTmpDownloadPath(soap, &soap_tmp___ns1__SetTmpDownloadPath, "-ns1:SetTmpDownloadPath", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__SetTmpDownloadPath(soap, &soap_tmp___ns1__SetTmpDownloadPath, "-ns1:SetTmpDownloadPath", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__SetTmpDownloadPathResponse_)
		return soap_closesock(soap);
	ns1__SetTmpDownloadPathResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__SetTmpDownloadPathResponse_->soap_get(soap, "ns1:SetTmpDownloadPathResponse", "ns1:SetTmpDownloadPathResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetDownloadDetailByFilecode(const char *endpoint, const char *soap_action, ns1__GetDownloadDetailByFilecode *ns1__GetDownloadDetailByFilecode_, ns1__GetDownloadDetailByFilecodeResponse *ns1__GetDownloadDetailByFilecodeResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetDownloadDetailByFilecode soap_tmp___ns1__GetDownloadDetailByFilecode;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetDownloadDetailByFilecodeRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetDownloadDetailByFilecode.ns1__GetDownloadDetailByFilecode_ = ns1__GetDownloadDetailByFilecode_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetDownloadDetailByFilecode(soap, &soap_tmp___ns1__GetDownloadDetailByFilecode);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetDownloadDetailByFilecode(soap, &soap_tmp___ns1__GetDownloadDetailByFilecode, "-ns1:GetDownloadDetailByFilecode", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetDownloadDetailByFilecode(soap, &soap_tmp___ns1__GetDownloadDetailByFilecode, "-ns1:GetDownloadDetailByFilecode", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetDownloadDetailByFilecodeResponse_)
		return soap_closesock(soap);
	ns1__GetDownloadDetailByFilecodeResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetDownloadDetailByFilecodeResponse_->soap_get(soap, "ns1:GetDownloadDetailByFilecodeResponse", "ns1:GetDownloadDetailByFilecodeResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetDownloadDetailByDataId(const char *endpoint, const char *soap_action, ns1__GetDownloadDetailByDataId *ns1__GetDownloadDetailByDataId_, ns1__GetDownloadDetailByDataIdResponse *ns1__GetDownloadDetailByDataIdResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetDownloadDetailByDataId soap_tmp___ns1__GetDownloadDetailByDataId;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetDownloadDetailByDataIdRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetDownloadDetailByDataId.ns1__GetDownloadDetailByDataId_ = ns1__GetDownloadDetailByDataId_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetDownloadDetailByDataId(soap, &soap_tmp___ns1__GetDownloadDetailByDataId);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetDownloadDetailByDataId(soap, &soap_tmp___ns1__GetDownloadDetailByDataId, "-ns1:GetDownloadDetailByDataId", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetDownloadDetailByDataId(soap, &soap_tmp___ns1__GetDownloadDetailByDataId, "-ns1:GetDownloadDetailByDataId", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetDownloadDetailByDataIdResponse_)
		return soap_closesock(soap);
	ns1__GetDownloadDetailByDataIdResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetDownloadDetailByDataIdResponse_->soap_get(soap, "ns1:GetDownloadDetailByDataIdResponse", "ns1:GetDownloadDetailByDataIdResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetDownloadDetailByData(const char *endpoint, const char *soap_action, ns1__GetDownloadDetailByData *ns1__GetDownloadDetailByData_, ns1__GetDownloadDetailByDataResponse *ns1__GetDownloadDetailByDataResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetDownloadDetailByData soap_tmp___ns1__GetDownloadDetailByData;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetDownloadDetailByDataRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetDownloadDetailByData.ns1__GetDownloadDetailByData_ = ns1__GetDownloadDetailByData_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetDownloadDetailByData(soap, &soap_tmp___ns1__GetDownloadDetailByData);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetDownloadDetailByData(soap, &soap_tmp___ns1__GetDownloadDetailByData, "-ns1:GetDownloadDetailByData", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetDownloadDetailByData(soap, &soap_tmp___ns1__GetDownloadDetailByData, "-ns1:GetDownloadDetailByData", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetDownloadDetailByDataResponse_)
		return soap_closesock(soap);
	ns1__GetDownloadDetailByDataResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetDownloadDetailByDataResponse_->soap_get(soap, "ns1:GetDownloadDetailByDataResponse", "ns1:GetDownloadDetailByDataResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetDownloadDetailByContId(const char *endpoint, const char *soap_action, ns1__GetDownloadDetailByContId *ns1__GetDownloadDetailByContId_, ns1__GetDownloadDetailByContIdResponse *ns1__GetDownloadDetailByContIdResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetDownloadDetailByContId soap_tmp___ns1__GetDownloadDetailByContId;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetDownloadDetailByContIdRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetDownloadDetailByContId.ns1__GetDownloadDetailByContId_ = ns1__GetDownloadDetailByContId_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetDownloadDetailByContId(soap, &soap_tmp___ns1__GetDownloadDetailByContId);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetDownloadDetailByContId(soap, &soap_tmp___ns1__GetDownloadDetailByContId, "-ns1:GetDownloadDetailByContId", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetDownloadDetailByContId(soap, &soap_tmp___ns1__GetDownloadDetailByContId, "-ns1:GetDownloadDetailByContId", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetDownloadDetailByContIdResponse_)
		return soap_closesock(soap);
	ns1__GetDownloadDetailByContIdResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetDownloadDetailByContIdResponse_->soap_get(soap, "ns1:GetDownloadDetailByContIdResponse", "ns1:GetDownloadDetailByContIdResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetDownloadDetailByCont(const char *endpoint, const char *soap_action, ns1__GetDownloadDetailByCont *ns1__GetDownloadDetailByCont_, ns1__GetDownloadDetailByContResponse *ns1__GetDownloadDetailByContResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetDownloadDetailByCont soap_tmp___ns1__GetDownloadDetailByCont;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetDownloadDetailByContRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetDownloadDetailByCont.ns1__GetDownloadDetailByCont_ = ns1__GetDownloadDetailByCont_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetDownloadDetailByCont(soap, &soap_tmp___ns1__GetDownloadDetailByCont);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetDownloadDetailByCont(soap, &soap_tmp___ns1__GetDownloadDetailByCont, "-ns1:GetDownloadDetailByCont", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetDownloadDetailByCont(soap, &soap_tmp___ns1__GetDownloadDetailByCont, "-ns1:GetDownloadDetailByCont", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetDownloadDetailByContResponse_)
		return soap_closesock(soap);
	ns1__GetDownloadDetailByContResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetDownloadDetailByContResponse_->soap_get(soap, "ns1:GetDownloadDetailByContResponse", "ns1:GetDownloadDetailByContResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetCountFileList(const char *endpoint, const char *soap_action, ns1__GetCountFileList *ns1__GetCountFileList_, ns1__GetCountFileListResponse *ns1__GetCountFileListResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetCountFileList soap_tmp___ns1__GetCountFileList;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetCountFileListRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetCountFileList.ns1__GetCountFileList_ = ns1__GetCountFileList_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetCountFileList(soap, &soap_tmp___ns1__GetCountFileList);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetCountFileList(soap, &soap_tmp___ns1__GetCountFileList, "-ns1:GetCountFileList", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetCountFileList(soap, &soap_tmp___ns1__GetCountFileList, "-ns1:GetCountFileList", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetCountFileListResponse_)
		return soap_closesock(soap);
	ns1__GetCountFileListResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetCountFileListResponse_->soap_get(soap, "ns1:GetCountFileListResponse", "ns1:GetCountFileListResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::ModifyFileDescription(const char *endpoint, const char *soap_action, ns1__ModifyFileDescription *ns1__ModifyFileDescription_, ns1__ModifyFileDescriptionResponse *ns1__ModifyFileDescriptionResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__ModifyFileDescription soap_tmp___ns1__ModifyFileDescription;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/ModifyFileDescriptionRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ModifyFileDescription.ns1__ModifyFileDescription_ = ns1__ModifyFileDescription_;
	soap_serializeheader(soap);
	soap_serialize___ns1__ModifyFileDescription(soap, &soap_tmp___ns1__ModifyFileDescription);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ModifyFileDescription(soap, &soap_tmp___ns1__ModifyFileDescription, "-ns1:ModifyFileDescription", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ModifyFileDescription(soap, &soap_tmp___ns1__ModifyFileDescription, "-ns1:ModifyFileDescription", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ModifyFileDescriptionResponse_)
		return soap_closesock(soap);
	ns1__ModifyFileDescriptionResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ModifyFileDescriptionResponse_->soap_get(soap, "ns1:ModifyFileDescriptionResponse", "ns1:ModifyFileDescriptionResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::CopyFile(const char *endpoint, const char *soap_action, ns1__CopyFile *ns1__CopyFile_, ns1__CopyFileResponse *ns1__CopyFileResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__CopyFile soap_tmp___ns1__CopyFile;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/CopyFileRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CopyFile.ns1__CopyFile_ = ns1__CopyFile_;
	soap_serializeheader(soap);
	soap_serialize___ns1__CopyFile(soap, &soap_tmp___ns1__CopyFile);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CopyFile(soap, &soap_tmp___ns1__CopyFile, "-ns1:CopyFile", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CopyFile(soap, &soap_tmp___ns1__CopyFile, "-ns1:CopyFile", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CopyFileResponse_)
		return soap_closesock(soap);
	ns1__CopyFileResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CopyFileResponse_->soap_get(soap, "ns1:CopyFileResponse", "ns1:CopyFileResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::IfFileExist(const char *endpoint, const char *soap_action, ns1__IfFileExist *ns1__IfFileExist_, ns1__IfFileExistResponse *ns1__IfFileExistResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__IfFileExist soap_tmp___ns1__IfFileExist;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/IfFileExistRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__IfFileExist.ns1__IfFileExist_ = ns1__IfFileExist_;
	soap_serializeheader(soap);
	soap_serialize___ns1__IfFileExist(soap, &soap_tmp___ns1__IfFileExist);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__IfFileExist(soap, &soap_tmp___ns1__IfFileExist, "-ns1:IfFileExist", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__IfFileExist(soap, &soap_tmp___ns1__IfFileExist, "-ns1:IfFileExist", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__IfFileExistResponse_)
		return soap_closesock(soap);
	ns1__IfFileExistResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__IfFileExistResponse_->soap_get(soap, "ns1:IfFileExistResponse", "ns1:IfFileExistResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::SetFileAvailable(const char *endpoint, const char *soap_action, ns1__SetFileAvailable *ns1__SetFileAvailable_, ns1__SetFileAvailableResponse *ns1__SetFileAvailableResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__SetFileAvailable soap_tmp___ns1__SetFileAvailable;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/SetFileAvailableRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__SetFileAvailable.ns1__SetFileAvailable_ = ns1__SetFileAvailable_;
	soap_serializeheader(soap);
	soap_serialize___ns1__SetFileAvailable(soap, &soap_tmp___ns1__SetFileAvailable);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__SetFileAvailable(soap, &soap_tmp___ns1__SetFileAvailable, "-ns1:SetFileAvailable", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__SetFileAvailable(soap, &soap_tmp___ns1__SetFileAvailable, "-ns1:SetFileAvailable", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__SetFileAvailableResponse_)
		return soap_closesock(soap);
	ns1__SetFileAvailableResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__SetFileAvailableResponse_->soap_get(soap, "ns1:SetFileAvailableResponse", "ns1:SetFileAvailableResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetFileAvailable(const char *endpoint, const char *soap_action, ns1__GetFileAvailable *ns1__GetFileAvailable_, ns1__GetFileAvailableResponse *ns1__GetFileAvailableResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetFileAvailable soap_tmp___ns1__GetFileAvailable;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetFileAvailableRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetFileAvailable.ns1__GetFileAvailable_ = ns1__GetFileAvailable_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetFileAvailable(soap, &soap_tmp___ns1__GetFileAvailable);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetFileAvailable(soap, &soap_tmp___ns1__GetFileAvailable, "-ns1:GetFileAvailable", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetFileAvailable(soap, &soap_tmp___ns1__GetFileAvailable, "-ns1:GetFileAvailable", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetFileAvailableResponse_)
		return soap_closesock(soap);
	ns1__GetFileAvailableResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetFileAvailableResponse_->soap_get(soap, "ns1:GetFileAvailableResponse", "ns1:GetFileAvailableResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::AddFileToSyncByArcCue(const char *endpoint, const char *soap_action, ns1__AddFileToSyncByArcCue *ns1__AddFileToSyncByArcCue_, ns1__AddFileToSyncByArcCueResponse *ns1__AddFileToSyncByArcCueResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__AddFileToSyncByArcCue soap_tmp___ns1__AddFileToSyncByArcCue;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/AddFileToSyncByArcCueRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__AddFileToSyncByArcCue.ns1__AddFileToSyncByArcCue_ = ns1__AddFileToSyncByArcCue_;
	soap_serializeheader(soap);
	soap_serialize___ns1__AddFileToSyncByArcCue(soap, &soap_tmp___ns1__AddFileToSyncByArcCue);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__AddFileToSyncByArcCue(soap, &soap_tmp___ns1__AddFileToSyncByArcCue, "-ns1:AddFileToSyncByArcCue", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__AddFileToSyncByArcCue(soap, &soap_tmp___ns1__AddFileToSyncByArcCue, "-ns1:AddFileToSyncByArcCue", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__AddFileToSyncByArcCueResponse_)
		return soap_closesock(soap);
	ns1__AddFileToSyncByArcCueResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__AddFileToSyncByArcCueResponse_->soap_get(soap, "ns1:AddFileToSyncByArcCueResponse", "ns1:AddFileToSyncByArcCueResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::Fk_USCOREDB_USCOREtestConnection(const char *endpoint, const char *soap_action, ns1__Fk_USCOREDB_USCOREtestConnection *ns1__Fk_USCOREDB_USCOREtestConnection_, ns1__Fk_USCOREDB_USCOREtestConnectionResponse *ns1__Fk_USCOREDB_USCOREtestConnectionResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__Fk_USCOREDB_USCOREtestConnection soap_tmp___ns1__Fk_USCOREDB_USCOREtestConnection;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/Fk_DB_testConnectionRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__Fk_USCOREDB_USCOREtestConnection.ns1__Fk_USCOREDB_USCOREtestConnection_ = ns1__Fk_USCOREDB_USCOREtestConnection_;
	soap_serializeheader(soap);
	soap_serialize___ns1__Fk_USCOREDB_USCOREtestConnection(soap, &soap_tmp___ns1__Fk_USCOREDB_USCOREtestConnection);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__Fk_USCOREDB_USCOREtestConnection(soap, &soap_tmp___ns1__Fk_USCOREDB_USCOREtestConnection, "-ns1:Fk_DB_testConnection", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__Fk_USCOREDB_USCOREtestConnection(soap, &soap_tmp___ns1__Fk_USCOREDB_USCOREtestConnection, "-ns1:Fk_DB_testConnection", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__Fk_USCOREDB_USCOREtestConnectionResponse_)
		return soap_closesock(soap);
	ns1__Fk_USCOREDB_USCOREtestConnectionResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__Fk_USCOREDB_USCOREtestConnectionResponse_->soap_get(soap, "ns1:Fk_DB_testConnectionResponse", "ns1:Fk_DB_testConnectionResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::Fk_USCOREWS_USCOREinsert(const char *endpoint, const char *soap_action, ns1__Fk_USCOREWS_USCOREinsert *ns1__Fk_USCOREWS_USCOREinsert_, ns1__Fk_USCOREWS_USCOREinsertResponse *ns1__Fk_USCOREWS_USCOREinsertResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__Fk_USCOREWS_USCOREinsert soap_tmp___ns1__Fk_USCOREWS_USCOREinsert;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/Fk_WS_insertRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__Fk_USCOREWS_USCOREinsert.ns1__Fk_USCOREWS_USCOREinsert_ = ns1__Fk_USCOREWS_USCOREinsert_;
	soap_serializeheader(soap);
	soap_serialize___ns1__Fk_USCOREWS_USCOREinsert(soap, &soap_tmp___ns1__Fk_USCOREWS_USCOREinsert);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__Fk_USCOREWS_USCOREinsert(soap, &soap_tmp___ns1__Fk_USCOREWS_USCOREinsert, "-ns1:Fk_WS_insert", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__Fk_USCOREWS_USCOREinsert(soap, &soap_tmp___ns1__Fk_USCOREWS_USCOREinsert, "-ns1:Fk_WS_insert", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__Fk_USCOREWS_USCOREinsertResponse_)
		return soap_closesock(soap);
	ns1__Fk_USCOREWS_USCOREinsertResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__Fk_USCOREWS_USCOREinsertResponse_->soap_get(soap, "ns1:Fk_WS_insertResponse", "ns1:Fk_WS_insertResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::Fk_USCOREDB_USCOREmodify(const char *endpoint, const char *soap_action, ns1__Fk_USCOREDB_USCOREmodify *ns1__Fk_USCOREDB_USCOREmodify_, ns1__Fk_USCOREDB_USCOREmodifyResponse *ns1__Fk_USCOREDB_USCOREmodifyResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__Fk_USCOREDB_USCOREmodify soap_tmp___ns1__Fk_USCOREDB_USCOREmodify;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/Fk_DB_modifyRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__Fk_USCOREDB_USCOREmodify.ns1__Fk_USCOREDB_USCOREmodify_ = ns1__Fk_USCOREDB_USCOREmodify_;
	soap_serializeheader(soap);
	soap_serialize___ns1__Fk_USCOREDB_USCOREmodify(soap, &soap_tmp___ns1__Fk_USCOREDB_USCOREmodify);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__Fk_USCOREDB_USCOREmodify(soap, &soap_tmp___ns1__Fk_USCOREDB_USCOREmodify, "-ns1:Fk_DB_modify", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__Fk_USCOREDB_USCOREmodify(soap, &soap_tmp___ns1__Fk_USCOREDB_USCOREmodify, "-ns1:Fk_DB_modify", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__Fk_USCOREDB_USCOREmodifyResponse_)
		return soap_closesock(soap);
	ns1__Fk_USCOREDB_USCOREmodifyResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__Fk_USCOREDB_USCOREmodifyResponse_->soap_get(soap, "ns1:Fk_DB_modifyResponse", "ns1:Fk_DB_modifyResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::Fk_USCOREDB_USCOREdelete(const char *endpoint, const char *soap_action, ns1__Fk_USCOREDB_USCOREdelete *ns1__Fk_USCOREDB_USCOREdelete_, ns1__Fk_USCOREDB_USCOREdeleteResponse *ns1__Fk_USCOREDB_USCOREdeleteResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__Fk_USCOREDB_USCOREdelete soap_tmp___ns1__Fk_USCOREDB_USCOREdelete;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/Fk_DB_deleteRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__Fk_USCOREDB_USCOREdelete.ns1__Fk_USCOREDB_USCOREdelete_ = ns1__Fk_USCOREDB_USCOREdelete_;
	soap_serializeheader(soap);
	soap_serialize___ns1__Fk_USCOREDB_USCOREdelete(soap, &soap_tmp___ns1__Fk_USCOREDB_USCOREdelete);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__Fk_USCOREDB_USCOREdelete(soap, &soap_tmp___ns1__Fk_USCOREDB_USCOREdelete, "-ns1:Fk_DB_delete", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__Fk_USCOREDB_USCOREdelete(soap, &soap_tmp___ns1__Fk_USCOREDB_USCOREdelete, "-ns1:Fk_DB_delete", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__Fk_USCOREDB_USCOREdeleteResponse_)
		return soap_closesock(soap);
	ns1__Fk_USCOREDB_USCOREdeleteResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__Fk_USCOREDB_USCOREdeleteResponse_->soap_get(soap, "ns1:Fk_DB_deleteResponse", "ns1:Fk_DB_deleteResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::Fk_USCOREgetParsAllFk(const char *endpoint, const char *soap_action, ns1__Fk_USCOREgetParsAllFk *ns1__Fk_USCOREgetParsAllFk_, ns1__Fk_USCOREgetParsAllFkResponse *ns1__Fk_USCOREgetParsAllFkResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__Fk_USCOREgetParsAllFk soap_tmp___ns1__Fk_USCOREgetParsAllFk;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/Fk_getParsAllFkRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__Fk_USCOREgetParsAllFk.ns1__Fk_USCOREgetParsAllFk_ = ns1__Fk_USCOREgetParsAllFk_;
	soap_serializeheader(soap);
	soap_serialize___ns1__Fk_USCOREgetParsAllFk(soap, &soap_tmp___ns1__Fk_USCOREgetParsAllFk);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__Fk_USCOREgetParsAllFk(soap, &soap_tmp___ns1__Fk_USCOREgetParsAllFk, "-ns1:Fk_getParsAllFk", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__Fk_USCOREgetParsAllFk(soap, &soap_tmp___ns1__Fk_USCOREgetParsAllFk, "-ns1:Fk_getParsAllFk", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__Fk_USCOREgetParsAllFkResponse_)
		return soap_closesock(soap);
	ns1__Fk_USCOREgetParsAllFkResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__Fk_USCOREgetParsAllFkResponse_->soap_get(soap, "ns1:Fk_getParsAllFkResponse", "ns1:Fk_getParsAllFkResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::Fk_USCOREgetPars(const char *endpoint, const char *soap_action, ns1__Fk_USCOREgetPars *ns1__Fk_USCOREgetPars_, ns1__Fk_USCOREgetParsResponse *ns1__Fk_USCOREgetParsResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__Fk_USCOREgetPars soap_tmp___ns1__Fk_USCOREgetPars;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/Fk_getParsRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__Fk_USCOREgetPars.ns1__Fk_USCOREgetPars_ = ns1__Fk_USCOREgetPars_;
	soap_serializeheader(soap);
	soap_serialize___ns1__Fk_USCOREgetPars(soap, &soap_tmp___ns1__Fk_USCOREgetPars);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__Fk_USCOREgetPars(soap, &soap_tmp___ns1__Fk_USCOREgetPars, "-ns1:Fk_getPars", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__Fk_USCOREgetPars(soap, &soap_tmp___ns1__Fk_USCOREgetPars, "-ns1:Fk_getPars", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__Fk_USCOREgetParsResponse_)
		return soap_closesock(soap);
	ns1__Fk_USCOREgetParsResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__Fk_USCOREgetParsResponse_->soap_get(soap, "ns1:Fk_getParsResponse", "ns1:Fk_getParsResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::Fk_USCOREcreate(const char *endpoint, const char *soap_action, ns1__Fk_USCOREcreate *ns1__Fk_USCOREcreate_, ns1__Fk_USCOREcreateResponse *ns1__Fk_USCOREcreateResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__Fk_USCOREcreate soap_tmp___ns1__Fk_USCOREcreate;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/Fk_createRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__Fk_USCOREcreate.ns1__Fk_USCOREcreate_ = ns1__Fk_USCOREcreate_;
	soap_serializeheader(soap);
	soap_serialize___ns1__Fk_USCOREcreate(soap, &soap_tmp___ns1__Fk_USCOREcreate);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__Fk_USCOREcreate(soap, &soap_tmp___ns1__Fk_USCOREcreate, "-ns1:Fk_create", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__Fk_USCOREcreate(soap, &soap_tmp___ns1__Fk_USCOREcreate, "-ns1:Fk_create", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__Fk_USCOREcreateResponse_)
		return soap_closesock(soap);
	ns1__Fk_USCOREcreateResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__Fk_USCOREcreateResponse_->soap_get(soap, "ns1:Fk_createResponse", "ns1:Fk_createResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetLanguages(const char *endpoint, const char *soap_action, ns1__GetLanguages *ns1__GetLanguages_, ns1__GetLanguagesResponse *ns1__GetLanguagesResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetLanguages soap_tmp___ns1__GetLanguages;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetLanguagesRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetLanguages.ns1__GetLanguages_ = ns1__GetLanguages_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetLanguages(soap, &soap_tmp___ns1__GetLanguages);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetLanguages(soap, &soap_tmp___ns1__GetLanguages, "-ns1:GetLanguages", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetLanguages(soap, &soap_tmp___ns1__GetLanguages, "-ns1:GetLanguages", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetLanguagesResponse_)
		return soap_closesock(soap);
	ns1__GetLanguagesResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetLanguagesResponse_->soap_get(soap, "ns1:GetLanguagesResponse", "ns1:GetLanguagesResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::AddLogSDK(const char *endpoint, const char *soap_action, ns1__AddLogSDK *ns1__AddLogSDK_, ns1__AddLogSDKResponse *ns1__AddLogSDKResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__AddLogSDK soap_tmp___ns1__AddLogSDK;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/AddLogSDKRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__AddLogSDK.ns1__AddLogSDK_ = ns1__AddLogSDK_;
	soap_serializeheader(soap);
	soap_serialize___ns1__AddLogSDK(soap, &soap_tmp___ns1__AddLogSDK);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__AddLogSDK(soap, &soap_tmp___ns1__AddLogSDK, "-ns1:AddLogSDK", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__AddLogSDK(soap, &soap_tmp___ns1__AddLogSDK, "-ns1:AddLogSDK", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__AddLogSDKResponse_)
		return soap_closesock(soap);
	ns1__AddLogSDKResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__AddLogSDKResponse_->soap_get(soap, "ns1:AddLogSDKResponse", "ns1:AddLogSDKResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetSDKLogList(const char *endpoint, const char *soap_action, ns1__GetSDKLogList *ns1__GetSDKLogList_, ns1__GetSDKLogListResponse *ns1__GetSDKLogListResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetSDKLogList soap_tmp___ns1__GetSDKLogList;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetSDKLogListRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetSDKLogList.ns1__GetSDKLogList_ = ns1__GetSDKLogList_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetSDKLogList(soap, &soap_tmp___ns1__GetSDKLogList);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetSDKLogList(soap, &soap_tmp___ns1__GetSDKLogList, "-ns1:GetSDKLogList", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetSDKLogList(soap, &soap_tmp___ns1__GetSDKLogList, "-ns1:GetSDKLogList", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetSDKLogListResponse_)
		return soap_closesock(soap);
	ns1__GetSDKLogListResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetSDKLogListResponse_->soap_get(soap, "ns1:GetSDKLogListResponse", "ns1:GetSDKLogListResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::DeleteSDKLog(const char *endpoint, const char *soap_action, ns1__DeleteSDKLog *ns1__DeleteSDKLog_, ns1__DeleteSDKLogResponse *ns1__DeleteSDKLogResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__DeleteSDKLog soap_tmp___ns1__DeleteSDKLog;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/DeleteSDKLogRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DeleteSDKLog.ns1__DeleteSDKLog_ = ns1__DeleteSDKLog_;
	soap_serializeheader(soap);
	soap_serialize___ns1__DeleteSDKLog(soap, &soap_tmp___ns1__DeleteSDKLog);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DeleteSDKLog(soap, &soap_tmp___ns1__DeleteSDKLog, "-ns1:DeleteSDKLog", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DeleteSDKLog(soap, &soap_tmp___ns1__DeleteSDKLog, "-ns1:DeleteSDKLog", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DeleteSDKLogResponse_)
		return soap_closesock(soap);
	ns1__DeleteSDKLogResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DeleteSDKLogResponse_->soap_get(soap, "ns1:DeleteSDKLogResponse", "ns1:DeleteSDKLogResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::ResetUserSessions(const char *endpoint, const char *soap_action, ns1__ResetUserSessions *ns1__ResetUserSessions_, ns1__ResetUserSessionsResponse *ns1__ResetUserSessionsResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__ResetUserSessions soap_tmp___ns1__ResetUserSessions;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/ResetUserSessionsRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ResetUserSessions.ns1__ResetUserSessions_ = ns1__ResetUserSessions_;
	soap_serializeheader(soap);
	soap_serialize___ns1__ResetUserSessions(soap, &soap_tmp___ns1__ResetUserSessions);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ResetUserSessions(soap, &soap_tmp___ns1__ResetUserSessions, "-ns1:ResetUserSessions", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ResetUserSessions(soap, &soap_tmp___ns1__ResetUserSessions, "-ns1:ResetUserSessions", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ResetUserSessionsResponse_)
		return soap_closesock(soap);
	ns1__ResetUserSessionsResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ResetUserSessionsResponse_->soap_get(soap, "ns1:ResetUserSessionsResponse", "ns1:ResetUserSessionsResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::ValidateSession(const char *endpoint, const char *soap_action, ns1__ValidateSession *ns1__ValidateSession_, ns1__ValidateSessionResponse *ns1__ValidateSessionResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__ValidateSession soap_tmp___ns1__ValidateSession;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/ValidateSessionRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ValidateSession.ns1__ValidateSession_ = ns1__ValidateSession_;
	soap_serializeheader(soap);
	soap_serialize___ns1__ValidateSession(soap, &soap_tmp___ns1__ValidateSession);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ValidateSession(soap, &soap_tmp___ns1__ValidateSession, "-ns1:ValidateSession", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ValidateSession(soap, &soap_tmp___ns1__ValidateSession, "-ns1:ValidateSession", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ValidateSessionResponse_)
		return soap_closesock(soap);
	ns1__ValidateSessionResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ValidateSessionResponse_->soap_get(soap, "ns1:ValidateSessionResponse", "ns1:ValidateSessionResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetUserList(const char *endpoint, const char *soap_action, ns1__GetUserList *ns1__GetUserList_, ns1__GetUserListResponse *ns1__GetUserListResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetUserList soap_tmp___ns1__GetUserList;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetUserListRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetUserList.ns1__GetUserList_ = ns1__GetUserList_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetUserList(soap, &soap_tmp___ns1__GetUserList);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetUserList(soap, &soap_tmp___ns1__GetUserList, "-ns1:GetUserList", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetUserList(soap, &soap_tmp___ns1__GetUserList, "-ns1:GetUserList", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetUserListResponse_)
		return soap_closesock(soap);
	ns1__GetUserListResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetUserListResponse_->soap_get(soap, "ns1:GetUserListResponse", "ns1:GetUserListResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetUserListActiveDirectory(const char *endpoint, const char *soap_action, ns1__GetUserListActiveDirectory *ns1__GetUserListActiveDirectory_, ns1__GetUserListActiveDirectoryResponse *ns1__GetUserListActiveDirectoryResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetUserListActiveDirectory soap_tmp___ns1__GetUserListActiveDirectory;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetUserListActiveDirectoryRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetUserListActiveDirectory.ns1__GetUserListActiveDirectory_ = ns1__GetUserListActiveDirectory_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetUserListActiveDirectory(soap, &soap_tmp___ns1__GetUserListActiveDirectory);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetUserListActiveDirectory(soap, &soap_tmp___ns1__GetUserListActiveDirectory, "-ns1:GetUserListActiveDirectory", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetUserListActiveDirectory(soap, &soap_tmp___ns1__GetUserListActiveDirectory, "-ns1:GetUserListActiveDirectory", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetUserListActiveDirectoryResponse_)
		return soap_closesock(soap);
	ns1__GetUserListActiveDirectoryResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetUserListActiveDirectoryResponse_->soap_get(soap, "ns1:GetUserListActiveDirectoryResponse", "ns1:GetUserListActiveDirectoryResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::InsertUser(const char *endpoint, const char *soap_action, ns1__InsertUser *ns1__InsertUser_, ns1__InsertUserResponse *ns1__InsertUserResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__InsertUser soap_tmp___ns1__InsertUser;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/InsertUserRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__InsertUser.ns1__InsertUser_ = ns1__InsertUser_;
	soap_serializeheader(soap);
	soap_serialize___ns1__InsertUser(soap, &soap_tmp___ns1__InsertUser);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__InsertUser(soap, &soap_tmp___ns1__InsertUser, "-ns1:InsertUser", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__InsertUser(soap, &soap_tmp___ns1__InsertUser, "-ns1:InsertUser", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__InsertUserResponse_)
		return soap_closesock(soap);
	ns1__InsertUserResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__InsertUserResponse_->soap_get(soap, "ns1:InsertUserResponse", "ns1:InsertUserResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::ModifyUser(const char *endpoint, const char *soap_action, ns1__ModifyUser *ns1__ModifyUser_, ns1__ModifyUserResponse *ns1__ModifyUserResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__ModifyUser soap_tmp___ns1__ModifyUser;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/ModifyUserRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ModifyUser.ns1__ModifyUser_ = ns1__ModifyUser_;
	soap_serializeheader(soap);
	soap_serialize___ns1__ModifyUser(soap, &soap_tmp___ns1__ModifyUser);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ModifyUser(soap, &soap_tmp___ns1__ModifyUser, "-ns1:ModifyUser", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ModifyUser(soap, &soap_tmp___ns1__ModifyUser, "-ns1:ModifyUser", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ModifyUserResponse_)
		return soap_closesock(soap);
	ns1__ModifyUserResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ModifyUserResponse_->soap_get(soap, "ns1:ModifyUserResponse", "ns1:ModifyUserResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::InsertUserConfig(const char *endpoint, const char *soap_action, ns1__InsertUserConfig *ns1__InsertUserConfig_, ns1__InsertUserConfigResponse *ns1__InsertUserConfigResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__InsertUserConfig soap_tmp___ns1__InsertUserConfig;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/InsertUserConfigRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__InsertUserConfig.ns1__InsertUserConfig_ = ns1__InsertUserConfig_;
	soap_serializeheader(soap);
	soap_serialize___ns1__InsertUserConfig(soap, &soap_tmp___ns1__InsertUserConfig);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__InsertUserConfig(soap, &soap_tmp___ns1__InsertUserConfig, "-ns1:InsertUserConfig", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__InsertUserConfig(soap, &soap_tmp___ns1__InsertUserConfig, "-ns1:InsertUserConfig", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__InsertUserConfigResponse_)
		return soap_closesock(soap);
	ns1__InsertUserConfigResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__InsertUserConfigResponse_->soap_get(soap, "ns1:InsertUserConfigResponse", "ns1:InsertUserConfigResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::ModifyUserConfig(const char *endpoint, const char *soap_action, ns1__ModifyUserConfig *ns1__ModifyUserConfig_, ns1__ModifyUserConfigResponse *ns1__ModifyUserConfigResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__ModifyUserConfig soap_tmp___ns1__ModifyUserConfig;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/ModifyUserConfigRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ModifyUserConfig.ns1__ModifyUserConfig_ = ns1__ModifyUserConfig_;
	soap_serializeheader(soap);
	soap_serialize___ns1__ModifyUserConfig(soap, &soap_tmp___ns1__ModifyUserConfig);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ModifyUserConfig(soap, &soap_tmp___ns1__ModifyUserConfig, "-ns1:ModifyUserConfig", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ModifyUserConfig(soap, &soap_tmp___ns1__ModifyUserConfig, "-ns1:ModifyUserConfig", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ModifyUserConfigResponse_)
		return soap_closesock(soap);
	ns1__ModifyUserConfigResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ModifyUserConfigResponse_->soap_get(soap, "ns1:ModifyUserConfigResponse", "ns1:ModifyUserConfigResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetUserDetailByUsername(const char *endpoint, const char *soap_action, ns1__GetUserDetailByUsername *ns1__GetUserDetailByUsername_, ns1__GetUserDetailByUsernameResponse *ns1__GetUserDetailByUsernameResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetUserDetailByUsername soap_tmp___ns1__GetUserDetailByUsername;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetUserDetailByUsernameRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetUserDetailByUsername.ns1__GetUserDetailByUsername_ = ns1__GetUserDetailByUsername_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetUserDetailByUsername(soap, &soap_tmp___ns1__GetUserDetailByUsername);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetUserDetailByUsername(soap, &soap_tmp___ns1__GetUserDetailByUsername, "-ns1:GetUserDetailByUsername", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetUserDetailByUsername(soap, &soap_tmp___ns1__GetUserDetailByUsername, "-ns1:GetUserDetailByUsername", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetUserDetailByUsernameResponse_)
		return soap_closesock(soap);
	ns1__GetUserDetailByUsernameResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetUserDetailByUsernameResponse_->soap_get(soap, "ns1:GetUserDetailByUsernameResponse", "ns1:GetUserDetailByUsernameResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetUserDetailByUserId(const char *endpoint, const char *soap_action, ns1__GetUserDetailByUserId *ns1__GetUserDetailByUserId_, ns1__GetUserDetailByUserIdResponse *ns1__GetUserDetailByUserIdResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetUserDetailByUserId soap_tmp___ns1__GetUserDetailByUserId;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetUserDetailByUserIdRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetUserDetailByUserId.ns1__GetUserDetailByUserId_ = ns1__GetUserDetailByUserId_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetUserDetailByUserId(soap, &soap_tmp___ns1__GetUserDetailByUserId);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetUserDetailByUserId(soap, &soap_tmp___ns1__GetUserDetailByUserId, "-ns1:GetUserDetailByUserId", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetUserDetailByUserId(soap, &soap_tmp___ns1__GetUserDetailByUserId, "-ns1:GetUserDetailByUserId", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetUserDetailByUserIdResponse_)
		return soap_closesock(soap);
	ns1__GetUserDetailByUserIdResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetUserDetailByUserIdResponse_->soap_get(soap, "ns1:GetUserDetailByUserIdResponse", "ns1:GetUserDetailByUserIdResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::ExistUserByUsername(const char *endpoint, const char *soap_action, ns1__ExistUserByUsername *ns1__ExistUserByUsername_, ns1__ExistUserByUsernameResponse *ns1__ExistUserByUsernameResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__ExistUserByUsername soap_tmp___ns1__ExistUserByUsername;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/ExistUserByUsernameRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ExistUserByUsername.ns1__ExistUserByUsername_ = ns1__ExistUserByUsername_;
	soap_serializeheader(soap);
	soap_serialize___ns1__ExistUserByUsername(soap, &soap_tmp___ns1__ExistUserByUsername);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ExistUserByUsername(soap, &soap_tmp___ns1__ExistUserByUsername, "-ns1:ExistUserByUsername", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ExistUserByUsername(soap, &soap_tmp___ns1__ExistUserByUsername, "-ns1:ExistUserByUsername", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ExistUserByUsernameResponse_)
		return soap_closesock(soap);
	ns1__ExistUserByUsernameResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ExistUserByUsernameResponse_->soap_get(soap, "ns1:ExistUserByUsernameResponse", "ns1:ExistUserByUsernameResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::InsertGroup(const char *endpoint, const char *soap_action, ns1__InsertGroup *ns1__InsertGroup_, ns1__InsertGroupResponse *ns1__InsertGroupResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__InsertGroup soap_tmp___ns1__InsertGroup;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/InsertGroupRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__InsertGroup.ns1__InsertGroup_ = ns1__InsertGroup_;
	soap_serializeheader(soap);
	soap_serialize___ns1__InsertGroup(soap, &soap_tmp___ns1__InsertGroup);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__InsertGroup(soap, &soap_tmp___ns1__InsertGroup, "-ns1:InsertGroup", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__InsertGroup(soap, &soap_tmp___ns1__InsertGroup, "-ns1:InsertGroup", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__InsertGroupResponse_)
		return soap_closesock(soap);
	ns1__InsertGroupResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__InsertGroupResponse_->soap_get(soap, "ns1:InsertGroupResponse", "ns1:InsertGroupResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::DeleteGroup(const char *endpoint, const char *soap_action, ns1__DeleteGroup *ns1__DeleteGroup_, ns1__DeleteGroupResponse *ns1__DeleteGroupResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__DeleteGroup soap_tmp___ns1__DeleteGroup;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/DeleteGroupRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DeleteGroup.ns1__DeleteGroup_ = ns1__DeleteGroup_;
	soap_serializeheader(soap);
	soap_serialize___ns1__DeleteGroup(soap, &soap_tmp___ns1__DeleteGroup);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DeleteGroup(soap, &soap_tmp___ns1__DeleteGroup, "-ns1:DeleteGroup", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DeleteGroup(soap, &soap_tmp___ns1__DeleteGroup, "-ns1:DeleteGroup", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DeleteGroupResponse_)
		return soap_closesock(soap);
	ns1__DeleteGroupResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DeleteGroupResponse_->soap_get(soap, "ns1:DeleteGroupResponse", "ns1:DeleteGroupResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::Ping(const char *endpoint, const char *soap_action, ns1__Ping *ns1__Ping_, ns1__PingResponse *ns1__PingResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__Ping soap_tmp___ns1__Ping;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/PingRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__Ping.ns1__Ping_ = ns1__Ping_;
	soap_serializeheader(soap);
	soap_serialize___ns1__Ping(soap, &soap_tmp___ns1__Ping);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__Ping(soap, &soap_tmp___ns1__Ping, "-ns1:Ping", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__Ping(soap, &soap_tmp___ns1__Ping, "-ns1:Ping", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__PingResponse_)
		return soap_closesock(soap);
	ns1__PingResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__PingResponse_->soap_get(soap, "ns1:PingResponse", "ns1:PingResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::DeleteUserByUsername(const char *endpoint, const char *soap_action, ns1__DeleteUserByUsername *ns1__DeleteUserByUsername_, ns1__DeleteUserByUsernameResponse *ns1__DeleteUserByUsernameResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__DeleteUserByUsername soap_tmp___ns1__DeleteUserByUsername;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/DeleteUserByUsernameRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DeleteUserByUsername.ns1__DeleteUserByUsername_ = ns1__DeleteUserByUsername_;
	soap_serializeheader(soap);
	soap_serialize___ns1__DeleteUserByUsername(soap, &soap_tmp___ns1__DeleteUserByUsername);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DeleteUserByUsername(soap, &soap_tmp___ns1__DeleteUserByUsername, "-ns1:DeleteUserByUsername", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DeleteUserByUsername(soap, &soap_tmp___ns1__DeleteUserByUsername, "-ns1:DeleteUserByUsername", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DeleteUserByUsernameResponse_)
		return soap_closesock(soap);
	ns1__DeleteUserByUsernameResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DeleteUserByUsernameResponse_->soap_get(soap, "ns1:DeleteUserByUsernameResponse", "ns1:DeleteUserByUsernameResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::ModifyGroup(const char *endpoint, const char *soap_action, ns1__ModifyGroup *ns1__ModifyGroup_, ns1__ModifyGroupResponse *ns1__ModifyGroupResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__ModifyGroup soap_tmp___ns1__ModifyGroup;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/ModifyGroupRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ModifyGroup.ns1__ModifyGroup_ = ns1__ModifyGroup_;
	soap_serializeheader(soap);
	soap_serialize___ns1__ModifyGroup(soap, &soap_tmp___ns1__ModifyGroup);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ModifyGroup(soap, &soap_tmp___ns1__ModifyGroup, "-ns1:ModifyGroup", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ModifyGroup(soap, &soap_tmp___ns1__ModifyGroup, "-ns1:ModifyGroup", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ModifyGroupResponse_)
		return soap_closesock(soap);
	ns1__ModifyGroupResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ModifyGroupResponse_->soap_get(soap, "ns1:ModifyGroupResponse", "ns1:ModifyGroupResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetGroupList(const char *endpoint, const char *soap_action, ns1__GetGroupList *ns1__GetGroupList_, ns1__GetGroupListResponse *ns1__GetGroupListResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetGroupList soap_tmp___ns1__GetGroupList;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetGroupListRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetGroupList.ns1__GetGroupList_ = ns1__GetGroupList_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetGroupList(soap, &soap_tmp___ns1__GetGroupList);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetGroupList(soap, &soap_tmp___ns1__GetGroupList, "-ns1:GetGroupList", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetGroupList(soap, &soap_tmp___ns1__GetGroupList, "-ns1:GetGroupList", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetGroupListResponse_)
		return soap_closesock(soap);
	ns1__GetGroupListResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetGroupListResponse_->soap_get(soap, "ns1:GetGroupListResponse", "ns1:GetGroupListResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::InsertUserInGroup(const char *endpoint, const char *soap_action, ns1__InsertUserInGroup *ns1__InsertUserInGroup_, ns1__InsertUserInGroupResponse *ns1__InsertUserInGroupResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__InsertUserInGroup soap_tmp___ns1__InsertUserInGroup;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/InsertUserInGroupRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__InsertUserInGroup.ns1__InsertUserInGroup_ = ns1__InsertUserInGroup_;
	soap_serializeheader(soap);
	soap_serialize___ns1__InsertUserInGroup(soap, &soap_tmp___ns1__InsertUserInGroup);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__InsertUserInGroup(soap, &soap_tmp___ns1__InsertUserInGroup, "-ns1:InsertUserInGroup", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__InsertUserInGroup(soap, &soap_tmp___ns1__InsertUserInGroup, "-ns1:InsertUserInGroup", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__InsertUserInGroupResponse_)
		return soap_closesock(soap);
	ns1__InsertUserInGroupResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__InsertUserInGroupResponse_->soap_get(soap, "ns1:InsertUserInGroupResponse", "ns1:InsertUserInGroupResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::RemoveUserByAllGroups(const char *endpoint, const char *soap_action, ns1__RemoveUserByAllGroups *ns1__RemoveUserByAllGroups_, ns1__RemoveUserByAllGroupsResponse *ns1__RemoveUserByAllGroupsResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__RemoveUserByAllGroups soap_tmp___ns1__RemoveUserByAllGroups;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/RemoveUserByAllGroupsRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__RemoveUserByAllGroups.ns1__RemoveUserByAllGroups_ = ns1__RemoveUserByAllGroups_;
	soap_serializeheader(soap);
	soap_serialize___ns1__RemoveUserByAllGroups(soap, &soap_tmp___ns1__RemoveUserByAllGroups);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__RemoveUserByAllGroups(soap, &soap_tmp___ns1__RemoveUserByAllGroups, "-ns1:RemoveUserByAllGroups", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__RemoveUserByAllGroups(soap, &soap_tmp___ns1__RemoveUserByAllGroups, "-ns1:RemoveUserByAllGroups", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__RemoveUserByAllGroupsResponse_)
		return soap_closesock(soap);
	ns1__RemoveUserByAllGroupsResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RemoveUserByAllGroupsResponse_->soap_get(soap, "ns1:RemoveUserByAllGroupsResponse", "ns1:RemoveUserByAllGroupsResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::RemoveUserByGroup(const char *endpoint, const char *soap_action, ns1__RemoveUserByGroup *ns1__RemoveUserByGroup_, ns1__RemoveUserByGroupResponse *ns1__RemoveUserByGroupResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__RemoveUserByGroup soap_tmp___ns1__RemoveUserByGroup;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/RemoveUserByGroupRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__RemoveUserByGroup.ns1__RemoveUserByGroup_ = ns1__RemoveUserByGroup_;
	soap_serializeheader(soap);
	soap_serialize___ns1__RemoveUserByGroup(soap, &soap_tmp___ns1__RemoveUserByGroup);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__RemoveUserByGroup(soap, &soap_tmp___ns1__RemoveUserByGroup, "-ns1:RemoveUserByGroup", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__RemoveUserByGroup(soap, &soap_tmp___ns1__RemoveUserByGroup, "-ns1:RemoveUserByGroup", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__RemoveUserByGroupResponse_)
		return soap_closesock(soap);
	ns1__RemoveUserByGroupResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RemoveUserByGroupResponse_->soap_get(soap, "ns1:RemoveUserByGroupResponse", "ns1:RemoveUserByGroupResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetGroupsListByUser(const char *endpoint, const char *soap_action, ns1__GetGroupsListByUser *ns1__GetGroupsListByUser_, ns1__GetGroupsListByUserResponse *ns1__GetGroupsListByUserResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetGroupsListByUser soap_tmp___ns1__GetGroupsListByUser;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetGroupsListByUserRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetGroupsListByUser.ns1__GetGroupsListByUser_ = ns1__GetGroupsListByUser_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetGroupsListByUser(soap, &soap_tmp___ns1__GetGroupsListByUser);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetGroupsListByUser(soap, &soap_tmp___ns1__GetGroupsListByUser, "-ns1:GetGroupsListByUser", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetGroupsListByUser(soap, &soap_tmp___ns1__GetGroupsListByUser, "-ns1:GetGroupsListByUser", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetGroupsListByUserResponse_)
		return soap_closesock(soap);
	ns1__GetGroupsListByUserResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetGroupsListByUserResponse_->soap_get(soap, "ns1:GetGroupsListByUserResponse", "ns1:GetGroupsListByUserResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetUsersListByGroup(const char *endpoint, const char *soap_action, ns1__GetUsersListByGroup *ns1__GetUsersListByGroup_, ns1__GetUsersListByGroupResponse *ns1__GetUsersListByGroupResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetUsersListByGroup soap_tmp___ns1__GetUsersListByGroup;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetUsersListByGroupRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetUsersListByGroup.ns1__GetUsersListByGroup_ = ns1__GetUsersListByGroup_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetUsersListByGroup(soap, &soap_tmp___ns1__GetUsersListByGroup);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetUsersListByGroup(soap, &soap_tmp___ns1__GetUsersListByGroup, "-ns1:GetUsersListByGroup", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetUsersListByGroup(soap, &soap_tmp___ns1__GetUsersListByGroup, "-ns1:GetUsersListByGroup", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetUsersListByGroupResponse_)
		return soap_closesock(soap);
	ns1__GetUsersListByGroupResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetUsersListByGroupResponse_->soap_get(soap, "ns1:GetUsersListByGroupResponse", "ns1:GetUsersListByGroupResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::ModifyTranslation(const char *endpoint, const char *soap_action, ns1__ModifyTranslation *ns1__ModifyTranslation_, ns1__ModifyTranslationResponse *ns1__ModifyTranslationResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__ModifyTranslation soap_tmp___ns1__ModifyTranslation;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/ModifyTranslationRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ModifyTranslation.ns1__ModifyTranslation_ = ns1__ModifyTranslation_;
	soap_serializeheader(soap);
	soap_serialize___ns1__ModifyTranslation(soap, &soap_tmp___ns1__ModifyTranslation);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ModifyTranslation(soap, &soap_tmp___ns1__ModifyTranslation, "-ns1:ModifyTranslation", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ModifyTranslation(soap, &soap_tmp___ns1__ModifyTranslation, "-ns1:ModifyTranslation", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ModifyTranslationResponse_)
		return soap_closesock(soap);
	ns1__ModifyTranslationResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ModifyTranslationResponse_->soap_get(soap, "ns1:ModifyTranslationResponse", "ns1:ModifyTranslationResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::DeleteTranslation(const char *endpoint, const char *soap_action, ns1__DeleteTranslation *ns1__DeleteTranslation_, ns1__DeleteTranslationResponse *ns1__DeleteTranslationResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__DeleteTranslation soap_tmp___ns1__DeleteTranslation;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/DeleteTranslationRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DeleteTranslation.ns1__DeleteTranslation_ = ns1__DeleteTranslation_;
	soap_serializeheader(soap);
	soap_serialize___ns1__DeleteTranslation(soap, &soap_tmp___ns1__DeleteTranslation);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DeleteTranslation(soap, &soap_tmp___ns1__DeleteTranslation, "-ns1:DeleteTranslation", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DeleteTranslation(soap, &soap_tmp___ns1__DeleteTranslation, "-ns1:DeleteTranslation", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DeleteTranslationResponse_)
		return soap_closesock(soap);
	ns1__DeleteTranslationResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DeleteTranslationResponse_->soap_get(soap, "ns1:DeleteTranslationResponse", "ns1:DeleteTranslationResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::InsertTranslation(const char *endpoint, const char *soap_action, ns1__InsertTranslation *ns1__InsertTranslation_, ns1__InsertTranslationResponse *ns1__InsertTranslationResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__InsertTranslation soap_tmp___ns1__InsertTranslation;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/InsertTranslationRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__InsertTranslation.ns1__InsertTranslation_ = ns1__InsertTranslation_;
	soap_serializeheader(soap);
	soap_serialize___ns1__InsertTranslation(soap, &soap_tmp___ns1__InsertTranslation);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__InsertTranslation(soap, &soap_tmp___ns1__InsertTranslation, "-ns1:InsertTranslation", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__InsertTranslation(soap, &soap_tmp___ns1__InsertTranslation, "-ns1:InsertTranslation", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__InsertTranslationResponse_)
		return soap_closesock(soap);
	ns1__InsertTranslationResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__InsertTranslationResponse_->soap_get(soap, "ns1:InsertTranslationResponse", "ns1:InsertTranslationResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::InsertTranslationCode(const char *endpoint, const char *soap_action, ns1__InsertTranslationCode *ns1__InsertTranslationCode_, ns1__InsertTranslationCodeResponse *ns1__InsertTranslationCodeResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__InsertTranslationCode soap_tmp___ns1__InsertTranslationCode;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/InsertTranslationCodeRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__InsertTranslationCode.ns1__InsertTranslationCode_ = ns1__InsertTranslationCode_;
	soap_serializeheader(soap);
	soap_serialize___ns1__InsertTranslationCode(soap, &soap_tmp___ns1__InsertTranslationCode);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__InsertTranslationCode(soap, &soap_tmp___ns1__InsertTranslationCode, "-ns1:InsertTranslationCode", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__InsertTranslationCode(soap, &soap_tmp___ns1__InsertTranslationCode, "-ns1:InsertTranslationCode", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__InsertTranslationCodeResponse_)
		return soap_closesock(soap);
	ns1__InsertTranslationCodeResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__InsertTranslationCodeResponse_->soap_get(soap, "ns1:InsertTranslationCodeResponse", "ns1:InsertTranslationCodeResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::InsertTranslationDecimalCode(const char *endpoint, const char *soap_action, ns1__InsertTranslationDecimalCode *ns1__InsertTranslationDecimalCode_, ns1__InsertTranslationDecimalCodeResponse *ns1__InsertTranslationDecimalCodeResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__InsertTranslationDecimalCode soap_tmp___ns1__InsertTranslationDecimalCode;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/InsertTranslationDecimalCodeRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__InsertTranslationDecimalCode.ns1__InsertTranslationDecimalCode_ = ns1__InsertTranslationDecimalCode_;
	soap_serializeheader(soap);
	soap_serialize___ns1__InsertTranslationDecimalCode(soap, &soap_tmp___ns1__InsertTranslationDecimalCode);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__InsertTranslationDecimalCode(soap, &soap_tmp___ns1__InsertTranslationDecimalCode, "-ns1:InsertTranslationDecimalCode", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__InsertTranslationDecimalCode(soap, &soap_tmp___ns1__InsertTranslationDecimalCode, "-ns1:InsertTranslationDecimalCode", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__InsertTranslationDecimalCodeResponse_)
		return soap_closesock(soap);
	ns1__InsertTranslationDecimalCodeResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__InsertTranslationDecimalCodeResponse_->soap_get(soap, "ns1:InsertTranslationDecimalCodeResponse", "ns1:InsertTranslationDecimalCodeResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetTranslationByMessageId(const char *endpoint, const char *soap_action, ns1__GetTranslationByMessageId *ns1__GetTranslationByMessageId_, ns1__GetTranslationByMessageIdResponse *ns1__GetTranslationByMessageIdResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetTranslationByMessageId soap_tmp___ns1__GetTranslationByMessageId;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetTranslationByMessageIdRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetTranslationByMessageId.ns1__GetTranslationByMessageId_ = ns1__GetTranslationByMessageId_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetTranslationByMessageId(soap, &soap_tmp___ns1__GetTranslationByMessageId);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetTranslationByMessageId(soap, &soap_tmp___ns1__GetTranslationByMessageId, "-ns1:GetTranslationByMessageId", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetTranslationByMessageId(soap, &soap_tmp___ns1__GetTranslationByMessageId, "-ns1:GetTranslationByMessageId", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetTranslationByMessageIdResponse_)
		return soap_closesock(soap);
	ns1__GetTranslationByMessageIdResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetTranslationByMessageIdResponse_->soap_get(soap, "ns1:GetTranslationByMessageIdResponse", "ns1:GetTranslationByMessageIdResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetTranslationByLabelCode(const char *endpoint, const char *soap_action, ns1__GetTranslationByLabelCode *ns1__GetTranslationByLabelCode_, ns1__GetTranslationByLabelCodeResponse *ns1__GetTranslationByLabelCodeResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetTranslationByLabelCode soap_tmp___ns1__GetTranslationByLabelCode;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetTranslationByLabelCodeRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetTranslationByLabelCode.ns1__GetTranslationByLabelCode_ = ns1__GetTranslationByLabelCode_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetTranslationByLabelCode(soap, &soap_tmp___ns1__GetTranslationByLabelCode);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetTranslationByLabelCode(soap, &soap_tmp___ns1__GetTranslationByLabelCode, "-ns1:GetTranslationByLabelCode", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetTranslationByLabelCode(soap, &soap_tmp___ns1__GetTranslationByLabelCode, "-ns1:GetTranslationByLabelCode", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetTranslationByLabelCodeResponse_)
		return soap_closesock(soap);
	ns1__GetTranslationByLabelCodeResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetTranslationByLabelCodeResponse_->soap_get(soap, "ns1:GetTranslationByLabelCodeResponse", "ns1:GetTranslationByLabelCodeResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetTranslationByRangeLabelCode(const char *endpoint, const char *soap_action, ns1__GetTranslationByRangeLabelCode *ns1__GetTranslationByRangeLabelCode_, ns1__GetTranslationByRangeLabelCodeResponse *ns1__GetTranslationByRangeLabelCodeResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetTranslationByRangeLabelCode soap_tmp___ns1__GetTranslationByRangeLabelCode;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetTranslationByRangeLabelCodeRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetTranslationByRangeLabelCode.ns1__GetTranslationByRangeLabelCode_ = ns1__GetTranslationByRangeLabelCode_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetTranslationByRangeLabelCode(soap, &soap_tmp___ns1__GetTranslationByRangeLabelCode);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetTranslationByRangeLabelCode(soap, &soap_tmp___ns1__GetTranslationByRangeLabelCode, "-ns1:GetTranslationByRangeLabelCode", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetTranslationByRangeLabelCode(soap, &soap_tmp___ns1__GetTranslationByRangeLabelCode, "-ns1:GetTranslationByRangeLabelCode", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetTranslationByRangeLabelCodeResponse_)
		return soap_closesock(soap);
	ns1__GetTranslationByRangeLabelCodeResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetTranslationByRangeLabelCodeResponse_->soap_get(soap, "ns1:GetTranslationByRangeLabelCodeResponse", "ns1:GetTranslationByRangeLabelCodeResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetTranslationBySourceSuffix(const char *endpoint, const char *soap_action, ns1__GetTranslationBySourceSuffix *ns1__GetTranslationBySourceSuffix_, ns1__GetTranslationBySourceSuffixResponse *ns1__GetTranslationBySourceSuffixResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetTranslationBySourceSuffix soap_tmp___ns1__GetTranslationBySourceSuffix;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetTranslationBySourceSuffixRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetTranslationBySourceSuffix.ns1__GetTranslationBySourceSuffix_ = ns1__GetTranslationBySourceSuffix_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetTranslationBySourceSuffix(soap, &soap_tmp___ns1__GetTranslationBySourceSuffix);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetTranslationBySourceSuffix(soap, &soap_tmp___ns1__GetTranslationBySourceSuffix, "-ns1:GetTranslationBySourceSuffix", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetTranslationBySourceSuffix(soap, &soap_tmp___ns1__GetTranslationBySourceSuffix, "-ns1:GetTranslationBySourceSuffix", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetTranslationBySourceSuffixResponse_)
		return soap_closesock(soap);
	ns1__GetTranslationBySourceSuffixResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetTranslationBySourceSuffixResponse_->soap_get(soap, "ns1:GetTranslationBySourceSuffixResponse", "ns1:GetTranslationBySourceSuffixResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::DeleteTranslationByCode(const char *endpoint, const char *soap_action, ns1__DeleteTranslationByCode *ns1__DeleteTranslationByCode_, ns1__DeleteTranslationByCodeResponse *ns1__DeleteTranslationByCodeResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__DeleteTranslationByCode soap_tmp___ns1__DeleteTranslationByCode;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/DeleteTranslationByCodeRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DeleteTranslationByCode.ns1__DeleteTranslationByCode_ = ns1__DeleteTranslationByCode_;
	soap_serializeheader(soap);
	soap_serialize___ns1__DeleteTranslationByCode(soap, &soap_tmp___ns1__DeleteTranslationByCode);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DeleteTranslationByCode(soap, &soap_tmp___ns1__DeleteTranslationByCode, "-ns1:DeleteTranslationByCode", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DeleteTranslationByCode(soap, &soap_tmp___ns1__DeleteTranslationByCode, "-ns1:DeleteTranslationByCode", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DeleteTranslationByCodeResponse_)
		return soap_closesock(soap);
	ns1__DeleteTranslationByCodeResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DeleteTranslationByCodeResponse_->soap_get(soap, "ns1:DeleteTranslationByCodeResponse", "ns1:DeleteTranslationByCodeResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::AddDefaultProcess(const char *endpoint, const char *soap_action, ns1__AddDefaultProcess *ns1__AddDefaultProcess_, ns1__AddDefaultProcessResponse *ns1__AddDefaultProcessResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__AddDefaultProcess soap_tmp___ns1__AddDefaultProcess;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/AddDefaultProcessRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__AddDefaultProcess.ns1__AddDefaultProcess_ = ns1__AddDefaultProcess_;
	soap_serializeheader(soap);
	soap_serialize___ns1__AddDefaultProcess(soap, &soap_tmp___ns1__AddDefaultProcess);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__AddDefaultProcess(soap, &soap_tmp___ns1__AddDefaultProcess, "-ns1:AddDefaultProcess", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__AddDefaultProcess(soap, &soap_tmp___ns1__AddDefaultProcess, "-ns1:AddDefaultProcess", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__AddDefaultProcessResponse_)
		return soap_closesock(soap);
	ns1__AddDefaultProcessResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__AddDefaultProcessResponse_->soap_get(soap, "ns1:AddDefaultProcessResponse", "ns1:AddDefaultProcessResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::ModDefaultProcess(const char *endpoint, const char *soap_action, ns1__ModDefaultProcess *ns1__ModDefaultProcess_, ns1__ModDefaultProcessResponse *ns1__ModDefaultProcessResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__ModDefaultProcess soap_tmp___ns1__ModDefaultProcess;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/ModDefaultProcessRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ModDefaultProcess.ns1__ModDefaultProcess_ = ns1__ModDefaultProcess_;
	soap_serializeheader(soap);
	soap_serialize___ns1__ModDefaultProcess(soap, &soap_tmp___ns1__ModDefaultProcess);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ModDefaultProcess(soap, &soap_tmp___ns1__ModDefaultProcess, "-ns1:ModDefaultProcess", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ModDefaultProcess(soap, &soap_tmp___ns1__ModDefaultProcess, "-ns1:ModDefaultProcess", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ModDefaultProcessResponse_)
		return soap_closesock(soap);
	ns1__ModDefaultProcessResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ModDefaultProcessResponse_->soap_get(soap, "ns1:ModDefaultProcessResponse", "ns1:ModDefaultProcessResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::DelDefaultProcess(const char *endpoint, const char *soap_action, ns1__DelDefaultProcess *ns1__DelDefaultProcess_, ns1__DelDefaultProcessResponse *ns1__DelDefaultProcessResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__DelDefaultProcess soap_tmp___ns1__DelDefaultProcess;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/DelDefaultProcessRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DelDefaultProcess.ns1__DelDefaultProcess_ = ns1__DelDefaultProcess_;
	soap_serializeheader(soap);
	soap_serialize___ns1__DelDefaultProcess(soap, &soap_tmp___ns1__DelDefaultProcess);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DelDefaultProcess(soap, &soap_tmp___ns1__DelDefaultProcess, "-ns1:DelDefaultProcess", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DelDefaultProcess(soap, &soap_tmp___ns1__DelDefaultProcess, "-ns1:DelDefaultProcess", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DelDefaultProcessResponse_)
		return soap_closesock(soap);
	ns1__DelDefaultProcessResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DelDefaultProcessResponse_->soap_get(soap, "ns1:DelDefaultProcessResponse", "ns1:DelDefaultProcessResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetDefaultProcess(const char *endpoint, const char *soap_action, ns1__GetDefaultProcess *ns1__GetDefaultProcess_, ns1__GetDefaultProcessResponse *ns1__GetDefaultProcessResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetDefaultProcess soap_tmp___ns1__GetDefaultProcess;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetDefaultProcessRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetDefaultProcess.ns1__GetDefaultProcess_ = ns1__GetDefaultProcess_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetDefaultProcess(soap, &soap_tmp___ns1__GetDefaultProcess);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetDefaultProcess(soap, &soap_tmp___ns1__GetDefaultProcess, "-ns1:GetDefaultProcess", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetDefaultProcess(soap, &soap_tmp___ns1__GetDefaultProcess, "-ns1:GetDefaultProcess", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetDefaultProcessResponse_)
		return soap_closesock(soap);
	ns1__GetDefaultProcessResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetDefaultProcessResponse_->soap_get(soap, "ns1:GetDefaultProcessResponse", "ns1:GetDefaultProcessResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::AddMarker(const char *endpoint, const char *soap_action, ns1__AddMarker *ns1__AddMarker_, ns1__AddMarkerResponse *ns1__AddMarkerResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__AddMarker soap_tmp___ns1__AddMarker;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/AddMarkerRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__AddMarker.ns1__AddMarker_ = ns1__AddMarker_;
	soap_serializeheader(soap);
	soap_serialize___ns1__AddMarker(soap, &soap_tmp___ns1__AddMarker);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__AddMarker(soap, &soap_tmp___ns1__AddMarker, "-ns1:AddMarker", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__AddMarker(soap, &soap_tmp___ns1__AddMarker, "-ns1:AddMarker", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__AddMarkerResponse_)
		return soap_closesock(soap);
	ns1__AddMarkerResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__AddMarkerResponse_->soap_get(soap, "ns1:AddMarkerResponse", "ns1:AddMarkerResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::DelMarker(const char *endpoint, const char *soap_action, ns1__DelMarker *ns1__DelMarker_, ns1__DelMarkerResponse *ns1__DelMarkerResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__DelMarker soap_tmp___ns1__DelMarker;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/DelMarkerRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DelMarker.ns1__DelMarker_ = ns1__DelMarker_;
	soap_serializeheader(soap);
	soap_serialize___ns1__DelMarker(soap, &soap_tmp___ns1__DelMarker);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DelMarker(soap, &soap_tmp___ns1__DelMarker, "-ns1:DelMarker", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DelMarker(soap, &soap_tmp___ns1__DelMarker, "-ns1:DelMarker", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DelMarkerResponse_)
		return soap_closesock(soap);
	ns1__DelMarkerResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DelMarkerResponse_->soap_get(soap, "ns1:DelMarkerResponse", "ns1:DelMarkerResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetListMarker(const char *endpoint, const char *soap_action, ns1__GetListMarker *ns1__GetListMarker_, ns1__GetListMarkerResponse *ns1__GetListMarkerResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetListMarker soap_tmp___ns1__GetListMarker;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetListMarkerRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetListMarker.ns1__GetListMarker_ = ns1__GetListMarker_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetListMarker(soap, &soap_tmp___ns1__GetListMarker);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetListMarker(soap, &soap_tmp___ns1__GetListMarker, "-ns1:GetListMarker", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetListMarker(soap, &soap_tmp___ns1__GetListMarker, "-ns1:GetListMarker", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetListMarkerResponse_)
		return soap_closesock(soap);
	ns1__GetListMarkerResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetListMarkerResponse_->soap_get(soap, "ns1:GetListMarkerResponse", "ns1:GetListMarkerResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetWorkflowVariables(const char *endpoint, const char *soap_action, ns1__GetWorkflowVariables *ns1__GetWorkflowVariables_, ns1__GetWorkflowVariablesResponse *ns1__GetWorkflowVariablesResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetWorkflowVariables soap_tmp___ns1__GetWorkflowVariables;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetWorkflowVariablesRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetWorkflowVariables.ns1__GetWorkflowVariables_ = ns1__GetWorkflowVariables_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetWorkflowVariables(soap, &soap_tmp___ns1__GetWorkflowVariables);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetWorkflowVariables(soap, &soap_tmp___ns1__GetWorkflowVariables, "-ns1:GetWorkflowVariables", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetWorkflowVariables(soap, &soap_tmp___ns1__GetWorkflowVariables, "-ns1:GetWorkflowVariables", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetWorkflowVariablesResponse_)
		return soap_closesock(soap);
	ns1__GetWorkflowVariablesResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetWorkflowVariablesResponse_->soap_get(soap, "ns1:GetWorkflowVariablesResponse", "ns1:GetWorkflowVariablesResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::AddSign(const char *endpoint, const char *soap_action, ns1__AddSign *ns1__AddSign_, ns1__AddSignResponse *ns1__AddSignResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__AddSign soap_tmp___ns1__AddSign;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/AddSignRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__AddSign.ns1__AddSign_ = ns1__AddSign_;
	soap_serializeheader(soap);
	soap_serialize___ns1__AddSign(soap, &soap_tmp___ns1__AddSign);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__AddSign(soap, &soap_tmp___ns1__AddSign, "-ns1:AddSign", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__AddSign(soap, &soap_tmp___ns1__AddSign, "-ns1:AddSign", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__AddSignResponse_)
		return soap_closesock(soap);
	ns1__AddSignResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__AddSignResponse_->soap_get(soap, "ns1:AddSignResponse", "ns1:AddSignResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::DelSign(const char *endpoint, const char *soap_action, ns1__DelSign *ns1__DelSign_, ns1__DelSignResponse *ns1__DelSignResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__DelSign soap_tmp___ns1__DelSign;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/DelSignRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DelSign.ns1__DelSign_ = ns1__DelSign_;
	soap_serializeheader(soap);
	soap_serialize___ns1__DelSign(soap, &soap_tmp___ns1__DelSign);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DelSign(soap, &soap_tmp___ns1__DelSign, "-ns1:DelSign", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DelSign(soap, &soap_tmp___ns1__DelSign, "-ns1:DelSign", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DelSignResponse_)
		return soap_closesock(soap);
	ns1__DelSignResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DelSignResponse_->soap_get(soap, "ns1:DelSignResponse", "ns1:DelSignResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetSign(const char *endpoint, const char *soap_action, ns1__GetSign *ns1__GetSign_, ns1__GetSignResponse *ns1__GetSignResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetSign soap_tmp___ns1__GetSign;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetSignRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetSign.ns1__GetSign_ = ns1__GetSign_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetSign(soap, &soap_tmp___ns1__GetSign);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetSign(soap, &soap_tmp___ns1__GetSign, "-ns1:GetSign", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetSign(soap, &soap_tmp___ns1__GetSign, "-ns1:GetSign", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetSignResponse_)
		return soap_closesock(soap);
	ns1__GetSignResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetSignResponse_->soap_get(soap, "ns1:GetSignResponse", "ns1:GetSignResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetContSign(const char *endpoint, const char *soap_action, ns1__GetContSign *ns1__GetContSign_, ns1__GetContSignResponse *ns1__GetContSignResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetContSign soap_tmp___ns1__GetContSign;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetContSignRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetContSign.ns1__GetContSign_ = ns1__GetContSign_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetContSign(soap, &soap_tmp___ns1__GetContSign);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetContSign(soap, &soap_tmp___ns1__GetContSign, "-ns1:GetContSign", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetContSign(soap, &soap_tmp___ns1__GetContSign, "-ns1:GetContSign", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetContSignResponse_)
		return soap_closesock(soap);
	ns1__GetContSignResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetContSignResponse_->soap_get(soap, "ns1:GetContSignResponse", "ns1:GetContSignResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetContSignByUser(const char *endpoint, const char *soap_action, ns1__GetContSignByUser *ns1__GetContSignByUser_, ns1__GetContSignByUserResponse *ns1__GetContSignByUserResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetContSignByUser soap_tmp___ns1__GetContSignByUser;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetContSignByUserRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetContSignByUser.ns1__GetContSignByUser_ = ns1__GetContSignByUser_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetContSignByUser(soap, &soap_tmp___ns1__GetContSignByUser);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetContSignByUser(soap, &soap_tmp___ns1__GetContSignByUser, "-ns1:GetContSignByUser", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetContSignByUser(soap, &soap_tmp___ns1__GetContSignByUser, "-ns1:GetContSignByUser", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetContSignByUserResponse_)
		return soap_closesock(soap);
	ns1__GetContSignByUserResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetContSignByUserResponse_->soap_get(soap, "ns1:GetContSignByUserResponse", "ns1:GetContSignByUserResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::ModSign(const char *endpoint, const char *soap_action, ns1__ModSign *ns1__ModSign_, ns1__ModSignResponse *ns1__ModSignResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__ModSign soap_tmp___ns1__ModSign;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/ModSignRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ModSign.ns1__ModSign_ = ns1__ModSign_;
	soap_serializeheader(soap);
	soap_serialize___ns1__ModSign(soap, &soap_tmp___ns1__ModSign);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ModSign(soap, &soap_tmp___ns1__ModSign, "-ns1:ModSign", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ModSign(soap, &soap_tmp___ns1__ModSign, "-ns1:ModSign", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ModSignResponse_)
		return soap_closesock(soap);
	ns1__ModSignResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ModSignResponse_->soap_get(soap, "ns1:ModSignResponse", "ns1:ModSignResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::AddUserSettings(const char *endpoint, const char *soap_action, ns1__AddUserSettings *ns1__AddUserSettings_, ns1__AddUserSettingsResponse *ns1__AddUserSettingsResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__AddUserSettings soap_tmp___ns1__AddUserSettings;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/AddUserSettingsRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__AddUserSettings.ns1__AddUserSettings_ = ns1__AddUserSettings_;
	soap_serializeheader(soap);
	soap_serialize___ns1__AddUserSettings(soap, &soap_tmp___ns1__AddUserSettings);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__AddUserSettings(soap, &soap_tmp___ns1__AddUserSettings, "-ns1:AddUserSettings", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__AddUserSettings(soap, &soap_tmp___ns1__AddUserSettings, "-ns1:AddUserSettings", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__AddUserSettingsResponse_)
		return soap_closesock(soap);
	ns1__AddUserSettingsResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__AddUserSettingsResponse_->soap_get(soap, "ns1:AddUserSettingsResponse", "ns1:AddUserSettingsResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::ModUserSettings(const char *endpoint, const char *soap_action, ns1__ModUserSettings *ns1__ModUserSettings_, ns1__ModUserSettingsResponse *ns1__ModUserSettingsResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__ModUserSettings soap_tmp___ns1__ModUserSettings;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/ModUserSettingsRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ModUserSettings.ns1__ModUserSettings_ = ns1__ModUserSettings_;
	soap_serializeheader(soap);
	soap_serialize___ns1__ModUserSettings(soap, &soap_tmp___ns1__ModUserSettings);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ModUserSettings(soap, &soap_tmp___ns1__ModUserSettings, "-ns1:ModUserSettings", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ModUserSettings(soap, &soap_tmp___ns1__ModUserSettings, "-ns1:ModUserSettings", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ModUserSettingsResponse_)
		return soap_closesock(soap);
	ns1__ModUserSettingsResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ModUserSettingsResponse_->soap_get(soap, "ns1:ModUserSettingsResponse", "ns1:ModUserSettingsResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::DelUserSettings(const char *endpoint, const char *soap_action, ns1__DelUserSettings *ns1__DelUserSettings_, ns1__DelUserSettingsResponse *ns1__DelUserSettingsResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__DelUserSettings soap_tmp___ns1__DelUserSettings;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/DelUserSettingsRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DelUserSettings.ns1__DelUserSettings_ = ns1__DelUserSettings_;
	soap_serializeheader(soap);
	soap_serialize___ns1__DelUserSettings(soap, &soap_tmp___ns1__DelUserSettings);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DelUserSettings(soap, &soap_tmp___ns1__DelUserSettings, "-ns1:DelUserSettings", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DelUserSettings(soap, &soap_tmp___ns1__DelUserSettings, "-ns1:DelUserSettings", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DelUserSettingsResponse_)
		return soap_closesock(soap);
	ns1__DelUserSettingsResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DelUserSettingsResponse_->soap_get(soap, "ns1:DelUserSettingsResponse", "ns1:DelUserSettingsResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetUserSettings(const char *endpoint, const char *soap_action, ns1__GetUserSettings *ns1__GetUserSettings_, ns1__GetUserSettingsResponse *ns1__GetUserSettingsResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetUserSettings soap_tmp___ns1__GetUserSettings;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetUserSettingsRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetUserSettings.ns1__GetUserSettings_ = ns1__GetUserSettings_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetUserSettings(soap, &soap_tmp___ns1__GetUserSettings);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetUserSettings(soap, &soap_tmp___ns1__GetUserSettings, "-ns1:GetUserSettings", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetUserSettings(soap, &soap_tmp___ns1__GetUserSettings, "-ns1:GetUserSettings", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetUserSettingsResponse_)
		return soap_closesock(soap);
	ns1__GetUserSettingsResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetUserSettingsResponse_->soap_get(soap, "ns1:GetUserSettingsResponse", "ns1:GetUserSettingsResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::InsertData(const char *endpoint, const char *soap_action, ns1__InsertData *ns1__InsertData_, ns1__InsertDataResponse *ns1__InsertDataResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__InsertData soap_tmp___ns1__InsertData;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/InsertDataRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__InsertData.ns1__InsertData_ = ns1__InsertData_;
	soap_serializeheader(soap);
	soap_serialize___ns1__InsertData(soap, &soap_tmp___ns1__InsertData);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__InsertData(soap, &soap_tmp___ns1__InsertData, "-ns1:InsertData", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__InsertData(soap, &soap_tmp___ns1__InsertData, "-ns1:InsertData", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__InsertDataResponse_)
		return soap_closesock(soap);
	ns1__InsertDataResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__InsertDataResponse_->soap_get(soap, "ns1:InsertDataResponse", "ns1:InsertDataResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::CanInsertData(const char *endpoint, const char *soap_action, ns1__CanInsertData *ns1__CanInsertData_, ns1__CanInsertDataResponse *ns1__CanInsertDataResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__CanInsertData soap_tmp___ns1__CanInsertData;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/CanInsertDataRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CanInsertData.ns1__CanInsertData_ = ns1__CanInsertData_;
	soap_serializeheader(soap);
	soap_serialize___ns1__CanInsertData(soap, &soap_tmp___ns1__CanInsertData);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CanInsertData(soap, &soap_tmp___ns1__CanInsertData, "-ns1:CanInsertData", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CanInsertData(soap, &soap_tmp___ns1__CanInsertData, "-ns1:CanInsertData", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CanInsertDataResponse_)
		return soap_closesock(soap);
	ns1__CanInsertDataResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CanInsertDataResponse_->soap_get(soap, "ns1:CanInsertDataResponse", "ns1:CanInsertDataResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::CopyData(const char *endpoint, const char *soap_action, ns1__CopyData *ns1__CopyData_, ns1__CopyDataResponse *ns1__CopyDataResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__CopyData soap_tmp___ns1__CopyData;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/CopyDataRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CopyData.ns1__CopyData_ = ns1__CopyData_;
	soap_serializeheader(soap);
	soap_serialize___ns1__CopyData(soap, &soap_tmp___ns1__CopyData);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CopyData(soap, &soap_tmp___ns1__CopyData, "-ns1:CopyData", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CopyData(soap, &soap_tmp___ns1__CopyData, "-ns1:CopyData", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CopyDataResponse_)
		return soap_closesock(soap);
	ns1__CopyDataResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CopyDataResponse_->soap_get(soap, "ns1:CopyDataResponse", "ns1:CopyDataResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::MoveData(const char *endpoint, const char *soap_action, ns1__MoveData *ns1__MoveData_, ns1__MoveDataResponse *ns1__MoveDataResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__MoveData soap_tmp___ns1__MoveData;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/MoveDataRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__MoveData.ns1__MoveData_ = ns1__MoveData_;
	soap_serializeheader(soap);
	soap_serialize___ns1__MoveData(soap, &soap_tmp___ns1__MoveData);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__MoveData(soap, &soap_tmp___ns1__MoveData, "-ns1:MoveData", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__MoveData(soap, &soap_tmp___ns1__MoveData, "-ns1:MoveData", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__MoveDataResponse_)
		return soap_closesock(soap);
	ns1__MoveDataResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__MoveDataResponse_->soap_get(soap, "ns1:MoveDataResponse", "ns1:MoveDataResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::ModifyData(const char *endpoint, const char *soap_action, ns1__ModifyData *ns1__ModifyData_, ns1__ModifyDataResponse *ns1__ModifyDataResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__ModifyData soap_tmp___ns1__ModifyData;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/ModifyDataRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ModifyData.ns1__ModifyData_ = ns1__ModifyData_;
	soap_serializeheader(soap);
	soap_serialize___ns1__ModifyData(soap, &soap_tmp___ns1__ModifyData);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ModifyData(soap, &soap_tmp___ns1__ModifyData, "-ns1:ModifyData", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ModifyData(soap, &soap_tmp___ns1__ModifyData, "-ns1:ModifyData", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ModifyDataResponse_)
		return soap_closesock(soap);
	ns1__ModifyDataResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ModifyDataResponse_->soap_get(soap, "ns1:ModifyDataResponse", "ns1:ModifyDataResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::CanModifyData(const char *endpoint, const char *soap_action, ns1__CanModifyData *ns1__CanModifyData_, ns1__CanModifyDataResponse *ns1__CanModifyDataResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__CanModifyData soap_tmp___ns1__CanModifyData;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/CanModifyDataRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CanModifyData.ns1__CanModifyData_ = ns1__CanModifyData_;
	soap_serializeheader(soap);
	soap_serialize___ns1__CanModifyData(soap, &soap_tmp___ns1__CanModifyData);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CanModifyData(soap, &soap_tmp___ns1__CanModifyData, "-ns1:CanModifyData", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CanModifyData(soap, &soap_tmp___ns1__CanModifyData, "-ns1:CanModifyData", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CanModifyDataResponse_)
		return soap_closesock(soap);
	ns1__CanModifyDataResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CanModifyDataResponse_->soap_get(soap, "ns1:CanModifyDataResponse", "ns1:CanModifyDataResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::DeleteData(const char *endpoint, const char *soap_action, ns1__DeleteData *ns1__DeleteData_, ns1__DeleteDataResponse *ns1__DeleteDataResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__DeleteData soap_tmp___ns1__DeleteData;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/DeleteDataRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DeleteData.ns1__DeleteData_ = ns1__DeleteData_;
	soap_serializeheader(soap);
	soap_serialize___ns1__DeleteData(soap, &soap_tmp___ns1__DeleteData);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DeleteData(soap, &soap_tmp___ns1__DeleteData, "-ns1:DeleteData", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DeleteData(soap, &soap_tmp___ns1__DeleteData, "-ns1:DeleteData", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DeleteDataResponse_)
		return soap_closesock(soap);
	ns1__DeleteDataResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DeleteDataResponse_->soap_get(soap, "ns1:DeleteDataResponse", "ns1:DeleteDataResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::CanDeleteData(const char *endpoint, const char *soap_action, ns1__CanDeleteData *ns1__CanDeleteData_, ns1__CanDeleteDataResponse *ns1__CanDeleteDataResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__CanDeleteData soap_tmp___ns1__CanDeleteData;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/CanDeleteDataRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CanDeleteData.ns1__CanDeleteData_ = ns1__CanDeleteData_;
	soap_serializeheader(soap);
	soap_serialize___ns1__CanDeleteData(soap, &soap_tmp___ns1__CanDeleteData);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CanDeleteData(soap, &soap_tmp___ns1__CanDeleteData, "-ns1:CanDeleteData", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CanDeleteData(soap, &soap_tmp___ns1__CanDeleteData, "-ns1:CanDeleteData", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CanDeleteDataResponse_)
		return soap_closesock(soap);
	ns1__CanDeleteDataResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CanDeleteDataResponse_->soap_get(soap, "ns1:CanDeleteDataResponse", "ns1:CanDeleteDataResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetData(const char *endpoint, const char *soap_action, ns1__GetData *ns1__GetData_, ns1__GetDataResponse *ns1__GetDataResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetData soap_tmp___ns1__GetData;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetDataRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetData.ns1__GetData_ = ns1__GetData_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetData(soap, &soap_tmp___ns1__GetData);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetData(soap, &soap_tmp___ns1__GetData, "-ns1:GetData", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetData(soap, &soap_tmp___ns1__GetData, "-ns1:GetData", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetDataResponse_)
		return soap_closesock(soap);
	ns1__GetDataResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetDataResponse_->soap_get(soap, "ns1:GetDataResponse", "ns1:GetDataResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetDataLimit(const char *endpoint, const char *soap_action, ns1__GetDataLimit *ns1__GetDataLimit_, ns1__GetDataLimitResponse *ns1__GetDataLimitResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetDataLimit soap_tmp___ns1__GetDataLimit;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetDataLimitRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetDataLimit.ns1__GetDataLimit_ = ns1__GetDataLimit_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetDataLimit(soap, &soap_tmp___ns1__GetDataLimit);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetDataLimit(soap, &soap_tmp___ns1__GetDataLimit, "-ns1:GetDataLimit", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetDataLimit(soap, &soap_tmp___ns1__GetDataLimit, "-ns1:GetDataLimit", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetDataLimitResponse_)
		return soap_closesock(soap);
	ns1__GetDataLimitResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetDataLimitResponse_->soap_get(soap, "ns1:GetDataLimitResponse", "ns1:GetDataLimitResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetDataByIdForSecurity(const char *endpoint, const char *soap_action, ns1__GetDataByIdForSecurity *ns1__GetDataByIdForSecurity_, ns1__GetDataByIdForSecurityResponse *ns1__GetDataByIdForSecurityResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetDataByIdForSecurity soap_tmp___ns1__GetDataByIdForSecurity;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetDataByIdForSecurityRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetDataByIdForSecurity.ns1__GetDataByIdForSecurity_ = ns1__GetDataByIdForSecurity_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetDataByIdForSecurity(soap, &soap_tmp___ns1__GetDataByIdForSecurity);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetDataByIdForSecurity(soap, &soap_tmp___ns1__GetDataByIdForSecurity, "-ns1:GetDataByIdForSecurity", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetDataByIdForSecurity(soap, &soap_tmp___ns1__GetDataByIdForSecurity, "-ns1:GetDataByIdForSecurity", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetDataByIdForSecurityResponse_)
		return soap_closesock(soap);
	ns1__GetDataByIdForSecurityResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetDataByIdForSecurityResponse_->soap_get(soap, "ns1:GetDataByIdForSecurityResponse", "ns1:GetDataByIdForSecurityResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetDataById(const char *endpoint, const char *soap_action, ns1__GetDataById *ns1__GetDataById_, ns1__GetDataByIdResponse *ns1__GetDataByIdResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetDataById soap_tmp___ns1__GetDataById;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetDataByIdRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetDataById.ns1__GetDataById_ = ns1__GetDataById_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetDataById(soap, &soap_tmp___ns1__GetDataById);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetDataById(soap, &soap_tmp___ns1__GetDataById, "-ns1:GetDataById", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetDataById(soap, &soap_tmp___ns1__GetDataById, "-ns1:GetDataById", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetDataByIdResponse_)
		return soap_closesock(soap);
	ns1__GetDataByIdResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetDataByIdResponse_->soap_get(soap, "ns1:GetDataByIdResponse", "ns1:GetDataByIdResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetDataCountWithoutPermission(const char *endpoint, const char *soap_action, ns1__GetDataCountWithoutPermission *ns1__GetDataCountWithoutPermission_, ns1__GetDataCountWithoutPermissionResponse *ns1__GetDataCountWithoutPermissionResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetDataCountWithoutPermission soap_tmp___ns1__GetDataCountWithoutPermission;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetDataCountWithoutPermissionRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetDataCountWithoutPermission.ns1__GetDataCountWithoutPermission_ = ns1__GetDataCountWithoutPermission_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetDataCountWithoutPermission(soap, &soap_tmp___ns1__GetDataCountWithoutPermission);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetDataCountWithoutPermission(soap, &soap_tmp___ns1__GetDataCountWithoutPermission, "-ns1:GetDataCountWithoutPermission", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetDataCountWithoutPermission(soap, &soap_tmp___ns1__GetDataCountWithoutPermission, "-ns1:GetDataCountWithoutPermission", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetDataCountWithoutPermissionResponse_)
		return soap_closesock(soap);
	ns1__GetDataCountWithoutPermissionResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetDataCountWithoutPermissionResponse_->soap_get(soap, "ns1:GetDataCountWithoutPermissionResponse", "ns1:GetDataCountWithoutPermissionResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetDataCountWithPermission(const char *endpoint, const char *soap_action, ns1__GetDataCountWithPermission *ns1__GetDataCountWithPermission_, ns1__GetDataCountWithPermissionResponse *ns1__GetDataCountWithPermissionResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetDataCountWithPermission soap_tmp___ns1__GetDataCountWithPermission;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetDataCountWithPermissionRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetDataCountWithPermission.ns1__GetDataCountWithPermission_ = ns1__GetDataCountWithPermission_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetDataCountWithPermission(soap, &soap_tmp___ns1__GetDataCountWithPermission);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetDataCountWithPermission(soap, &soap_tmp___ns1__GetDataCountWithPermission, "-ns1:GetDataCountWithPermission", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetDataCountWithPermission(soap, &soap_tmp___ns1__GetDataCountWithPermission, "-ns1:GetDataCountWithPermission", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetDataCountWithPermissionResponse_)
		return soap_closesock(soap);
	ns1__GetDataCountWithPermissionResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetDataCountWithPermissionResponse_->soap_get(soap, "ns1:GetDataCountWithPermissionResponse", "ns1:GetDataCountWithPermissionResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::InsertProtocol(const char *endpoint, const char *soap_action, ns1__InsertProtocol *ns1__InsertProtocol_, ns1__InsertProtocolResponse *ns1__InsertProtocolResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__InsertProtocol soap_tmp___ns1__InsertProtocol;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/InsertProtocolRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__InsertProtocol.ns1__InsertProtocol_ = ns1__InsertProtocol_;
	soap_serializeheader(soap);
	soap_serialize___ns1__InsertProtocol(soap, &soap_tmp___ns1__InsertProtocol);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__InsertProtocol(soap, &soap_tmp___ns1__InsertProtocol, "-ns1:InsertProtocol", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__InsertProtocol(soap, &soap_tmp___ns1__InsertProtocol, "-ns1:InsertProtocol", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__InsertProtocolResponse_)
		return soap_closesock(soap);
	ns1__InsertProtocolResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__InsertProtocolResponse_->soap_get(soap, "ns1:InsertProtocolResponse", "ns1:InsertProtocolResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::EditProtocol(const char *endpoint, const char *soap_action, ns1__EditProtocol *ns1__EditProtocol_, ns1__EditProtocolResponse *ns1__EditProtocolResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__EditProtocol soap_tmp___ns1__EditProtocol;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/EditProtocolRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__EditProtocol.ns1__EditProtocol_ = ns1__EditProtocol_;
	soap_serializeheader(soap);
	soap_serialize___ns1__EditProtocol(soap, &soap_tmp___ns1__EditProtocol);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__EditProtocol(soap, &soap_tmp___ns1__EditProtocol, "-ns1:EditProtocol", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__EditProtocol(soap, &soap_tmp___ns1__EditProtocol, "-ns1:EditProtocol", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__EditProtocolResponse_)
		return soap_closesock(soap);
	ns1__EditProtocolResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__EditProtocolResponse_->soap_get(soap, "ns1:EditProtocolResponse", "ns1:EditProtocolResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::DeleteProtocol(const char *endpoint, const char *soap_action, ns1__DeleteProtocol *ns1__DeleteProtocol_, ns1__DeleteProtocolResponse *ns1__DeleteProtocolResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__DeleteProtocol soap_tmp___ns1__DeleteProtocol;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/DeleteProtocolRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DeleteProtocol.ns1__DeleteProtocol_ = ns1__DeleteProtocol_;
	soap_serializeheader(soap);
	soap_serialize___ns1__DeleteProtocol(soap, &soap_tmp___ns1__DeleteProtocol);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DeleteProtocol(soap, &soap_tmp___ns1__DeleteProtocol, "-ns1:DeleteProtocol", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DeleteProtocol(soap, &soap_tmp___ns1__DeleteProtocol, "-ns1:DeleteProtocol", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DeleteProtocolResponse_)
		return soap_closesock(soap);
	ns1__DeleteProtocolResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DeleteProtocolResponse_->soap_get(soap, "ns1:DeleteProtocolResponse", "ns1:DeleteProtocolResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::ShowProtocol(const char *endpoint, const char *soap_action, ns1__ShowProtocol *ns1__ShowProtocol_, ns1__ShowProtocolResponse *ns1__ShowProtocolResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__ShowProtocol soap_tmp___ns1__ShowProtocol;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/ShowProtocolRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ShowProtocol.ns1__ShowProtocol_ = ns1__ShowProtocol_;
	soap_serializeheader(soap);
	soap_serialize___ns1__ShowProtocol(soap, &soap_tmp___ns1__ShowProtocol);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ShowProtocol(soap, &soap_tmp___ns1__ShowProtocol, "-ns1:ShowProtocol", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ShowProtocol(soap, &soap_tmp___ns1__ShowProtocol, "-ns1:ShowProtocol", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ShowProtocolResponse_)
		return soap_closesock(soap);
	ns1__ShowProtocolResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ShowProtocolResponse_->soap_get(soap, "ns1:ShowProtocolResponse", "ns1:ShowProtocolResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetProtocolList(const char *endpoint, const char *soap_action, ns1__GetProtocolList *ns1__GetProtocolList_, ns1__GetProtocolListResponse *ns1__GetProtocolListResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetProtocolList soap_tmp___ns1__GetProtocolList;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetProtocolListRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetProtocolList.ns1__GetProtocolList_ = ns1__GetProtocolList_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetProtocolList(soap, &soap_tmp___ns1__GetProtocolList);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetProtocolList(soap, &soap_tmp___ns1__GetProtocolList, "-ns1:GetProtocolList", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetProtocolList(soap, &soap_tmp___ns1__GetProtocolList, "-ns1:GetProtocolList", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetProtocolListResponse_)
		return soap_closesock(soap);
	ns1__GetProtocolListResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetProtocolListResponse_->soap_get(soap, "ns1:GetProtocolListResponse", "ns1:GetProtocolListResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetProtocolById(const char *endpoint, const char *soap_action, ns1__GetProtocolById *ns1__GetProtocolById_, ns1__GetProtocolByIdResponse *ns1__GetProtocolByIdResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetProtocolById soap_tmp___ns1__GetProtocolById;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetProtocolByIdRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetProtocolById.ns1__GetProtocolById_ = ns1__GetProtocolById_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetProtocolById(soap, &soap_tmp___ns1__GetProtocolById);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetProtocolById(soap, &soap_tmp___ns1__GetProtocolById, "-ns1:GetProtocolById", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetProtocolById(soap, &soap_tmp___ns1__GetProtocolById, "-ns1:GetProtocolById", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetProtocolByIdResponse_)
		return soap_closesock(soap);
	ns1__GetProtocolByIdResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetProtocolByIdResponse_->soap_get(soap, "ns1:GetProtocolByIdResponse", "ns1:GetProtocolByIdResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetProtocolByName(const char *endpoint, const char *soap_action, ns1__GetProtocolByName *ns1__GetProtocolByName_, ns1__GetProtocolByNameResponse *ns1__GetProtocolByNameResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetProtocolByName soap_tmp___ns1__GetProtocolByName;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetProtocolByNameRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetProtocolByName.ns1__GetProtocolByName_ = ns1__GetProtocolByName_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetProtocolByName(soap, &soap_tmp___ns1__GetProtocolByName);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetProtocolByName(soap, &soap_tmp___ns1__GetProtocolByName, "-ns1:GetProtocolByName", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetProtocolByName(soap, &soap_tmp___ns1__GetProtocolByName, "-ns1:GetProtocolByName", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetProtocolByNameResponse_)
		return soap_closesock(soap);
	ns1__GetProtocolByNameResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetProtocolByNameResponse_->soap_get(soap, "ns1:GetProtocolByNameResponse", "ns1:GetProtocolByNameResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetProtocolByDesc(const char *endpoint, const char *soap_action, ns1__GetProtocolByDesc *ns1__GetProtocolByDesc_, ns1__GetProtocolByDescResponse *ns1__GetProtocolByDescResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetProtocolByDesc soap_tmp___ns1__GetProtocolByDesc;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetProtocolByDescRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetProtocolByDesc.ns1__GetProtocolByDesc_ = ns1__GetProtocolByDesc_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetProtocolByDesc(soap, &soap_tmp___ns1__GetProtocolByDesc);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetProtocolByDesc(soap, &soap_tmp___ns1__GetProtocolByDesc, "-ns1:GetProtocolByDesc", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetProtocolByDesc(soap, &soap_tmp___ns1__GetProtocolByDesc, "-ns1:GetProtocolByDesc", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetProtocolByDescResponse_)
		return soap_closesock(soap);
	ns1__GetProtocolByDescResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetProtocolByDescResponse_->soap_get(soap, "ns1:GetProtocolByDescResponse", "ns1:GetProtocolByDescResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetProtocolByNameDesc(const char *endpoint, const char *soap_action, ns1__GetProtocolByNameDesc *ns1__GetProtocolByNameDesc_, ns1__GetProtocolByNameDescResponse *ns1__GetProtocolByNameDescResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetProtocolByNameDesc soap_tmp___ns1__GetProtocolByNameDesc;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetProtocolByNameDescRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetProtocolByNameDesc.ns1__GetProtocolByNameDesc_ = ns1__GetProtocolByNameDesc_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetProtocolByNameDesc(soap, &soap_tmp___ns1__GetProtocolByNameDesc);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetProtocolByNameDesc(soap, &soap_tmp___ns1__GetProtocolByNameDesc, "-ns1:GetProtocolByNameDesc", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetProtocolByNameDesc(soap, &soap_tmp___ns1__GetProtocolByNameDesc, "-ns1:GetProtocolByNameDesc", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetProtocolByNameDescResponse_)
		return soap_closesock(soap);
	ns1__GetProtocolByNameDescResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetProtocolByNameDescResponse_->soap_get(soap, "ns1:GetProtocolByNameDescResponse", "ns1:GetProtocolByNameDescResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::CanUseProtocol(const char *endpoint, const char *soap_action, ns1__CanUseProtocol *ns1__CanUseProtocol_, ns1__CanUseProtocolResponse *ns1__CanUseProtocolResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__CanUseProtocol soap_tmp___ns1__CanUseProtocol;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/CanUseProtocolRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CanUseProtocol.ns1__CanUseProtocol_ = ns1__CanUseProtocol_;
	soap_serializeheader(soap);
	soap_serialize___ns1__CanUseProtocol(soap, &soap_tmp___ns1__CanUseProtocol);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CanUseProtocol(soap, &soap_tmp___ns1__CanUseProtocol, "-ns1:CanUseProtocol", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CanUseProtocol(soap, &soap_tmp___ns1__CanUseProtocol, "-ns1:CanUseProtocol", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CanUseProtocolResponse_)
		return soap_closesock(soap);
	ns1__CanUseProtocolResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CanUseProtocolResponse_->soap_get(soap, "ns1:CanUseProtocolResponse", "ns1:CanUseProtocolResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::CanAddNewYear(const char *endpoint, const char *soap_action, ns1__CanAddNewYear *ns1__CanAddNewYear_, ns1__CanAddNewYearResponse *ns1__CanAddNewYearResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__CanAddNewYear soap_tmp___ns1__CanAddNewYear;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/CanAddNewYearRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CanAddNewYear.ns1__CanAddNewYear_ = ns1__CanAddNewYear_;
	soap_serializeheader(soap);
	soap_serialize___ns1__CanAddNewYear(soap, &soap_tmp___ns1__CanAddNewYear);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CanAddNewYear(soap, &soap_tmp___ns1__CanAddNewYear, "-ns1:CanAddNewYear", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CanAddNewYear(soap, &soap_tmp___ns1__CanAddNewYear, "-ns1:CanAddNewYear", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CanAddNewYearResponse_)
		return soap_closesock(soap);
	ns1__CanAddNewYearResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CanAddNewYearResponse_->soap_get(soap, "ns1:CanAddNewYearResponse", "ns1:CanAddNewYearResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::CanAddNewDate(const char *endpoint, const char *soap_action, ns1__CanAddNewDate *ns1__CanAddNewDate_, ns1__CanAddNewDateResponse *ns1__CanAddNewDateResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__CanAddNewDate soap_tmp___ns1__CanAddNewDate;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/CanAddNewDateRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CanAddNewDate.ns1__CanAddNewDate_ = ns1__CanAddNewDate_;
	soap_serializeheader(soap);
	soap_serialize___ns1__CanAddNewDate(soap, &soap_tmp___ns1__CanAddNewDate);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CanAddNewDate(soap, &soap_tmp___ns1__CanAddNewDate, "-ns1:CanAddNewDate", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CanAddNewDate(soap, &soap_tmp___ns1__CanAddNewDate, "-ns1:CanAddNewDate", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CanAddNewDateResponse_)
		return soap_closesock(soap);
	ns1__CanAddNewDateResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CanAddNewDateResponse_->soap_get(soap, "ns1:CanAddNewDateResponse", "ns1:CanAddNewDateResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::CanInsertProtocol(const char *endpoint, const char *soap_action, ns1__CanInsertProtocol *ns1__CanInsertProtocol_, ns1__CanInsertProtocolResponse *ns1__CanInsertProtocolResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__CanInsertProtocol soap_tmp___ns1__CanInsertProtocol;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/CanInsertProtocolRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CanInsertProtocol.ns1__CanInsertProtocol_ = ns1__CanInsertProtocol_;
	soap_serializeheader(soap);
	soap_serialize___ns1__CanInsertProtocol(soap, &soap_tmp___ns1__CanInsertProtocol);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CanInsertProtocol(soap, &soap_tmp___ns1__CanInsertProtocol, "-ns1:CanInsertProtocol", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CanInsertProtocol(soap, &soap_tmp___ns1__CanInsertProtocol, "-ns1:CanInsertProtocol", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CanInsertProtocolResponse_)
		return soap_closesock(soap);
	ns1__CanInsertProtocolResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CanInsertProtocolResponse_->soap_get(soap, "ns1:CanInsertProtocolResponse", "ns1:CanInsertProtocolResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::CanEditProtocol(const char *endpoint, const char *soap_action, ns1__CanEditProtocol *ns1__CanEditProtocol_, ns1__CanEditProtocolResponse *ns1__CanEditProtocolResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__CanEditProtocol soap_tmp___ns1__CanEditProtocol;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/CanEditProtocolRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CanEditProtocol.ns1__CanEditProtocol_ = ns1__CanEditProtocol_;
	soap_serializeheader(soap);
	soap_serialize___ns1__CanEditProtocol(soap, &soap_tmp___ns1__CanEditProtocol);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CanEditProtocol(soap, &soap_tmp___ns1__CanEditProtocol, "-ns1:CanEditProtocol", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CanEditProtocol(soap, &soap_tmp___ns1__CanEditProtocol, "-ns1:CanEditProtocol", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CanEditProtocolResponse_)
		return soap_closesock(soap);
	ns1__CanEditProtocolResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CanEditProtocolResponse_->soap_get(soap, "ns1:CanEditProtocolResponse", "ns1:CanEditProtocolResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::CanDeleteProtocol(const char *endpoint, const char *soap_action, ns1__CanDeleteProtocol *ns1__CanDeleteProtocol_, ns1__CanDeleteProtocolResponse *ns1__CanDeleteProtocolResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__CanDeleteProtocol soap_tmp___ns1__CanDeleteProtocol;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/CanDeleteProtocolRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CanDeleteProtocol.ns1__CanDeleteProtocol_ = ns1__CanDeleteProtocol_;
	soap_serializeheader(soap);
	soap_serialize___ns1__CanDeleteProtocol(soap, &soap_tmp___ns1__CanDeleteProtocol);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CanDeleteProtocol(soap, &soap_tmp___ns1__CanDeleteProtocol, "-ns1:CanDeleteProtocol", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CanDeleteProtocol(soap, &soap_tmp___ns1__CanDeleteProtocol, "-ns1:CanDeleteProtocol", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CanDeleteProtocolResponse_)
		return soap_closesock(soap);
	ns1__CanDeleteProtocolResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CanDeleteProtocolResponse_->soap_get(soap, "ns1:CanDeleteProtocolResponse", "ns1:CanDeleteProtocolResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetNewProtocolNumber(const char *endpoint, const char *soap_action, ns1__GetNewProtocolNumber *ns1__GetNewProtocolNumber_, ns1__GetNewProtocolNumberResponse *ns1__GetNewProtocolNumberResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetNewProtocolNumber soap_tmp___ns1__GetNewProtocolNumber;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetNewProtocolNumberRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetNewProtocolNumber.ns1__GetNewProtocolNumber_ = ns1__GetNewProtocolNumber_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetNewProtocolNumber(soap, &soap_tmp___ns1__GetNewProtocolNumber);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetNewProtocolNumber(soap, &soap_tmp___ns1__GetNewProtocolNumber, "-ns1:GetNewProtocolNumber", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetNewProtocolNumber(soap, &soap_tmp___ns1__GetNewProtocolNumber, "-ns1:GetNewProtocolNumber", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetNewProtocolNumberResponse_)
		return soap_closesock(soap);
	ns1__GetNewProtocolNumberResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetNewProtocolNumberResponse_->soap_get(soap, "ns1:GetNewProtocolNumberResponse", "ns1:GetNewProtocolNumberResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::SetTmpUSDownloadPath(const char *endpoint, const char *soap_action, ns1__SetTmpUSDownloadPath *ns1__SetTmpUSDownloadPath_, ns1__SetTmpUSDownloadPathResponse *ns1__SetTmpUSDownloadPathResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__SetTmpUSDownloadPath soap_tmp___ns1__SetTmpUSDownloadPath;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/SetTmpUSDownloadPathRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__SetTmpUSDownloadPath.ns1__SetTmpUSDownloadPath_ = ns1__SetTmpUSDownloadPath_;
	soap_serializeheader(soap);
	soap_serialize___ns1__SetTmpUSDownloadPath(soap, &soap_tmp___ns1__SetTmpUSDownloadPath);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__SetTmpUSDownloadPath(soap, &soap_tmp___ns1__SetTmpUSDownloadPath, "-ns1:SetTmpUSDownloadPath", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__SetTmpUSDownloadPath(soap, &soap_tmp___ns1__SetTmpUSDownloadPath, "-ns1:SetTmpUSDownloadPath", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__SetTmpUSDownloadPathResponse_)
		return soap_closesock(soap);
	ns1__SetTmpUSDownloadPathResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__SetTmpUSDownloadPathResponse_->soap_get(soap, "ns1:SetTmpUSDownloadPathResponse", "ns1:SetTmpUSDownloadPathResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::SetTmpUSUploadPath(const char *endpoint, const char *soap_action, ns1__SetTmpUSUploadPath *ns1__SetTmpUSUploadPath_, ns1__SetTmpUSUploadPathResponse *ns1__SetTmpUSUploadPathResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__SetTmpUSUploadPath soap_tmp___ns1__SetTmpUSUploadPath;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/SetTmpUSUploadPathRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__SetTmpUSUploadPath.ns1__SetTmpUSUploadPath_ = ns1__SetTmpUSUploadPath_;
	soap_serializeheader(soap);
	soap_serialize___ns1__SetTmpUSUploadPath(soap, &soap_tmp___ns1__SetTmpUSUploadPath);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__SetTmpUSUploadPath(soap, &soap_tmp___ns1__SetTmpUSUploadPath, "-ns1:SetTmpUSUploadPath", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__SetTmpUSUploadPath(soap, &soap_tmp___ns1__SetTmpUSUploadPath, "-ns1:SetTmpUSUploadPath", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__SetTmpUSUploadPathResponse_)
		return soap_closesock(soap);
	ns1__SetTmpUSUploadPathResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__SetTmpUSUploadPathResponse_->soap_get(soap, "ns1:SetTmpUSUploadPathResponse", "ns1:SetTmpUSUploadPathResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::UploadUSEndFile(const char *endpoint, const char *soap_action, ns1__UploadUSEndFile *ns1__UploadUSEndFile_, ns1__UploadUSEndFileResponse *ns1__UploadUSEndFileResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__UploadUSEndFile soap_tmp___ns1__UploadUSEndFile;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/UploadUSEndFileRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__UploadUSEndFile.ns1__UploadUSEndFile_ = ns1__UploadUSEndFile_;
	soap_serializeheader(soap);
	soap_serialize___ns1__UploadUSEndFile(soap, &soap_tmp___ns1__UploadUSEndFile);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UploadUSEndFile(soap, &soap_tmp___ns1__UploadUSEndFile, "-ns1:UploadUSEndFile", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UploadUSEndFile(soap, &soap_tmp___ns1__UploadUSEndFile, "-ns1:UploadUSEndFile", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UploadUSEndFileResponse_)
		return soap_closesock(soap);
	ns1__UploadUSEndFileResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UploadUSEndFileResponse_->soap_get(soap, "ns1:UploadUSEndFileResponse", "ns1:UploadUSEndFileResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::UploadUSEndFileWithUser(const char *endpoint, const char *soap_action, ns1__UploadUSEndFileWithUser *ns1__UploadUSEndFileWithUser_, ns1__UploadUSEndFileWithUserResponse *ns1__UploadUSEndFileWithUserResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__UploadUSEndFileWithUser soap_tmp___ns1__UploadUSEndFileWithUser;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/UploadUSEndFileWithUserRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__UploadUSEndFileWithUser.ns1__UploadUSEndFileWithUser_ = ns1__UploadUSEndFileWithUser_;
	soap_serializeheader(soap);
	soap_serialize___ns1__UploadUSEndFileWithUser(soap, &soap_tmp___ns1__UploadUSEndFileWithUser);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UploadUSEndFileWithUser(soap, &soap_tmp___ns1__UploadUSEndFileWithUser, "-ns1:UploadUSEndFileWithUser", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UploadUSEndFileWithUser(soap, &soap_tmp___ns1__UploadUSEndFileWithUser, "-ns1:UploadUSEndFileWithUser", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UploadUSEndFileWithUserResponse_)
		return soap_closesock(soap);
	ns1__UploadUSEndFileWithUserResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UploadUSEndFileWithUserResponse_->soap_get(soap, "ns1:UploadUSEndFileWithUserResponse", "ns1:UploadUSEndFileWithUserResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::UploadUSSendChunk(const char *endpoint, const char *soap_action, ns1__UploadUSSendChunk *ns1__UploadUSSendChunk_, ns1__UploadUSSendChunkResponse *ns1__UploadUSSendChunkResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__UploadUSSendChunk soap_tmp___ns1__UploadUSSendChunk;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/UploadUSSendChunkRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__UploadUSSendChunk.ns1__UploadUSSendChunk_ = ns1__UploadUSSendChunk_;
	soap_serializeheader(soap);
	soap_serialize___ns1__UploadUSSendChunk(soap, &soap_tmp___ns1__UploadUSSendChunk);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UploadUSSendChunk(soap, &soap_tmp___ns1__UploadUSSendChunk, "-ns1:UploadUSSendChunk", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UploadUSSendChunk(soap, &soap_tmp___ns1__UploadUSSendChunk, "-ns1:UploadUSSendChunk", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UploadUSSendChunkResponse_)
		return soap_closesock(soap);
	ns1__UploadUSSendChunkResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UploadUSSendChunkResponse_->soap_get(soap, "ns1:UploadUSSendChunkResponse", "ns1:UploadUSSendChunkResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::DownloadUSGetNext(const char *endpoint, const char *soap_action, ns1__DownloadUSGetNext *ns1__DownloadUSGetNext_, ns1__DownloadUSGetNextResponse *ns1__DownloadUSGetNextResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__DownloadUSGetNext soap_tmp___ns1__DownloadUSGetNext;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/DownloadUSGetNextRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DownloadUSGetNext.ns1__DownloadUSGetNext_ = ns1__DownloadUSGetNext_;
	soap_serializeheader(soap);
	soap_serialize___ns1__DownloadUSGetNext(soap, &soap_tmp___ns1__DownloadUSGetNext);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DownloadUSGetNext(soap, &soap_tmp___ns1__DownloadUSGetNext, "-ns1:DownloadUSGetNext", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DownloadUSGetNext(soap, &soap_tmp___ns1__DownloadUSGetNext, "-ns1:DownloadUSGetNext", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DownloadUSGetNextResponse_)
		return soap_closesock(soap);
	ns1__DownloadUSGetNextResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DownloadUSGetNextResponse_->soap_get(soap, "ns1:DownloadUSGetNextResponse", "ns1:DownloadUSGetNextResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::DownloadUSGetChunk(const char *endpoint, const char *soap_action, ns1__DownloadUSGetChunk *ns1__DownloadUSGetChunk_, ns1__DownloadUSGetChunkResponse *ns1__DownloadUSGetChunkResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__DownloadUSGetChunk soap_tmp___ns1__DownloadUSGetChunk;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/DownloadUSGetChunkRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DownloadUSGetChunk.ns1__DownloadUSGetChunk_ = ns1__DownloadUSGetChunk_;
	soap_serializeheader(soap);
	soap_serialize___ns1__DownloadUSGetChunk(soap, &soap_tmp___ns1__DownloadUSGetChunk);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DownloadUSGetChunk(soap, &soap_tmp___ns1__DownloadUSGetChunk, "-ns1:DownloadUSGetChunk", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DownloadUSGetChunk(soap, &soap_tmp___ns1__DownloadUSGetChunk, "-ns1:DownloadUSGetChunk", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DownloadUSGetChunkResponse_)
		return soap_closesock(soap);
	ns1__DownloadUSGetChunkResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DownloadUSGetChunkResponse_->soap_get(soap, "ns1:DownloadUSGetChunkResponse", "ns1:DownloadUSGetChunkResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::DownloadUSFile(const char *endpoint, const char *soap_action, ns1__DownloadUSFile *ns1__DownloadUSFile_, ns1__DownloadUSFileResponse *ns1__DownloadUSFileResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__DownloadUSFile soap_tmp___ns1__DownloadUSFile;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/DownloadUSFileRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DownloadUSFile.ns1__DownloadUSFile_ = ns1__DownloadUSFile_;
	soap_serializeheader(soap);
	soap_serialize___ns1__DownloadUSFile(soap, &soap_tmp___ns1__DownloadUSFile);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DownloadUSFile(soap, &soap_tmp___ns1__DownloadUSFile, "-ns1:DownloadUSFile", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DownloadUSFile(soap, &soap_tmp___ns1__DownloadUSFile, "-ns1:DownloadUSFile", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DownloadUSFileResponse_)
		return soap_closesock(soap);
	ns1__DownloadUSFileResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DownloadUSFileResponse_->soap_get(soap, "ns1:DownloadUSFileResponse", "ns1:DownloadUSFileResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetDataUSFileDetail(const char *endpoint, const char *soap_action, ns1__GetDataUSFileDetail *ns1__GetDataUSFileDetail_, ns1__GetDataUSFileDetailResponse *ns1__GetDataUSFileDetailResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetDataUSFileDetail soap_tmp___ns1__GetDataUSFileDetail;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetDataUSFileDetailRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetDataUSFileDetail.ns1__GetDataUSFileDetail_ = ns1__GetDataUSFileDetail_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetDataUSFileDetail(soap, &soap_tmp___ns1__GetDataUSFileDetail);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetDataUSFileDetail(soap, &soap_tmp___ns1__GetDataUSFileDetail, "-ns1:GetDataUSFileDetail", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetDataUSFileDetail(soap, &soap_tmp___ns1__GetDataUSFileDetail, "-ns1:GetDataUSFileDetail", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetDataUSFileDetailResponse_)
		return soap_closesock(soap);
	ns1__GetDataUSFileDetailResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetDataUSFileDetailResponse_->soap_get(soap, "ns1:GetDataUSFileDetailResponse", "ns1:GetDataUSFileDetailResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetDataUSFileList(const char *endpoint, const char *soap_action, ns1__GetDataUSFileList *ns1__GetDataUSFileList_, ns1__GetDataUSFileListResponse *ns1__GetDataUSFileListResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetDataUSFileList soap_tmp___ns1__GetDataUSFileList;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetDataUSFileListRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetDataUSFileList.ns1__GetDataUSFileList_ = ns1__GetDataUSFileList_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetDataUSFileList(soap, &soap_tmp___ns1__GetDataUSFileList);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetDataUSFileList(soap, &soap_tmp___ns1__GetDataUSFileList, "-ns1:GetDataUSFileList", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetDataUSFileList(soap, &soap_tmp___ns1__GetDataUSFileList, "-ns1:GetDataUSFileList", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetDataUSFileListResponse_)
		return soap_closesock(soap);
	ns1__GetDataUSFileListResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetDataUSFileListResponse_->soap_get(soap, "ns1:GetDataUSFileListResponse", "ns1:GetDataUSFileListResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetDataUSFileListByUsername(const char *endpoint, const char *soap_action, ns1__GetDataUSFileListByUsername *ns1__GetDataUSFileListByUsername_, ns1__GetDataUSFileListByUsernameResponse *ns1__GetDataUSFileListByUsernameResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetDataUSFileListByUsername soap_tmp___ns1__GetDataUSFileListByUsername;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetDataUSFileListByUsernameRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetDataUSFileListByUsername.ns1__GetDataUSFileListByUsername_ = ns1__GetDataUSFileListByUsername_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetDataUSFileListByUsername(soap, &soap_tmp___ns1__GetDataUSFileListByUsername);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetDataUSFileListByUsername(soap, &soap_tmp___ns1__GetDataUSFileListByUsername, "-ns1:GetDataUSFileListByUsername", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetDataUSFileListByUsername(soap, &soap_tmp___ns1__GetDataUSFileListByUsername, "-ns1:GetDataUSFileListByUsername", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetDataUSFileListByUsernameResponse_)
		return soap_closesock(soap);
	ns1__GetDataUSFileListByUsernameResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetDataUSFileListByUsernameResponse_->soap_get(soap, "ns1:GetDataUSFileListByUsernameResponse", "ns1:GetDataUSFileListByUsernameResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::InsertUSFile(const char *endpoint, const char *soap_action, ns1__InsertUSFile *ns1__InsertUSFile_, ns1__InsertUSFileResponse *ns1__InsertUSFileResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__InsertUSFile soap_tmp___ns1__InsertUSFile;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/InsertUSFileRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__InsertUSFile.ns1__InsertUSFile_ = ns1__InsertUSFile_;
	soap_serializeheader(soap);
	soap_serialize___ns1__InsertUSFile(soap, &soap_tmp___ns1__InsertUSFile);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__InsertUSFile(soap, &soap_tmp___ns1__InsertUSFile, "-ns1:InsertUSFile", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__InsertUSFile(soap, &soap_tmp___ns1__InsertUSFile, "-ns1:InsertUSFile", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__InsertUSFileResponse_)
		return soap_closesock(soap);
	ns1__InsertUSFileResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__InsertUSFileResponse_->soap_get(soap, "ns1:InsertUSFileResponse", "ns1:InsertUSFileResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::InsertUSFileWithUser(const char *endpoint, const char *soap_action, ns1__InsertUSFileWithUser *ns1__InsertUSFileWithUser_, ns1__InsertUSFileWithUserResponse *ns1__InsertUSFileWithUserResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__InsertUSFileWithUser soap_tmp___ns1__InsertUSFileWithUser;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/InsertUSFileWithUserRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__InsertUSFileWithUser.ns1__InsertUSFileWithUser_ = ns1__InsertUSFileWithUser_;
	soap_serializeheader(soap);
	soap_serialize___ns1__InsertUSFileWithUser(soap, &soap_tmp___ns1__InsertUSFileWithUser);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__InsertUSFileWithUser(soap, &soap_tmp___ns1__InsertUSFileWithUser, "-ns1:InsertUSFileWithUser", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__InsertUSFileWithUser(soap, &soap_tmp___ns1__InsertUSFileWithUser, "-ns1:InsertUSFileWithUser", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__InsertUSFileWithUserResponse_)
		return soap_closesock(soap);
	ns1__InsertUSFileWithUserResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__InsertUSFileWithUserResponse_->soap_get(soap, "ns1:InsertUSFileWithUserResponse", "ns1:InsertUSFileWithUserResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::DeleteUSFileById(const char *endpoint, const char *soap_action, ns1__DeleteUSFileById *ns1__DeleteUSFileById_, ns1__DeleteUSFileByIdResponse *ns1__DeleteUSFileByIdResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__DeleteUSFileById soap_tmp___ns1__DeleteUSFileById;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/DeleteUSFileByIdRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DeleteUSFileById.ns1__DeleteUSFileById_ = ns1__DeleteUSFileById_;
	soap_serializeheader(soap);
	soap_serialize___ns1__DeleteUSFileById(soap, &soap_tmp___ns1__DeleteUSFileById);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DeleteUSFileById(soap, &soap_tmp___ns1__DeleteUSFileById, "-ns1:DeleteUSFileById", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DeleteUSFileById(soap, &soap_tmp___ns1__DeleteUSFileById, "-ns1:DeleteUSFileById", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DeleteUSFileByIdResponse_)
		return soap_closesock(soap);
	ns1__DeleteUSFileByIdResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DeleteUSFileByIdResponse_->soap_get(soap, "ns1:DeleteUSFileByIdResponse", "ns1:DeleteUSFileByIdResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::DeleteUSFileByCode(const char *endpoint, const char *soap_action, ns1__DeleteUSFileByCode *ns1__DeleteUSFileByCode_, ns1__DeleteUSFileByCodeResponse *ns1__DeleteUSFileByCodeResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__DeleteUSFileByCode soap_tmp___ns1__DeleteUSFileByCode;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/DeleteUSFileByCodeRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DeleteUSFileByCode.ns1__DeleteUSFileByCode_ = ns1__DeleteUSFileByCode_;
	soap_serializeheader(soap);
	soap_serialize___ns1__DeleteUSFileByCode(soap, &soap_tmp___ns1__DeleteUSFileByCode);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DeleteUSFileByCode(soap, &soap_tmp___ns1__DeleteUSFileByCode, "-ns1:DeleteUSFileByCode", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DeleteUSFileByCode(soap, &soap_tmp___ns1__DeleteUSFileByCode, "-ns1:DeleteUSFileByCode", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DeleteUSFileByCodeResponse_)
		return soap_closesock(soap);
	ns1__DeleteUSFileByCodeResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DeleteUSFileByCodeResponse_->soap_get(soap, "ns1:DeleteUSFileByCodeResponse", "ns1:DeleteUSFileByCodeResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::SetTmpWFDownloadPath(const char *endpoint, const char *soap_action, ns1__SetTmpWFDownloadPath *ns1__SetTmpWFDownloadPath_, ns1__SetTmpWFDownloadPathResponse *ns1__SetTmpWFDownloadPathResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__SetTmpWFDownloadPath soap_tmp___ns1__SetTmpWFDownloadPath;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/SetTmpWFDownloadPathRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__SetTmpWFDownloadPath.ns1__SetTmpWFDownloadPath_ = ns1__SetTmpWFDownloadPath_;
	soap_serializeheader(soap);
	soap_serialize___ns1__SetTmpWFDownloadPath(soap, &soap_tmp___ns1__SetTmpWFDownloadPath);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__SetTmpWFDownloadPath(soap, &soap_tmp___ns1__SetTmpWFDownloadPath, "-ns1:SetTmpWFDownloadPath", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__SetTmpWFDownloadPath(soap, &soap_tmp___ns1__SetTmpWFDownloadPath, "-ns1:SetTmpWFDownloadPath", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__SetTmpWFDownloadPathResponse_)
		return soap_closesock(soap);
	ns1__SetTmpWFDownloadPathResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__SetTmpWFDownloadPathResponse_->soap_get(soap, "ns1:SetTmpWFDownloadPathResponse", "ns1:SetTmpWFDownloadPathResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::SetTmpWFUploadPath(const char *endpoint, const char *soap_action, ns1__SetTmpWFUploadPath *ns1__SetTmpWFUploadPath_, ns1__SetTmpWFUploadPathResponse *ns1__SetTmpWFUploadPathResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__SetTmpWFUploadPath soap_tmp___ns1__SetTmpWFUploadPath;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/SetTmpWFUploadPathRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__SetTmpWFUploadPath.ns1__SetTmpWFUploadPath_ = ns1__SetTmpWFUploadPath_;
	soap_serializeheader(soap);
	soap_serialize___ns1__SetTmpWFUploadPath(soap, &soap_tmp___ns1__SetTmpWFUploadPath);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__SetTmpWFUploadPath(soap, &soap_tmp___ns1__SetTmpWFUploadPath, "-ns1:SetTmpWFUploadPath", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__SetTmpWFUploadPath(soap, &soap_tmp___ns1__SetTmpWFUploadPath, "-ns1:SetTmpWFUploadPath", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__SetTmpWFUploadPathResponse_)
		return soap_closesock(soap);
	ns1__SetTmpWFUploadPathResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__SetTmpWFUploadPathResponse_->soap_get(soap, "ns1:SetTmpWFUploadPathResponse", "ns1:SetTmpWFUploadPathResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::UploadWFEndFile(const char *endpoint, const char *soap_action, ns1__UploadWFEndFile *ns1__UploadWFEndFile_, ns1__UploadWFEndFileResponse *ns1__UploadWFEndFileResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__UploadWFEndFile soap_tmp___ns1__UploadWFEndFile;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/UploadWFEndFileRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__UploadWFEndFile.ns1__UploadWFEndFile_ = ns1__UploadWFEndFile_;
	soap_serializeheader(soap);
	soap_serialize___ns1__UploadWFEndFile(soap, &soap_tmp___ns1__UploadWFEndFile);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UploadWFEndFile(soap, &soap_tmp___ns1__UploadWFEndFile, "-ns1:UploadWFEndFile", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UploadWFEndFile(soap, &soap_tmp___ns1__UploadWFEndFile, "-ns1:UploadWFEndFile", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UploadWFEndFileResponse_)
		return soap_closesock(soap);
	ns1__UploadWFEndFileResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UploadWFEndFileResponse_->soap_get(soap, "ns1:UploadWFEndFileResponse", "ns1:UploadWFEndFileResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::UploadWFSendChunk(const char *endpoint, const char *soap_action, ns1__UploadWFSendChunk *ns1__UploadWFSendChunk_, ns1__UploadWFSendChunkResponse *ns1__UploadWFSendChunkResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__UploadWFSendChunk soap_tmp___ns1__UploadWFSendChunk;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/UploadWFSendChunkRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__UploadWFSendChunk.ns1__UploadWFSendChunk_ = ns1__UploadWFSendChunk_;
	soap_serializeheader(soap);
	soap_serialize___ns1__UploadWFSendChunk(soap, &soap_tmp___ns1__UploadWFSendChunk);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UploadWFSendChunk(soap, &soap_tmp___ns1__UploadWFSendChunk, "-ns1:UploadWFSendChunk", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UploadWFSendChunk(soap, &soap_tmp___ns1__UploadWFSendChunk, "-ns1:UploadWFSendChunk", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UploadWFSendChunkResponse_)
		return soap_closesock(soap);
	ns1__UploadWFSendChunkResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UploadWFSendChunkResponse_->soap_get(soap, "ns1:UploadWFSendChunkResponse", "ns1:UploadWFSendChunkResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::DownloadWFEndFile(const char *endpoint, const char *soap_action, ns1__DownloadWFEndFile *ns1__DownloadWFEndFile_, ns1__DownloadWFEndFileResponse *ns1__DownloadWFEndFileResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__DownloadWFEndFile soap_tmp___ns1__DownloadWFEndFile;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/DownloadWFEndFileRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DownloadWFEndFile.ns1__DownloadWFEndFile_ = ns1__DownloadWFEndFile_;
	soap_serializeheader(soap);
	soap_serialize___ns1__DownloadWFEndFile(soap, &soap_tmp___ns1__DownloadWFEndFile);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DownloadWFEndFile(soap, &soap_tmp___ns1__DownloadWFEndFile, "-ns1:DownloadWFEndFile", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DownloadWFEndFile(soap, &soap_tmp___ns1__DownloadWFEndFile, "-ns1:DownloadWFEndFile", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DownloadWFEndFileResponse_)
		return soap_closesock(soap);
	ns1__DownloadWFEndFileResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DownloadWFEndFileResponse_->soap_get(soap, "ns1:DownloadWFEndFileResponse", "ns1:DownloadWFEndFileResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::DownloadWFFile(const char *endpoint, const char *soap_action, ns1__DownloadWFFile *ns1__DownloadWFFile_, ns1__DownloadWFFileResponse *ns1__DownloadWFFileResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__DownloadWFFile soap_tmp___ns1__DownloadWFFile;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/DownloadWFFileRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DownloadWFFile.ns1__DownloadWFFile_ = ns1__DownloadWFFile_;
	soap_serializeheader(soap);
	soap_serialize___ns1__DownloadWFFile(soap, &soap_tmp___ns1__DownloadWFFile);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DownloadWFFile(soap, &soap_tmp___ns1__DownloadWFFile, "-ns1:DownloadWFFile", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DownloadWFFile(soap, &soap_tmp___ns1__DownloadWFFile, "-ns1:DownloadWFFile", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DownloadWFFileResponse_)
		return soap_closesock(soap);
	ns1__DownloadWFFileResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DownloadWFFileResponse_->soap_get(soap, "ns1:DownloadWFFileResponse", "ns1:DownloadWFFileResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetDataWFFileDetail(const char *endpoint, const char *soap_action, ns1__GetDataWFFileDetail *ns1__GetDataWFFileDetail_, ns1__GetDataWFFileDetailResponse *ns1__GetDataWFFileDetailResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetDataWFFileDetail soap_tmp___ns1__GetDataWFFileDetail;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetDataWFFileDetailRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetDataWFFileDetail.ns1__GetDataWFFileDetail_ = ns1__GetDataWFFileDetail_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetDataWFFileDetail(soap, &soap_tmp___ns1__GetDataWFFileDetail);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetDataWFFileDetail(soap, &soap_tmp___ns1__GetDataWFFileDetail, "-ns1:GetDataWFFileDetail", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetDataWFFileDetail(soap, &soap_tmp___ns1__GetDataWFFileDetail, "-ns1:GetDataWFFileDetail", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetDataWFFileDetailResponse_)
		return soap_closesock(soap);
	ns1__GetDataWFFileDetailResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetDataWFFileDetailResponse_->soap_get(soap, "ns1:GetDataWFFileDetailResponse", "ns1:GetDataWFFileDetailResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetDataWFFileList(const char *endpoint, const char *soap_action, ns1__GetDataWFFileList *ns1__GetDataWFFileList_, ns1__GetDataWFFileListResponse *ns1__GetDataWFFileListResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetDataWFFileList soap_tmp___ns1__GetDataWFFileList;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetDataWFFileListRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetDataWFFileList.ns1__GetDataWFFileList_ = ns1__GetDataWFFileList_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetDataWFFileList(soap, &soap_tmp___ns1__GetDataWFFileList);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetDataWFFileList(soap, &soap_tmp___ns1__GetDataWFFileList, "-ns1:GetDataWFFileList", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetDataWFFileList(soap, &soap_tmp___ns1__GetDataWFFileList, "-ns1:GetDataWFFileList", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetDataWFFileListResponse_)
		return soap_closesock(soap);
	ns1__GetDataWFFileListResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetDataWFFileListResponse_->soap_get(soap, "ns1:GetDataWFFileListResponse", "ns1:GetDataWFFileListResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::InsertWFFile(const char *endpoint, const char *soap_action, ns1__InsertWFFile *ns1__InsertWFFile_, ns1__InsertWFFileResponse *ns1__InsertWFFileResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__InsertWFFile soap_tmp___ns1__InsertWFFile;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/InsertWFFileRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__InsertWFFile.ns1__InsertWFFile_ = ns1__InsertWFFile_;
	soap_serializeheader(soap);
	soap_serialize___ns1__InsertWFFile(soap, &soap_tmp___ns1__InsertWFFile);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__InsertWFFile(soap, &soap_tmp___ns1__InsertWFFile, "-ns1:InsertWFFile", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__InsertWFFile(soap, &soap_tmp___ns1__InsertWFFile, "-ns1:InsertWFFile", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__InsertWFFileResponse_)
		return soap_closesock(soap);
	ns1__InsertWFFileResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__InsertWFFileResponse_->soap_get(soap, "ns1:InsertWFFileResponse", "ns1:InsertWFFileResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::DeleteWFFileById(const char *endpoint, const char *soap_action, ns1__DeleteWFFileById *ns1__DeleteWFFileById_, ns1__DeleteWFFileByIdResponse *ns1__DeleteWFFileByIdResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__DeleteWFFileById soap_tmp___ns1__DeleteWFFileById;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/DeleteWFFileByIdRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DeleteWFFileById.ns1__DeleteWFFileById_ = ns1__DeleteWFFileById_;
	soap_serializeheader(soap);
	soap_serialize___ns1__DeleteWFFileById(soap, &soap_tmp___ns1__DeleteWFFileById);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DeleteWFFileById(soap, &soap_tmp___ns1__DeleteWFFileById, "-ns1:DeleteWFFileById", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DeleteWFFileById(soap, &soap_tmp___ns1__DeleteWFFileById, "-ns1:DeleteWFFileById", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DeleteWFFileByIdResponse_)
		return soap_closesock(soap);
	ns1__DeleteWFFileByIdResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DeleteWFFileByIdResponse_->soap_get(soap, "ns1:DeleteWFFileByIdResponse", "ns1:DeleteWFFileByIdResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::DeleteWFFileByCode(const char *endpoint, const char *soap_action, ns1__DeleteWFFileByCode *ns1__DeleteWFFileByCode_, ns1__DeleteWFFileByCodeResponse *ns1__DeleteWFFileByCodeResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__DeleteWFFileByCode soap_tmp___ns1__DeleteWFFileByCode;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/DeleteWFFileByCodeRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DeleteWFFileByCode.ns1__DeleteWFFileByCode_ = ns1__DeleteWFFileByCode_;
	soap_serializeheader(soap);
	soap_serialize___ns1__DeleteWFFileByCode(soap, &soap_tmp___ns1__DeleteWFFileByCode);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DeleteWFFileByCode(soap, &soap_tmp___ns1__DeleteWFFileByCode, "-ns1:DeleteWFFileByCode", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DeleteWFFileByCode(soap, &soap_tmp___ns1__DeleteWFFileByCode, "-ns1:DeleteWFFileByCode", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DeleteWFFileByCodeResponse_)
		return soap_closesock(soap);
	ns1__DeleteWFFileByCodeResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DeleteWFFileByCodeResponse_->soap_get(soap, "ns1:DeleteWFFileByCodeResponse", "ns1:DeleteWFFileByCodeResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::TestLettura(const char *endpoint, const char *soap_action, ns1__TestLettura *ns1__TestLettura_, ns1__TestLetturaResponse *ns1__TestLetturaResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__TestLettura soap_tmp___ns1__TestLettura;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/TestLetturaRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__TestLettura.ns1__TestLettura_ = ns1__TestLettura_;
	soap_serializeheader(soap);
	soap_serialize___ns1__TestLettura(soap, &soap_tmp___ns1__TestLettura);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__TestLettura(soap, &soap_tmp___ns1__TestLettura, "-ns1:TestLettura", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__TestLettura(soap, &soap_tmp___ns1__TestLettura, "-ns1:TestLettura", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__TestLetturaResponse_)
		return soap_closesock(soap);
	ns1__TestLetturaResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__TestLetturaResponse_->soap_get(soap, "ns1:TestLetturaResponse", "ns1:TestLetturaResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::TestScritturaLettura(const char *endpoint, const char *soap_action, ns1__TestScritturaLettura *ns1__TestScritturaLettura_, ns1__TestScritturaLetturaResponse *ns1__TestScritturaLetturaResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__TestScritturaLettura soap_tmp___ns1__TestScritturaLettura;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/TestScritturaLetturaRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__TestScritturaLettura.ns1__TestScritturaLettura_ = ns1__TestScritturaLettura_;
	soap_serializeheader(soap);
	soap_serialize___ns1__TestScritturaLettura(soap, &soap_tmp___ns1__TestScritturaLettura);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__TestScritturaLettura(soap, &soap_tmp___ns1__TestScritturaLettura, "-ns1:TestScritturaLettura", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__TestScritturaLettura(soap, &soap_tmp___ns1__TestScritturaLettura, "-ns1:TestScritturaLettura", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__TestScritturaLetturaResponse_)
		return soap_closesock(soap);
	ns1__TestScritturaLetturaResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__TestScritturaLetturaResponse_->soap_get(soap, "ns1:TestScritturaLetturaResponse", "ns1:TestScritturaLetturaResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::SaveChars(const char *endpoint, const char *soap_action, ns1__SaveChars *ns1__SaveChars_, ns1__SaveCharsResponse *ns1__SaveCharsResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__SaveChars soap_tmp___ns1__SaveChars;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/SaveCharsRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__SaveChars.ns1__SaveChars_ = ns1__SaveChars_;
	soap_serializeheader(soap);
	soap_serialize___ns1__SaveChars(soap, &soap_tmp___ns1__SaveChars);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__SaveChars(soap, &soap_tmp___ns1__SaveChars, "-ns1:SaveChars", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__SaveChars(soap, &soap_tmp___ns1__SaveChars, "-ns1:SaveChars", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__SaveCharsResponse_)
		return soap_closesock(soap);
	ns1__SaveCharsResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__SaveCharsResponse_->soap_get(soap, "ns1:SaveCharsResponse", "ns1:SaveCharsResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::AddUser(const char *endpoint, const char *soap_action, ns1__AddUser *ns1__AddUser_, ns1__AddUserResponse *ns1__AddUserResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__AddUser soap_tmp___ns1__AddUser;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/AddUserRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__AddUser.ns1__AddUser_ = ns1__AddUser_;
	soap_serializeheader(soap);
	soap_serialize___ns1__AddUser(soap, &soap_tmp___ns1__AddUser);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__AddUser(soap, &soap_tmp___ns1__AddUser, "-ns1:AddUser", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__AddUser(soap, &soap_tmp___ns1__AddUser, "-ns1:AddUser", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__AddUserResponse_)
		return soap_closesock(soap);
	ns1__AddUserResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__AddUserResponse_->soap_get(soap, "ns1:AddUserResponse", "ns1:AddUserResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::ModUser(const char *endpoint, const char *soap_action, ns1__ModUser *ns1__ModUser_, ns1__ModUserResponse *ns1__ModUserResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__ModUser soap_tmp___ns1__ModUser;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/ModUserRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ModUser.ns1__ModUser_ = ns1__ModUser_;
	soap_serializeheader(soap);
	soap_serialize___ns1__ModUser(soap, &soap_tmp___ns1__ModUser);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ModUser(soap, &soap_tmp___ns1__ModUser, "-ns1:ModUser", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ModUser(soap, &soap_tmp___ns1__ModUser, "-ns1:ModUser", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ModUserResponse_)
		return soap_closesock(soap);
	ns1__ModUserResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ModUserResponse_->soap_get(soap, "ns1:ModUserResponse", "ns1:ModUserResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::VerifyExpression(const char *endpoint, const char *soap_action, ns1__VerifyExpression *ns1__VerifyExpression_, ns1__VerifyExpressionResponse *ns1__VerifyExpressionResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__VerifyExpression soap_tmp___ns1__VerifyExpression;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/VerifyExpressionRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__VerifyExpression.ns1__VerifyExpression_ = ns1__VerifyExpression_;
	soap_serializeheader(soap);
	soap_serialize___ns1__VerifyExpression(soap, &soap_tmp___ns1__VerifyExpression);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__VerifyExpression(soap, &soap_tmp___ns1__VerifyExpression, "-ns1:VerifyExpression", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__VerifyExpression(soap, &soap_tmp___ns1__VerifyExpression, "-ns1:VerifyExpression", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__VerifyExpressionResponse_)
		return soap_closesock(soap);
	ns1__VerifyExpressionResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__VerifyExpressionResponse_->soap_get(soap, "ns1:VerifyExpressionResponse", "ns1:VerifyExpressionResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::AddExpression(const char *endpoint, const char *soap_action, ns1__AddExpression *ns1__AddExpression_, ns1__AddExpressionResponse *ns1__AddExpressionResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__AddExpression soap_tmp___ns1__AddExpression;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/AddExpressionRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__AddExpression.ns1__AddExpression_ = ns1__AddExpression_;
	soap_serializeheader(soap);
	soap_serialize___ns1__AddExpression(soap, &soap_tmp___ns1__AddExpression);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__AddExpression(soap, &soap_tmp___ns1__AddExpression, "-ns1:AddExpression", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__AddExpression(soap, &soap_tmp___ns1__AddExpression, "-ns1:AddExpression", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__AddExpressionResponse_)
		return soap_closesock(soap);
	ns1__AddExpressionResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__AddExpressionResponse_->soap_get(soap, "ns1:AddExpressionResponse", "ns1:AddExpressionResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::ModExpression(const char *endpoint, const char *soap_action, ns1__ModExpression *ns1__ModExpression_, ns1__ModExpressionResponse *ns1__ModExpressionResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__ModExpression soap_tmp___ns1__ModExpression;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/ModExpressionRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ModExpression.ns1__ModExpression_ = ns1__ModExpression_;
	soap_serializeheader(soap);
	soap_serialize___ns1__ModExpression(soap, &soap_tmp___ns1__ModExpression);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ModExpression(soap, &soap_tmp___ns1__ModExpression, "-ns1:ModExpression", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ModExpression(soap, &soap_tmp___ns1__ModExpression, "-ns1:ModExpression", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ModExpressionResponse_)
		return soap_closesock(soap);
	ns1__ModExpressionResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ModExpressionResponse_->soap_get(soap, "ns1:ModExpressionResponse", "ns1:ModExpressionResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::DelExpression(const char *endpoint, const char *soap_action, ns1__DelExpression *ns1__DelExpression_, ns1__DelExpressionResponse *ns1__DelExpressionResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__DelExpression soap_tmp___ns1__DelExpression;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/DelExpressionRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DelExpression.ns1__DelExpression_ = ns1__DelExpression_;
	soap_serializeheader(soap);
	soap_serialize___ns1__DelExpression(soap, &soap_tmp___ns1__DelExpression);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DelExpression(soap, &soap_tmp___ns1__DelExpression, "-ns1:DelExpression", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DelExpression(soap, &soap_tmp___ns1__DelExpression, "-ns1:DelExpression", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DelExpressionResponse_)
		return soap_closesock(soap);
	ns1__DelExpressionResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DelExpressionResponse_->soap_get(soap, "ns1:DelExpressionResponse", "ns1:DelExpressionResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetExpression(const char *endpoint, const char *soap_action, ns1__GetExpression *ns1__GetExpression_, ns1__GetExpressionResponse *ns1__GetExpressionResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetExpression soap_tmp___ns1__GetExpression;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetExpressionRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetExpression.ns1__GetExpression_ = ns1__GetExpression_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetExpression(soap, &soap_tmp___ns1__GetExpression);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetExpression(soap, &soap_tmp___ns1__GetExpression, "-ns1:GetExpression", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetExpression(soap, &soap_tmp___ns1__GetExpression, "-ns1:GetExpression", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetExpressionResponse_)
		return soap_closesock(soap);
	ns1__GetExpressionResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetExpressionResponse_->soap_get(soap, "ns1:GetExpressionResponse", "ns1:GetExpressionResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetAllContainerExpressions(const char *endpoint, const char *soap_action, ns1__GetAllContainerExpressions *ns1__GetAllContainerExpressions_, ns1__GetAllContainerExpressionsResponse *ns1__GetAllContainerExpressionsResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetAllContainerExpressions soap_tmp___ns1__GetAllContainerExpressions;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetAllContainerExpressionsRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetAllContainerExpressions.ns1__GetAllContainerExpressions_ = ns1__GetAllContainerExpressions_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetAllContainerExpressions(soap, &soap_tmp___ns1__GetAllContainerExpressions);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetAllContainerExpressions(soap, &soap_tmp___ns1__GetAllContainerExpressions, "-ns1:GetAllContainerExpressions", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetAllContainerExpressions(soap, &soap_tmp___ns1__GetAllContainerExpressions, "-ns1:GetAllContainerExpressions", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetAllContainerExpressionsResponse_)
		return soap_closesock(soap);
	ns1__GetAllContainerExpressionsResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetAllContainerExpressionsResponse_->soap_get(soap, "ns1:GetAllContainerExpressionsResponse", "ns1:GetAllContainerExpressionsResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetExpressionValue(const char *endpoint, const char *soap_action, ns1__GetExpressionValue *ns1__GetExpressionValue_, ns1__GetExpressionValueResponse *ns1__GetExpressionValueResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetExpressionValue soap_tmp___ns1__GetExpressionValue;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetExpressionValueRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetExpressionValue.ns1__GetExpressionValue_ = ns1__GetExpressionValue_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetExpressionValue(soap, &soap_tmp___ns1__GetExpressionValue);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetExpressionValue(soap, &soap_tmp___ns1__GetExpressionValue, "-ns1:GetExpressionValue", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetExpressionValue(soap, &soap_tmp___ns1__GetExpressionValue, "-ns1:GetExpressionValue", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetExpressionValueResponse_)
		return soap_closesock(soap);
	ns1__GetExpressionValueResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetExpressionValueResponse_->soap_get(soap, "ns1:GetExpressionValueResponse", "ns1:GetExpressionValueResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::SetTmpTPDownloadPath(const char *endpoint, const char *soap_action, ns1__SetTmpTPDownloadPath *ns1__SetTmpTPDownloadPath_, ns1__SetTmpTPDownloadPathResponse *ns1__SetTmpTPDownloadPathResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__SetTmpTPDownloadPath soap_tmp___ns1__SetTmpTPDownloadPath;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/SetTmpTPDownloadPathRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__SetTmpTPDownloadPath.ns1__SetTmpTPDownloadPath_ = ns1__SetTmpTPDownloadPath_;
	soap_serializeheader(soap);
	soap_serialize___ns1__SetTmpTPDownloadPath(soap, &soap_tmp___ns1__SetTmpTPDownloadPath);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__SetTmpTPDownloadPath(soap, &soap_tmp___ns1__SetTmpTPDownloadPath, "-ns1:SetTmpTPDownloadPath", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__SetTmpTPDownloadPath(soap, &soap_tmp___ns1__SetTmpTPDownloadPath, "-ns1:SetTmpTPDownloadPath", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__SetTmpTPDownloadPathResponse_)
		return soap_closesock(soap);
	ns1__SetTmpTPDownloadPathResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__SetTmpTPDownloadPathResponse_->soap_get(soap, "ns1:SetTmpTPDownloadPathResponse", "ns1:SetTmpTPDownloadPathResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::SetTmpTPUploadPath(const char *endpoint, const char *soap_action, ns1__SetTmpTPUploadPath *ns1__SetTmpTPUploadPath_, ns1__SetTmpTPUploadPathResponse *ns1__SetTmpTPUploadPathResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__SetTmpTPUploadPath soap_tmp___ns1__SetTmpTPUploadPath;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/SetTmpTPUploadPathRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__SetTmpTPUploadPath.ns1__SetTmpTPUploadPath_ = ns1__SetTmpTPUploadPath_;
	soap_serializeheader(soap);
	soap_serialize___ns1__SetTmpTPUploadPath(soap, &soap_tmp___ns1__SetTmpTPUploadPath);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__SetTmpTPUploadPath(soap, &soap_tmp___ns1__SetTmpTPUploadPath, "-ns1:SetTmpTPUploadPath", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__SetTmpTPUploadPath(soap, &soap_tmp___ns1__SetTmpTPUploadPath, "-ns1:SetTmpTPUploadPath", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__SetTmpTPUploadPathResponse_)
		return soap_closesock(soap);
	ns1__SetTmpTPUploadPathResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__SetTmpTPUploadPathResponse_->soap_get(soap, "ns1:SetTmpTPUploadPathResponse", "ns1:SetTmpTPUploadPathResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::UploadTPEndFile(const char *endpoint, const char *soap_action, ns1__UploadTPEndFile *ns1__UploadTPEndFile_, ns1__UploadTPEndFileResponse *ns1__UploadTPEndFileResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__UploadTPEndFile soap_tmp___ns1__UploadTPEndFile;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/UploadTPEndFileRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__UploadTPEndFile.ns1__UploadTPEndFile_ = ns1__UploadTPEndFile_;
	soap_serializeheader(soap);
	soap_serialize___ns1__UploadTPEndFile(soap, &soap_tmp___ns1__UploadTPEndFile);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UploadTPEndFile(soap, &soap_tmp___ns1__UploadTPEndFile, "-ns1:UploadTPEndFile", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UploadTPEndFile(soap, &soap_tmp___ns1__UploadTPEndFile, "-ns1:UploadTPEndFile", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UploadTPEndFileResponse_)
		return soap_closesock(soap);
	ns1__UploadTPEndFileResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UploadTPEndFileResponse_->soap_get(soap, "ns1:UploadTPEndFileResponse", "ns1:UploadTPEndFileResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::UploadTPSendChunk(const char *endpoint, const char *soap_action, ns1__UploadTPSendChunk *ns1__UploadTPSendChunk_, ns1__UploadTPSendChunkResponse *ns1__UploadTPSendChunkResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__UploadTPSendChunk soap_tmp___ns1__UploadTPSendChunk;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/UploadTPSendChunkRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__UploadTPSendChunk.ns1__UploadTPSendChunk_ = ns1__UploadTPSendChunk_;
	soap_serializeheader(soap);
	soap_serialize___ns1__UploadTPSendChunk(soap, &soap_tmp___ns1__UploadTPSendChunk);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UploadTPSendChunk(soap, &soap_tmp___ns1__UploadTPSendChunk, "-ns1:UploadTPSendChunk", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UploadTPSendChunk(soap, &soap_tmp___ns1__UploadTPSendChunk, "-ns1:UploadTPSendChunk", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UploadTPSendChunkResponse_)
		return soap_closesock(soap);
	ns1__UploadTPSendChunkResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UploadTPSendChunkResponse_->soap_get(soap, "ns1:UploadTPSendChunkResponse", "ns1:UploadTPSendChunkResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::DownloadTPEndFile(const char *endpoint, const char *soap_action, ns1__DownloadTPEndFile *ns1__DownloadTPEndFile_, ns1__DownloadTPEndFileResponse *ns1__DownloadTPEndFileResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__DownloadTPEndFile soap_tmp___ns1__DownloadTPEndFile;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/DownloadTPEndFileRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DownloadTPEndFile.ns1__DownloadTPEndFile_ = ns1__DownloadTPEndFile_;
	soap_serializeheader(soap);
	soap_serialize___ns1__DownloadTPEndFile(soap, &soap_tmp___ns1__DownloadTPEndFile);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DownloadTPEndFile(soap, &soap_tmp___ns1__DownloadTPEndFile, "-ns1:DownloadTPEndFile", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DownloadTPEndFile(soap, &soap_tmp___ns1__DownloadTPEndFile, "-ns1:DownloadTPEndFile", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DownloadTPEndFileResponse_)
		return soap_closesock(soap);
	ns1__DownloadTPEndFileResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DownloadTPEndFileResponse_->soap_get(soap, "ns1:DownloadTPEndFileResponse", "ns1:DownloadTPEndFileResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::DownloadTPFile(const char *endpoint, const char *soap_action, ns1__DownloadTPFile *ns1__DownloadTPFile_, ns1__DownloadTPFileResponse *ns1__DownloadTPFileResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__DownloadTPFile soap_tmp___ns1__DownloadTPFile;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/DownloadTPFileRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DownloadTPFile.ns1__DownloadTPFile_ = ns1__DownloadTPFile_;
	soap_serializeheader(soap);
	soap_serialize___ns1__DownloadTPFile(soap, &soap_tmp___ns1__DownloadTPFile);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DownloadTPFile(soap, &soap_tmp___ns1__DownloadTPFile, "-ns1:DownloadTPFile", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DownloadTPFile(soap, &soap_tmp___ns1__DownloadTPFile, "-ns1:DownloadTPFile", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DownloadTPFileResponse_)
		return soap_closesock(soap);
	ns1__DownloadTPFileResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DownloadTPFileResponse_->soap_get(soap, "ns1:DownloadTPFileResponse", "ns1:DownloadTPFileResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetDataTPFileDetail(const char *endpoint, const char *soap_action, ns1__GetDataTPFileDetail *ns1__GetDataTPFileDetail_, ns1__GetDataTPFileDetailResponse *ns1__GetDataTPFileDetailResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetDataTPFileDetail soap_tmp___ns1__GetDataTPFileDetail;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetDataTPFileDetailRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetDataTPFileDetail.ns1__GetDataTPFileDetail_ = ns1__GetDataTPFileDetail_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetDataTPFileDetail(soap, &soap_tmp___ns1__GetDataTPFileDetail);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetDataTPFileDetail(soap, &soap_tmp___ns1__GetDataTPFileDetail, "-ns1:GetDataTPFileDetail", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetDataTPFileDetail(soap, &soap_tmp___ns1__GetDataTPFileDetail, "-ns1:GetDataTPFileDetail", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetDataTPFileDetailResponse_)
		return soap_closesock(soap);
	ns1__GetDataTPFileDetailResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetDataTPFileDetailResponse_->soap_get(soap, "ns1:GetDataTPFileDetailResponse", "ns1:GetDataTPFileDetailResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetDataTPFileList(const char *endpoint, const char *soap_action, ns1__GetDataTPFileList *ns1__GetDataTPFileList_, ns1__GetDataTPFileListResponse *ns1__GetDataTPFileListResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetDataTPFileList soap_tmp___ns1__GetDataTPFileList;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetDataTPFileListRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetDataTPFileList.ns1__GetDataTPFileList_ = ns1__GetDataTPFileList_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetDataTPFileList(soap, &soap_tmp___ns1__GetDataTPFileList);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetDataTPFileList(soap, &soap_tmp___ns1__GetDataTPFileList, "-ns1:GetDataTPFileList", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetDataTPFileList(soap, &soap_tmp___ns1__GetDataTPFileList, "-ns1:GetDataTPFileList", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetDataTPFileListResponse_)
		return soap_closesock(soap);
	ns1__GetDataTPFileListResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetDataTPFileListResponse_->soap_get(soap, "ns1:GetDataTPFileListResponse", "ns1:GetDataTPFileListResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::InsertTPFile(const char *endpoint, const char *soap_action, ns1__InsertTPFile *ns1__InsertTPFile_, ns1__InsertTPFileResponse *ns1__InsertTPFileResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__InsertTPFile soap_tmp___ns1__InsertTPFile;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/InsertTPFileRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__InsertTPFile.ns1__InsertTPFile_ = ns1__InsertTPFile_;
	soap_serializeheader(soap);
	soap_serialize___ns1__InsertTPFile(soap, &soap_tmp___ns1__InsertTPFile);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__InsertTPFile(soap, &soap_tmp___ns1__InsertTPFile, "-ns1:InsertTPFile", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__InsertTPFile(soap, &soap_tmp___ns1__InsertTPFile, "-ns1:InsertTPFile", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__InsertTPFileResponse_)
		return soap_closesock(soap);
	ns1__InsertTPFileResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__InsertTPFileResponse_->soap_get(soap, "ns1:InsertTPFileResponse", "ns1:InsertTPFileResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::DeleteTPFileById(const char *endpoint, const char *soap_action, ns1__DeleteTPFileById *ns1__DeleteTPFileById_, ns1__DeleteTPFileByIdResponse *ns1__DeleteTPFileByIdResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__DeleteTPFileById soap_tmp___ns1__DeleteTPFileById;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/DeleteTPFileByIdRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DeleteTPFileById.ns1__DeleteTPFileById_ = ns1__DeleteTPFileById_;
	soap_serializeheader(soap);
	soap_serialize___ns1__DeleteTPFileById(soap, &soap_tmp___ns1__DeleteTPFileById);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DeleteTPFileById(soap, &soap_tmp___ns1__DeleteTPFileById, "-ns1:DeleteTPFileById", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DeleteTPFileById(soap, &soap_tmp___ns1__DeleteTPFileById, "-ns1:DeleteTPFileById", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DeleteTPFileByIdResponse_)
		return soap_closesock(soap);
	ns1__DeleteTPFileByIdResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DeleteTPFileByIdResponse_->soap_get(soap, "ns1:DeleteTPFileByIdResponse", "ns1:DeleteTPFileByIdResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::DeleteTPFileByCode(const char *endpoint, const char *soap_action, ns1__DeleteTPFileByCode *ns1__DeleteTPFileByCode_, ns1__DeleteTPFileByCodeResponse *ns1__DeleteTPFileByCodeResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__DeleteTPFileByCode soap_tmp___ns1__DeleteTPFileByCode;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/DeleteTPFileByCodeRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DeleteTPFileByCode.ns1__DeleteTPFileByCode_ = ns1__DeleteTPFileByCode_;
	soap_serializeheader(soap);
	soap_serialize___ns1__DeleteTPFileByCode(soap, &soap_tmp___ns1__DeleteTPFileByCode);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DeleteTPFileByCode(soap, &soap_tmp___ns1__DeleteTPFileByCode, "-ns1:DeleteTPFileByCode", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DeleteTPFileByCode(soap, &soap_tmp___ns1__DeleteTPFileByCode, "-ns1:DeleteTPFileByCode", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DeleteTPFileByCodeResponse_)
		return soap_closesock(soap);
	ns1__DeleteTPFileByCodeResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DeleteTPFileByCodeResponse_->soap_get(soap, "ns1:DeleteTPFileByCodeResponse", "ns1:DeleteTPFileByCodeResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetDataTPFileListByUsername(const char *endpoint, const char *soap_action, ns1__GetDataTPFileListByUsername *ns1__GetDataTPFileListByUsername_, ns1__GetDataTPFileListByUsernameResponse *ns1__GetDataTPFileListByUsernameResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetDataTPFileListByUsername soap_tmp___ns1__GetDataTPFileListByUsername;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetDataTPFileListByUsernameRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetDataTPFileListByUsername.ns1__GetDataTPFileListByUsername_ = ns1__GetDataTPFileListByUsername_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetDataTPFileListByUsername(soap, &soap_tmp___ns1__GetDataTPFileListByUsername);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetDataTPFileListByUsername(soap, &soap_tmp___ns1__GetDataTPFileListByUsername, "-ns1:GetDataTPFileListByUsername", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetDataTPFileListByUsername(soap, &soap_tmp___ns1__GetDataTPFileListByUsername, "-ns1:GetDataTPFileListByUsername", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetDataTPFileListByUsernameResponse_)
		return soap_closesock(soap);
	ns1__GetDataTPFileListByUsernameResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetDataTPFileListByUsernameResponse_->soap_get(soap, "ns1:GetDataTPFileListByUsernameResponse", "ns1:GetDataTPFileListByUsernameResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetDataTPFileListByContainer(const char *endpoint, const char *soap_action, ns1__GetDataTPFileListByContainer *ns1__GetDataTPFileListByContainer_, ns1__GetDataTPFileListByContainerResponse *ns1__GetDataTPFileListByContainerResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetDataTPFileListByContainer soap_tmp___ns1__GetDataTPFileListByContainer;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetDataTPFileListByContainerRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetDataTPFileListByContainer.ns1__GetDataTPFileListByContainer_ = ns1__GetDataTPFileListByContainer_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetDataTPFileListByContainer(soap, &soap_tmp___ns1__GetDataTPFileListByContainer);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetDataTPFileListByContainer(soap, &soap_tmp___ns1__GetDataTPFileListByContainer, "-ns1:GetDataTPFileListByContainer", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetDataTPFileListByContainer(soap, &soap_tmp___ns1__GetDataTPFileListByContainer, "-ns1:GetDataTPFileListByContainer", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetDataTPFileListByContainerResponse_)
		return soap_closesock(soap);
	ns1__GetDataTPFileListByContainerResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetDataTPFileListByContainerResponse_->soap_get(soap, "ns1:GetDataTPFileListByContainerResponse", "ns1:GetDataTPFileListByContainerResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetDataTPFileListByDocument(const char *endpoint, const char *soap_action, ns1__GetDataTPFileListByDocument *ns1__GetDataTPFileListByDocument_, ns1__GetDataTPFileListByDocumentResponse *ns1__GetDataTPFileListByDocumentResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetDataTPFileListByDocument soap_tmp___ns1__GetDataTPFileListByDocument;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetDataTPFileListByDocumentRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetDataTPFileListByDocument.ns1__GetDataTPFileListByDocument_ = ns1__GetDataTPFileListByDocument_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetDataTPFileListByDocument(soap, &soap_tmp___ns1__GetDataTPFileListByDocument);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetDataTPFileListByDocument(soap, &soap_tmp___ns1__GetDataTPFileListByDocument, "-ns1:GetDataTPFileListByDocument", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetDataTPFileListByDocument(soap, &soap_tmp___ns1__GetDataTPFileListByDocument, "-ns1:GetDataTPFileListByDocument", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetDataTPFileListByDocumentResponse_)
		return soap_closesock(soap);
	ns1__GetDataTPFileListByDocumentResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetDataTPFileListByDocumentResponse_->soap_get(soap, "ns1:GetDataTPFileListByDocumentResponse", "ns1:GetDataTPFileListByDocumentResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetDataTPFileListByName(const char *endpoint, const char *soap_action, ns1__GetDataTPFileListByName *ns1__GetDataTPFileListByName_, ns1__GetDataTPFileListByNameResponse *ns1__GetDataTPFileListByNameResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetDataTPFileListByName soap_tmp___ns1__GetDataTPFileListByName;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetDataTPFileListByNameRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetDataTPFileListByName.ns1__GetDataTPFileListByName_ = ns1__GetDataTPFileListByName_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetDataTPFileListByName(soap, &soap_tmp___ns1__GetDataTPFileListByName);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetDataTPFileListByName(soap, &soap_tmp___ns1__GetDataTPFileListByName, "-ns1:GetDataTPFileListByName", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetDataTPFileListByName(soap, &soap_tmp___ns1__GetDataTPFileListByName, "-ns1:GetDataTPFileListByName", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetDataTPFileListByNameResponse_)
		return soap_closesock(soap);
	ns1__GetDataTPFileListByNameResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetDataTPFileListByNameResponse_->soap_get(soap, "ns1:GetDataTPFileListByNameResponse", "ns1:GetDataTPFileListByNameResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetDefaultObjActList(const char *endpoint, const char *soap_action, ns1__GetDefaultObjActList *ns1__GetDefaultObjActList_, ns1__GetDefaultObjActListResponse *ns1__GetDefaultObjActListResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetDefaultObjActList soap_tmp___ns1__GetDefaultObjActList;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetDefaultObjActListRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetDefaultObjActList.ns1__GetDefaultObjActList_ = ns1__GetDefaultObjActList_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetDefaultObjActList(soap, &soap_tmp___ns1__GetDefaultObjActList);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetDefaultObjActList(soap, &soap_tmp___ns1__GetDefaultObjActList, "-ns1:GetDefaultObjActList", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetDefaultObjActList(soap, &soap_tmp___ns1__GetDefaultObjActList, "-ns1:GetDefaultObjActList", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetDefaultObjActListResponse_)
		return soap_closesock(soap);
	ns1__GetDefaultObjActListResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetDefaultObjActListResponse_->soap_get(soap, "ns1:GetDefaultObjActListResponse", "ns1:GetDefaultObjActListResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::EndPermissionSettings(const char *endpoint, const char *soap_action, ns1__EndPermissionSettings *ns1__EndPermissionSettings_, ns1__EndPermissionSettingsResponse *ns1__EndPermissionSettingsResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__EndPermissionSettings soap_tmp___ns1__EndPermissionSettings;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/EndPermissionSettingsRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__EndPermissionSettings.ns1__EndPermissionSettings_ = ns1__EndPermissionSettings_;
	soap_serializeheader(soap);
	soap_serialize___ns1__EndPermissionSettings(soap, &soap_tmp___ns1__EndPermissionSettings);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__EndPermissionSettings(soap, &soap_tmp___ns1__EndPermissionSettings, "-ns1:EndPermissionSettings", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__EndPermissionSettings(soap, &soap_tmp___ns1__EndPermissionSettings, "-ns1:EndPermissionSettings", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__EndPermissionSettingsResponse_)
		return soap_closesock(soap);
	ns1__EndPermissionSettingsResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__EndPermissionSettingsResponse_->soap_get(soap, "ns1:EndPermissionSettingsResponse", "ns1:EndPermissionSettingsResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::DownloadGetChunkWA(const char *endpoint, const char *soap_action, ns1__DownloadGetChunkWA *ns1__DownloadGetChunkWA_, ns1__DownloadGetChunkWAResponse *ns1__DownloadGetChunkWAResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__DownloadGetChunkWA soap_tmp___ns1__DownloadGetChunkWA;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/DownloadGetChunkWARequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DownloadGetChunkWA.ns1__DownloadGetChunkWA_ = ns1__DownloadGetChunkWA_;
	soap_serializeheader(soap);
	soap_serialize___ns1__DownloadGetChunkWA(soap, &soap_tmp___ns1__DownloadGetChunkWA);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DownloadGetChunkWA(soap, &soap_tmp___ns1__DownloadGetChunkWA, "-ns1:DownloadGetChunkWA", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DownloadGetChunkWA(soap, &soap_tmp___ns1__DownloadGetChunkWA, "-ns1:DownloadGetChunkWA", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DownloadGetChunkWAResponse_)
		return soap_closesock(soap);
	ns1__DownloadGetChunkWAResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DownloadGetChunkWAResponse_->soap_get(soap, "ns1:DownloadGetChunkWAResponse", "ns1:DownloadGetChunkWAResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetSchedulerTaskByTaskTypeId(const char *endpoint, const char *soap_action, ns1__GetSchedulerTaskByTaskTypeId *ns1__GetSchedulerTaskByTaskTypeId_, ns1__GetSchedulerTaskByTaskTypeIdResponse *ns1__GetSchedulerTaskByTaskTypeIdResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetSchedulerTaskByTaskTypeId soap_tmp___ns1__GetSchedulerTaskByTaskTypeId;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetSchedulerTaskByTaskTypeIdRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetSchedulerTaskByTaskTypeId.ns1__GetSchedulerTaskByTaskTypeId_ = ns1__GetSchedulerTaskByTaskTypeId_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetSchedulerTaskByTaskTypeId(soap, &soap_tmp___ns1__GetSchedulerTaskByTaskTypeId);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetSchedulerTaskByTaskTypeId(soap, &soap_tmp___ns1__GetSchedulerTaskByTaskTypeId, "-ns1:GetSchedulerTaskByTaskTypeId", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetSchedulerTaskByTaskTypeId(soap, &soap_tmp___ns1__GetSchedulerTaskByTaskTypeId, "-ns1:GetSchedulerTaskByTaskTypeId", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetSchedulerTaskByTaskTypeIdResponse_)
		return soap_closesock(soap);
	ns1__GetSchedulerTaskByTaskTypeIdResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetSchedulerTaskByTaskTypeIdResponse_->soap_get(soap, "ns1:GetSchedulerTaskByTaskTypeIdResponse", "ns1:GetSchedulerTaskByTaskTypeIdResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetAllFilter(const char *endpoint, const char *soap_action, ns1__GetAllFilter *ns1__GetAllFilter_, ns1__GetAllFilterResponse *ns1__GetAllFilterResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetAllFilter soap_tmp___ns1__GetAllFilter;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetAllFilterRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetAllFilter.ns1__GetAllFilter_ = ns1__GetAllFilter_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetAllFilter(soap, &soap_tmp___ns1__GetAllFilter);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetAllFilter(soap, &soap_tmp___ns1__GetAllFilter, "-ns1:GetAllFilter", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetAllFilter(soap, &soap_tmp___ns1__GetAllFilter, "-ns1:GetAllFilter", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetAllFilterResponse_)
		return soap_closesock(soap);
	ns1__GetAllFilterResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetAllFilterResponse_->soap_get(soap, "ns1:GetAllFilterResponse", "ns1:GetAllFilterResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::CanAddDigitalSignature(const char *endpoint, const char *soap_action, ns1__CanAddDigitalSignature *ns1__CanAddDigitalSignature_, ns1__CanAddDigitalSignatureResponse *ns1__CanAddDigitalSignatureResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__CanAddDigitalSignature soap_tmp___ns1__CanAddDigitalSignature;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/CanAddDigitalSignatureRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CanAddDigitalSignature.ns1__CanAddDigitalSignature_ = ns1__CanAddDigitalSignature_;
	soap_serializeheader(soap);
	soap_serialize___ns1__CanAddDigitalSignature(soap, &soap_tmp___ns1__CanAddDigitalSignature);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CanAddDigitalSignature(soap, &soap_tmp___ns1__CanAddDigitalSignature, "-ns1:CanAddDigitalSignature", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CanAddDigitalSignature(soap, &soap_tmp___ns1__CanAddDigitalSignature, "-ns1:CanAddDigitalSignature", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CanAddDigitalSignatureResponse_)
		return soap_closesock(soap);
	ns1__CanAddDigitalSignatureResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CanAddDigitalSignatureResponse_->soap_get(soap, "ns1:CanAddDigitalSignatureResponse", "ns1:CanAddDigitalSignatureResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetSDKTasks(const char *endpoint, const char *soap_action, ns1__GetSDKTasks *ns1__GetSDKTasks_, ns1__GetSDKTasksResponse *ns1__GetSDKTasksResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetSDKTasks soap_tmp___ns1__GetSDKTasks;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetSDKTasksRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetSDKTasks.ns1__GetSDKTasks_ = ns1__GetSDKTasks_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetSDKTasks(soap, &soap_tmp___ns1__GetSDKTasks);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetSDKTasks(soap, &soap_tmp___ns1__GetSDKTasks, "-ns1:GetSDKTasks", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetSDKTasks(soap, &soap_tmp___ns1__GetSDKTasks, "-ns1:GetSDKTasks", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetSDKTasksResponse_)
		return soap_closesock(soap);
	ns1__GetSDKTasksResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetSDKTasksResponse_->soap_get(soap, "ns1:GetSDKTasksResponse", "ns1:GetSDKTasksResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetSDKTaskWatchFolder(const char *endpoint, const char *soap_action, ns1__GetSDKTaskWatchFolder *ns1__GetSDKTaskWatchFolder_, ns1__GetSDKTaskWatchFolderResponse *ns1__GetSDKTaskWatchFolderResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetSDKTaskWatchFolder soap_tmp___ns1__GetSDKTaskWatchFolder;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetSDKTaskWatchFolderRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetSDKTaskWatchFolder.ns1__GetSDKTaskWatchFolder_ = ns1__GetSDKTaskWatchFolder_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetSDKTaskWatchFolder(soap, &soap_tmp___ns1__GetSDKTaskWatchFolder);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetSDKTaskWatchFolder(soap, &soap_tmp___ns1__GetSDKTaskWatchFolder, "-ns1:GetSDKTaskWatchFolder", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetSDKTaskWatchFolder(soap, &soap_tmp___ns1__GetSDKTaskWatchFolder, "-ns1:GetSDKTaskWatchFolder", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetSDKTaskWatchFolderResponse_)
		return soap_closesock(soap);
	ns1__GetSDKTaskWatchFolderResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetSDKTaskWatchFolderResponse_->soap_get(soap, "ns1:GetSDKTaskWatchFolderResponse", "ns1:GetSDKTaskWatchFolderResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetSDKRules(const char *endpoint, const char *soap_action, ns1__GetSDKRules *ns1__GetSDKRules_, ns1__GetSDKRulesResponse *ns1__GetSDKRulesResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetSDKRules soap_tmp___ns1__GetSDKRules;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetSDKRulesRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetSDKRules.ns1__GetSDKRules_ = ns1__GetSDKRules_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetSDKRules(soap, &soap_tmp___ns1__GetSDKRules);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetSDKRules(soap, &soap_tmp___ns1__GetSDKRules, "-ns1:GetSDKRules", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetSDKRules(soap, &soap_tmp___ns1__GetSDKRules, "-ns1:GetSDKRules", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetSDKRulesResponse_)
		return soap_closesock(soap);
	ns1__GetSDKRulesResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetSDKRulesResponse_->soap_get(soap, "ns1:GetSDKRulesResponse", "ns1:GetSDKRulesResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::CreateSDKTask(const char *endpoint, const char *soap_action, ns1__CreateSDKTask *ns1__CreateSDKTask_, ns1__CreateSDKTaskResponse *ns1__CreateSDKTaskResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__CreateSDKTask soap_tmp___ns1__CreateSDKTask;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/CreateSDKTaskRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CreateSDKTask.ns1__CreateSDKTask_ = ns1__CreateSDKTask_;
	soap_serializeheader(soap);
	soap_serialize___ns1__CreateSDKTask(soap, &soap_tmp___ns1__CreateSDKTask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CreateSDKTask(soap, &soap_tmp___ns1__CreateSDKTask, "-ns1:CreateSDKTask", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CreateSDKTask(soap, &soap_tmp___ns1__CreateSDKTask, "-ns1:CreateSDKTask", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CreateSDKTaskResponse_)
		return soap_closesock(soap);
	ns1__CreateSDKTaskResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CreateSDKTaskResponse_->soap_get(soap, "ns1:CreateSDKTaskResponse", "ns1:CreateSDKTaskResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::ModifySDKTask(const char *endpoint, const char *soap_action, ns1__ModifySDKTask *ns1__ModifySDKTask_, ns1__ModifySDKTaskResponse *ns1__ModifySDKTaskResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__ModifySDKTask soap_tmp___ns1__ModifySDKTask;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/ModifySDKTaskRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ModifySDKTask.ns1__ModifySDKTask_ = ns1__ModifySDKTask_;
	soap_serializeheader(soap);
	soap_serialize___ns1__ModifySDKTask(soap, &soap_tmp___ns1__ModifySDKTask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ModifySDKTask(soap, &soap_tmp___ns1__ModifySDKTask, "-ns1:ModifySDKTask", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ModifySDKTask(soap, &soap_tmp___ns1__ModifySDKTask, "-ns1:ModifySDKTask", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ModifySDKTaskResponse_)
		return soap_closesock(soap);
	ns1__ModifySDKTaskResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ModifySDKTaskResponse_->soap_get(soap, "ns1:ModifySDKTaskResponse", "ns1:ModifySDKTaskResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetSDKTaskFieldMapping(const char *endpoint, const char *soap_action, ns1__GetSDKTaskFieldMapping *ns1__GetSDKTaskFieldMapping_, ns1__GetSDKTaskFieldMappingResponse *ns1__GetSDKTaskFieldMappingResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetSDKTaskFieldMapping soap_tmp___ns1__GetSDKTaskFieldMapping;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetSDKTaskFieldMappingRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetSDKTaskFieldMapping.ns1__GetSDKTaskFieldMapping_ = ns1__GetSDKTaskFieldMapping_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetSDKTaskFieldMapping(soap, &soap_tmp___ns1__GetSDKTaskFieldMapping);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetSDKTaskFieldMapping(soap, &soap_tmp___ns1__GetSDKTaskFieldMapping, "-ns1:GetSDKTaskFieldMapping", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetSDKTaskFieldMapping(soap, &soap_tmp___ns1__GetSDKTaskFieldMapping, "-ns1:GetSDKTaskFieldMapping", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetSDKTaskFieldMappingResponse_)
		return soap_closesock(soap);
	ns1__GetSDKTaskFieldMappingResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetSDKTaskFieldMappingResponse_->soap_get(soap, "ns1:GetSDKTaskFieldMappingResponse", "ns1:GetSDKTaskFieldMappingResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::CreateSDKTaskFieldMapping(const char *endpoint, const char *soap_action, ns1__CreateSDKTaskFieldMapping *ns1__CreateSDKTaskFieldMapping_, ns1__CreateSDKTaskFieldMappingResponse *ns1__CreateSDKTaskFieldMappingResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__CreateSDKTaskFieldMapping soap_tmp___ns1__CreateSDKTaskFieldMapping;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/CreateSDKTaskFieldMappingRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CreateSDKTaskFieldMapping.ns1__CreateSDKTaskFieldMapping_ = ns1__CreateSDKTaskFieldMapping_;
	soap_serializeheader(soap);
	soap_serialize___ns1__CreateSDKTaskFieldMapping(soap, &soap_tmp___ns1__CreateSDKTaskFieldMapping);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CreateSDKTaskFieldMapping(soap, &soap_tmp___ns1__CreateSDKTaskFieldMapping, "-ns1:CreateSDKTaskFieldMapping", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CreateSDKTaskFieldMapping(soap, &soap_tmp___ns1__CreateSDKTaskFieldMapping, "-ns1:CreateSDKTaskFieldMapping", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CreateSDKTaskFieldMappingResponse_)
		return soap_closesock(soap);
	ns1__CreateSDKTaskFieldMappingResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CreateSDKTaskFieldMappingResponse_->soap_get(soap, "ns1:CreateSDKTaskFieldMappingResponse", "ns1:CreateSDKTaskFieldMappingResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::DeleteSDKTaskFieldMapping(const char *endpoint, const char *soap_action, ns1__DeleteSDKTaskFieldMapping *ns1__DeleteSDKTaskFieldMapping_, ns1__DeleteSDKTaskFieldMappingResponse *ns1__DeleteSDKTaskFieldMappingResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__DeleteSDKTaskFieldMapping soap_tmp___ns1__DeleteSDKTaskFieldMapping;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/DeleteSDKTaskFieldMappingRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DeleteSDKTaskFieldMapping.ns1__DeleteSDKTaskFieldMapping_ = ns1__DeleteSDKTaskFieldMapping_;
	soap_serializeheader(soap);
	soap_serialize___ns1__DeleteSDKTaskFieldMapping(soap, &soap_tmp___ns1__DeleteSDKTaskFieldMapping);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DeleteSDKTaskFieldMapping(soap, &soap_tmp___ns1__DeleteSDKTaskFieldMapping, "-ns1:DeleteSDKTaskFieldMapping", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DeleteSDKTaskFieldMapping(soap, &soap_tmp___ns1__DeleteSDKTaskFieldMapping, "-ns1:DeleteSDKTaskFieldMapping", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DeleteSDKTaskFieldMappingResponse_)
		return soap_closesock(soap);
	ns1__DeleteSDKTaskFieldMappingResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DeleteSDKTaskFieldMappingResponse_->soap_get(soap, "ns1:DeleteSDKTaskFieldMappingResponse", "ns1:DeleteSDKTaskFieldMappingResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::StoreSDKVariable(const char *endpoint, const char *soap_action, ns1__StoreSDKVariable *ns1__StoreSDKVariable_, ns1__StoreSDKVariableResponse *ns1__StoreSDKVariableResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__StoreSDKVariable soap_tmp___ns1__StoreSDKVariable;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/StoreSDKVariableRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__StoreSDKVariable.ns1__StoreSDKVariable_ = ns1__StoreSDKVariable_;
	soap_serializeheader(soap);
	soap_serialize___ns1__StoreSDKVariable(soap, &soap_tmp___ns1__StoreSDKVariable);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__StoreSDKVariable(soap, &soap_tmp___ns1__StoreSDKVariable, "-ns1:StoreSDKVariable", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__StoreSDKVariable(soap, &soap_tmp___ns1__StoreSDKVariable, "-ns1:StoreSDKVariable", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__StoreSDKVariableResponse_)
		return soap_closesock(soap);
	ns1__StoreSDKVariableResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__StoreSDKVariableResponse_->soap_get(soap, "ns1:StoreSDKVariableResponse", "ns1:StoreSDKVariableResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetSDKVariables(const char *endpoint, const char *soap_action, ns1__GetSDKVariables *ns1__GetSDKVariables_, ns1__GetSDKVariablesResponse *ns1__GetSDKVariablesResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetSDKVariables soap_tmp___ns1__GetSDKVariables;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetSDKVariablesRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetSDKVariables.ns1__GetSDKVariables_ = ns1__GetSDKVariables_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetSDKVariables(soap, &soap_tmp___ns1__GetSDKVariables);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetSDKVariables(soap, &soap_tmp___ns1__GetSDKVariables, "-ns1:GetSDKVariables", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetSDKVariables(soap, &soap_tmp___ns1__GetSDKVariables, "-ns1:GetSDKVariables", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetSDKVariablesResponse_)
		return soap_closesock(soap);
	ns1__GetSDKVariablesResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetSDKVariablesResponse_->soap_get(soap, "ns1:GetSDKVariablesResponse", "ns1:GetSDKVariablesResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetSDKTaskExcelPreview(const char *endpoint, const char *soap_action, ns1__GetSDKTaskExcelPreview *ns1__GetSDKTaskExcelPreview_, ns1__GetSDKTaskExcelPreviewResponse *ns1__GetSDKTaskExcelPreviewResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetSDKTaskExcelPreview soap_tmp___ns1__GetSDKTaskExcelPreview;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetSDKTaskExcelPreviewRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetSDKTaskExcelPreview.ns1__GetSDKTaskExcelPreview_ = ns1__GetSDKTaskExcelPreview_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetSDKTaskExcelPreview(soap, &soap_tmp___ns1__GetSDKTaskExcelPreview);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetSDKTaskExcelPreview(soap, &soap_tmp___ns1__GetSDKTaskExcelPreview, "-ns1:GetSDKTaskExcelPreview", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetSDKTaskExcelPreview(soap, &soap_tmp___ns1__GetSDKTaskExcelPreview, "-ns1:GetSDKTaskExcelPreview", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetSDKTaskExcelPreviewResponse_)
		return soap_closesock(soap);
	ns1__GetSDKTaskExcelPreviewResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetSDKTaskExcelPreviewResponse_->soap_get(soap, "ns1:GetSDKTaskExcelPreviewResponse", "ns1:GetSDKTaskExcelPreviewResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::ValidateSDKTask(const char *endpoint, const char *soap_action, ns1__ValidateSDKTask *ns1__ValidateSDKTask_, ns1__ValidateSDKTaskResponse *ns1__ValidateSDKTaskResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__ValidateSDKTask soap_tmp___ns1__ValidateSDKTask;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/ValidateSDKTaskRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ValidateSDKTask.ns1__ValidateSDKTask_ = ns1__ValidateSDKTask_;
	soap_serializeheader(soap);
	soap_serialize___ns1__ValidateSDKTask(soap, &soap_tmp___ns1__ValidateSDKTask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ValidateSDKTask(soap, &soap_tmp___ns1__ValidateSDKTask, "-ns1:ValidateSDKTask", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ValidateSDKTask(soap, &soap_tmp___ns1__ValidateSDKTask, "-ns1:ValidateSDKTask", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ValidateSDKTaskResponse_)
		return soap_closesock(soap);
	ns1__ValidateSDKTaskResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ValidateSDKTaskResponse_->soap_get(soap, "ns1:ValidateSDKTaskResponse", "ns1:ValidateSDKTaskResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::VerifySDKTaskNameExists(const char *endpoint, const char *soap_action, ns1__VerifySDKTaskNameExists *ns1__VerifySDKTaskNameExists_, ns1__VerifySDKTaskNameExistsResponse *ns1__VerifySDKTaskNameExistsResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__VerifySDKTaskNameExists soap_tmp___ns1__VerifySDKTaskNameExists;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/VerifySDKTaskNameExistsRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__VerifySDKTaskNameExists.ns1__VerifySDKTaskNameExists_ = ns1__VerifySDKTaskNameExists_;
	soap_serializeheader(soap);
	soap_serialize___ns1__VerifySDKTaskNameExists(soap, &soap_tmp___ns1__VerifySDKTaskNameExists);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__VerifySDKTaskNameExists(soap, &soap_tmp___ns1__VerifySDKTaskNameExists, "-ns1:VerifySDKTaskNameExists", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__VerifySDKTaskNameExists(soap, &soap_tmp___ns1__VerifySDKTaskNameExists, "-ns1:VerifySDKTaskNameExists", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__VerifySDKTaskNameExistsResponse_)
		return soap_closesock(soap);
	ns1__VerifySDKTaskNameExistsResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__VerifySDKTaskNameExistsResponse_->soap_get(soap, "ns1:VerifySDKTaskNameExistsResponse", "ns1:VerifySDKTaskNameExistsResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::UploadPreviewFile(const char *endpoint, const char *soap_action, ns1__UploadPreviewFile *ns1__UploadPreviewFile_, ns1__UploadPreviewFileResponse *ns1__UploadPreviewFileResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__UploadPreviewFile soap_tmp___ns1__UploadPreviewFile;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/UploadPreviewFileRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__UploadPreviewFile.ns1__UploadPreviewFile_ = ns1__UploadPreviewFile_;
	soap_serializeheader(soap);
	soap_serialize___ns1__UploadPreviewFile(soap, &soap_tmp___ns1__UploadPreviewFile);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UploadPreviewFile(soap, &soap_tmp___ns1__UploadPreviewFile, "-ns1:UploadPreviewFile", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UploadPreviewFile(soap, &soap_tmp___ns1__UploadPreviewFile, "-ns1:UploadPreviewFile", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__UploadPreviewFileResponse_)
		return soap_closesock(soap);
	ns1__UploadPreviewFileResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UploadPreviewFileResponse_->soap_get(soap, "ns1:UploadPreviewFileResponse", "ns1:UploadPreviewFileResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::CreateSDKTaskWatchFolder(const char *endpoint, const char *soap_action, ns1__CreateSDKTaskWatchFolder *ns1__CreateSDKTaskWatchFolder_, ns1__CreateSDKTaskWatchFolderResponse *ns1__CreateSDKTaskWatchFolderResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__CreateSDKTaskWatchFolder soap_tmp___ns1__CreateSDKTaskWatchFolder;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/CreateSDKTaskWatchFolderRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CreateSDKTaskWatchFolder.ns1__CreateSDKTaskWatchFolder_ = ns1__CreateSDKTaskWatchFolder_;
	soap_serializeheader(soap);
	soap_serialize___ns1__CreateSDKTaskWatchFolder(soap, &soap_tmp___ns1__CreateSDKTaskWatchFolder);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CreateSDKTaskWatchFolder(soap, &soap_tmp___ns1__CreateSDKTaskWatchFolder, "-ns1:CreateSDKTaskWatchFolder", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CreateSDKTaskWatchFolder(soap, &soap_tmp___ns1__CreateSDKTaskWatchFolder, "-ns1:CreateSDKTaskWatchFolder", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CreateSDKTaskWatchFolderResponse_)
		return soap_closesock(soap);
	ns1__CreateSDKTaskWatchFolderResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CreateSDKTaskWatchFolderResponse_->soap_get(soap, "ns1:CreateSDKTaskWatchFolderResponse", "ns1:CreateSDKTaskWatchFolderResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::ModifySDKTaskWatchFolder(const char *endpoint, const char *soap_action, ns1__ModifySDKTaskWatchFolder *ns1__ModifySDKTaskWatchFolder_, ns1__ModifySDKTaskWatchFolderResponse *ns1__ModifySDKTaskWatchFolderResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__ModifySDKTaskWatchFolder soap_tmp___ns1__ModifySDKTaskWatchFolder;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/ModifySDKTaskWatchFolderRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ModifySDKTaskWatchFolder.ns1__ModifySDKTaskWatchFolder_ = ns1__ModifySDKTaskWatchFolder_;
	soap_serializeheader(soap);
	soap_serialize___ns1__ModifySDKTaskWatchFolder(soap, &soap_tmp___ns1__ModifySDKTaskWatchFolder);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ModifySDKTaskWatchFolder(soap, &soap_tmp___ns1__ModifySDKTaskWatchFolder, "-ns1:ModifySDKTaskWatchFolder", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ModifySDKTaskWatchFolder(soap, &soap_tmp___ns1__ModifySDKTaskWatchFolder, "-ns1:ModifySDKTaskWatchFolder", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ModifySDKTaskWatchFolderResponse_)
		return soap_closesock(soap);
	ns1__ModifySDKTaskWatchFolderResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ModifySDKTaskWatchFolderResponse_->soap_get(soap, "ns1:ModifySDKTaskWatchFolderResponse", "ns1:ModifySDKTaskWatchFolderResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetSDKWatchFolderDirectories(const char *endpoint, const char *soap_action, ns1__GetSDKWatchFolderDirectories *ns1__GetSDKWatchFolderDirectories_, ns1__GetSDKWatchFolderDirectoriesResponse *ns1__GetSDKWatchFolderDirectoriesResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetSDKWatchFolderDirectories soap_tmp___ns1__GetSDKWatchFolderDirectories;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetSDKWatchFolderDirectoriesRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetSDKWatchFolderDirectories.ns1__GetSDKWatchFolderDirectories_ = ns1__GetSDKWatchFolderDirectories_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetSDKWatchFolderDirectories(soap, &soap_tmp___ns1__GetSDKWatchFolderDirectories);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetSDKWatchFolderDirectories(soap, &soap_tmp___ns1__GetSDKWatchFolderDirectories, "-ns1:GetSDKWatchFolderDirectories", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetSDKWatchFolderDirectories(soap, &soap_tmp___ns1__GetSDKWatchFolderDirectories, "-ns1:GetSDKWatchFolderDirectories", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetSDKWatchFolderDirectoriesResponse_)
		return soap_closesock(soap);
	ns1__GetSDKWatchFolderDirectoriesResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetSDKWatchFolderDirectoriesResponse_->soap_get(soap, "ns1:GetSDKWatchFolderDirectoriesResponse", "ns1:GetSDKWatchFolderDirectoriesResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetSDKImagesFromPDFTemplate(const char *endpoint, const char *soap_action, ns1__GetSDKImagesFromPDFTemplate *ns1__GetSDKImagesFromPDFTemplate_, ns1__GetSDKImagesFromPDFTemplateResponse *ns1__GetSDKImagesFromPDFTemplateResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetSDKImagesFromPDFTemplate soap_tmp___ns1__GetSDKImagesFromPDFTemplate;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetSDKImagesFromPDFTemplateRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetSDKImagesFromPDFTemplate.ns1__GetSDKImagesFromPDFTemplate_ = ns1__GetSDKImagesFromPDFTemplate_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetSDKImagesFromPDFTemplate(soap, &soap_tmp___ns1__GetSDKImagesFromPDFTemplate);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetSDKImagesFromPDFTemplate(soap, &soap_tmp___ns1__GetSDKImagesFromPDFTemplate, "-ns1:GetSDKImagesFromPDFTemplate", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetSDKImagesFromPDFTemplate(soap, &soap_tmp___ns1__GetSDKImagesFromPDFTemplate, "-ns1:GetSDKImagesFromPDFTemplate", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetSDKImagesFromPDFTemplateResponse_)
		return soap_closesock(soap);
	ns1__GetSDKImagesFromPDFTemplateResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetSDKImagesFromPDFTemplateResponse_->soap_get(soap, "ns1:GetSDKImagesFromPDFTemplateResponse", "ns1:GetSDKImagesFromPDFTemplateResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::ExtractSDKPDFTemplateTextByArea(const char *endpoint, const char *soap_action, ns1__ExtractSDKPDFTemplateTextByArea *ns1__ExtractSDKPDFTemplateTextByArea_, ns1__ExtractSDKPDFTemplateTextByAreaResponse *ns1__ExtractSDKPDFTemplateTextByAreaResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__ExtractSDKPDFTemplateTextByArea soap_tmp___ns1__ExtractSDKPDFTemplateTextByArea;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/ExtractSDKPDFTemplateTextByAreaRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ExtractSDKPDFTemplateTextByArea.ns1__ExtractSDKPDFTemplateTextByArea_ = ns1__ExtractSDKPDFTemplateTextByArea_;
	soap_serializeheader(soap);
	soap_serialize___ns1__ExtractSDKPDFTemplateTextByArea(soap, &soap_tmp___ns1__ExtractSDKPDFTemplateTextByArea);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ExtractSDKPDFTemplateTextByArea(soap, &soap_tmp___ns1__ExtractSDKPDFTemplateTextByArea, "-ns1:ExtractSDKPDFTemplateTextByArea", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ExtractSDKPDFTemplateTextByArea(soap, &soap_tmp___ns1__ExtractSDKPDFTemplateTextByArea, "-ns1:ExtractSDKPDFTemplateTextByArea", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ExtractSDKPDFTemplateTextByAreaResponse_)
		return soap_closesock(soap);
	ns1__ExtractSDKPDFTemplateTextByAreaResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ExtractSDKPDFTemplateTextByAreaResponse_->soap_get(soap, "ns1:ExtractSDKPDFTemplateTextByAreaResponse", "ns1:ExtractSDKPDFTemplateTextByAreaResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::GetSDKTextFromTemplate(const char *endpoint, const char *soap_action, ns1__GetSDKTextFromTemplate *ns1__GetSDKTextFromTemplate_, ns1__GetSDKTextFromTemplateResponse *ns1__GetSDKTextFromTemplateResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__GetSDKTextFromTemplate soap_tmp___ns1__GetSDKTextFromTemplate;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/GetSDKTextFromTemplateRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetSDKTextFromTemplate.ns1__GetSDKTextFromTemplate_ = ns1__GetSDKTextFromTemplate_;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetSDKTextFromTemplate(soap, &soap_tmp___ns1__GetSDKTextFromTemplate);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetSDKTextFromTemplate(soap, &soap_tmp___ns1__GetSDKTextFromTemplate, "-ns1:GetSDKTextFromTemplate", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetSDKTextFromTemplate(soap, &soap_tmp___ns1__GetSDKTextFromTemplate, "-ns1:GetSDKTextFromTemplate", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetSDKTextFromTemplateResponse_)
		return soap_closesock(soap);
	ns1__GetSDKTextFromTemplateResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetSDKTextFromTemplateResponse_->soap_get(soap, "ns1:GetSDKTextFromTemplateResponse", "ns1:GetSDKTextFromTemplateResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::ChangeSDKTaskStatus(const char *endpoint, const char *soap_action, ns1__ChangeSDKTaskStatus *ns1__ChangeSDKTaskStatus_, ns1__ChangeSDKTaskStatusResponse *ns1__ChangeSDKTaskStatusResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__ChangeSDKTaskStatus soap_tmp___ns1__ChangeSDKTaskStatus;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/ChangeSDKTaskStatusRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ChangeSDKTaskStatus.ns1__ChangeSDKTaskStatus_ = ns1__ChangeSDKTaskStatus_;
	soap_serializeheader(soap);
	soap_serialize___ns1__ChangeSDKTaskStatus(soap, &soap_tmp___ns1__ChangeSDKTaskStatus);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ChangeSDKTaskStatus(soap, &soap_tmp___ns1__ChangeSDKTaskStatus, "-ns1:ChangeSDKTaskStatus", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ChangeSDKTaskStatus(soap, &soap_tmp___ns1__ChangeSDKTaskStatus, "-ns1:ChangeSDKTaskStatus", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ChangeSDKTaskStatusResponse_)
		return soap_closesock(soap);
	ns1__ChangeSDKTaskStatusResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ChangeSDKTaskStatusResponse_->soap_get(soap, "ns1:ChangeSDKTaskStatusResponse", "ns1:ChangeSDKTaskStatusResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::send_StartSDKTask(const char *endpoint, const char *soap_action, ns1__StartSDKTask *ns1__StartSDKTask_)
{	struct soap *soap = this->soap;
	struct __ns1__StartSDKTask soap_tmp___ns1__StartSDKTask;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/StartSDKTask";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__StartSDKTask.ns1__StartSDKTask_ = ns1__StartSDKTask_;
	soap_serializeheader(soap);
	soap_serialize___ns1__StartSDKTask(soap, &soap_tmp___ns1__StartSDKTask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__StartSDKTask(soap, &soap_tmp___ns1__StartSDKTask, "-ns1:StartSDKTask", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__StartSDKTask(soap, &soap_tmp___ns1__StartSDKTask, "-ns1:StartSDKTask", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int abxWsGestPortBindingProxy::recv_StartSDKTask(struct __ns1__StartSDKTask& tmp)
{	struct soap *soap = this->soap;

	struct __ns1__StartSDKTask *_param_1 = &tmp;
	soap_default___ns1__StartSDKTask(soap, _param_1);
	soap_begin(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get___ns1__StartSDKTask(soap, _param_1, "-ns1:StartSDKTask", NULL);
	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
		soap->error = SOAP_OK;
	if (soap->error
	 || soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::DeleteSDKTask(const char *endpoint, const char *soap_action, ns1__DeleteSDKTask *ns1__DeleteSDKTask_, ns1__DeleteSDKTaskResponse *ns1__DeleteSDKTaskResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__DeleteSDKTask soap_tmp___ns1__DeleteSDKTask;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/DeleteSDKTaskRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DeleteSDKTask.ns1__DeleteSDKTask_ = ns1__DeleteSDKTask_;
	soap_serializeheader(soap);
	soap_serialize___ns1__DeleteSDKTask(soap, &soap_tmp___ns1__DeleteSDKTask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DeleteSDKTask(soap, &soap_tmp___ns1__DeleteSDKTask, "-ns1:DeleteSDKTask", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DeleteSDKTask(soap, &soap_tmp___ns1__DeleteSDKTask, "-ns1:DeleteSDKTask", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DeleteSDKTaskResponse_)
		return soap_closesock(soap);
	ns1__DeleteSDKTaskResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DeleteSDKTaskResponse_->soap_get(soap, "ns1:DeleteSDKTaskResponse", "ns1:DeleteSDKTaskResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int abxWsGestPortBindingProxy::ModifyUserPassword(const char *endpoint, const char *soap_action, ns1__ModifyUserPassword *ns1__ModifyUserPassword_, ns1__ModifyUserPasswordResponse *ns1__ModifyUserPasswordResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__ModifyUserPassword soap_tmp___ns1__ModifyUserPassword;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://iabx000002.iabx.net:80/abxWsGestService/abxWsGest";
	if (soap_action == NULL)
		soap_action = "http://ws.abx/abxWsGest/ModifyUserPasswordRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ModifyUserPassword.ns1__ModifyUserPassword_ = ns1__ModifyUserPassword_;
	soap_serializeheader(soap);
	soap_serialize___ns1__ModifyUserPassword(soap, &soap_tmp___ns1__ModifyUserPassword);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ModifyUserPassword(soap, &soap_tmp___ns1__ModifyUserPassword, "-ns1:ModifyUserPassword", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ModifyUserPassword(soap, &soap_tmp___ns1__ModifyUserPassword, "-ns1:ModifyUserPassword", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ModifyUserPasswordResponse_)
		return soap_closesock(soap);
	ns1__ModifyUserPasswordResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ModifyUserPasswordResponse_->soap_get(soap, "ns1:ModifyUserPasswordResponse", "ns1:ModifyUserPasswordResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
